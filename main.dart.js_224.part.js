// Generated by dart2js (, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.1.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_224", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var B, C,
  A = {
    L10nHu$() {
      return new A.L10nHu(B.canonicalizedLocale("hu"));
    },
    L10nHu: function L10nHu(t0) {
      this.localeName = t0;
    }
  };
  B = holdersList[0];
  C = holdersList[54];
  A = hunkHelpers.updateHolder(holdersList[28], A);
  A.L10nHu.prototype = {
    get$alwaysUse24HourFormat() {
      return "hamis";
    },
    get$repeatPassword() {
      return "Jelsz\xf3 ism\xe9tl\xe9se";
    },
    get$notAnImage() {
      return "Nem k\xe9p f\xe1jl.";
    },
    get$setCustomPermissionLevel() {
      return "Egyedi enged\xe9lyszint be\xe1ll\xedt\xe1sa";
    },
    get$setPermissionsLevelDescription() {
      return "K\xe9rem, v\xe1lasszon egy el\u0151re meghat\xe1rozott szerepk\xf6rt, vagy adjon meg egy egyedi enged\xe9ly szintet 0 \xe9s 100 k\xf6z\xf6tt.";
    },
    get$ignoreUser() {
      return "Felhaszn\xe1l\xf3 ignor\xe1l\xe1sa";
    },
    get$normalUser() {
      return "Norm\xe1l felhaszn\xe1l\xf3";
    },
    get$remove(_) {
      return "Elt\xe1vol\xedt\xe1s";
    },
    get$importNow() {
      return "Import\xe1l\xe1s most";
    },
    get$importEmojis() {
      return "Emojik import\xe1l\xe1sa";
    },
    get$importFromZipFile() {
      return "Import\xe1l\xe1s zip f\xe1jlb\xf3l";
    },
    get$exportEmotePack() {
      return "Emojicsomag export\xe1l\xe1sa zip-be";
    },
    get$replace(_) {
      return "Kicser\xe9l";
    },
    aboutHomeserver$1(homeserver) {
      return "N\xe9vjegy " + homeserver;
    },
    get$accept(_) {
      return "Elfogad";
    },
    acceptedTheInvitation$1(username) {
      return "\ud83d\udc4d " + username + " elfogadta a megh\xedv\xe1st";
    },
    get$account() {
      return "Fi\xf3k";
    },
    activatedEndToEndEncryption$1(username) {
      return "\ud83d\udd10 " + username + " aktiv\xe1lta a v\xe9gpontok k\xf6z\xf6tti titkos\xedt\xe1st";
    },
    get$addEmail() {
      return "E-mail-c\xedm hozz\xe1ad\xe1sa";
    },
    supposedMxid$1(mxid) {
      return mxid + "-nek kell lennie";
    },
    get$admin() {
      return "Adminisztr\xe1tor";
    },
    get$commandHint_roomupgrade() {
      return "Szoba friss\xedt\xe9se a megadott szoba verzi\xf3ra";
    },
    get$commandHint_googly() {
      return "G\xfcl\xfcszemek k\xfcld\xe9se";
    },
    get$commandHint_cuddle() {
      return "\xd6sszeb\xfaj\xe1s k\xfcld\xe9se";
    },
    get$commandHint_hug() {
      return "\xd6lel\xe9s k\xfcld\xe9se";
    },
    googlyEyesContent$1(senderName) {
      return senderName + " g\xfcl\xfcszemeket k\xfcld";
    },
    cuddleContent$1(senderName) {
      return senderName + " hozz\xe1d b\xfajik";
    },
    hugContent$1(senderName) {
      return senderName + " meg\xf6lel";
    },
    answeredTheCall$1(senderName) {
      return senderName + " v\xe1laszolt a h\xedv\xe1sra";
    },
    get$anyoneCanJoin() {
      return "B\xe1rki csatlakozhat";
    },
    get$archive() {
      return "Arch\xedvum";
    },
    get$areYouSure() {
      return "Biztos benne?";
    },
    get$areYouSureYouWantToLogout() {
      return "Biztosan kijelentkezik?";
    },
    get$askSSSSSign() {
      return "A m\xe1sik f\xe9l igazol\xe1s\xe1hoz meg kell adnia a biztons\xe1gos t\xe1rol\xf3 jelmondat\xe1t vagy a vissza\xe1ll\xedt\xe1si kulcsot\xe1t.";
    },
    askVerificationRequest$1(username) {
      return "Elfogadja " + username + " hiteles\xedt\xe9si k\xe9relm\xe9t?";
    },
    badServerLoginTypesException$3(serverVersions, supportedVersions, suportedVersions) {
      return "A Matrix-kiszolg\xe1l\xf3 a k\xf6vetkez\u0151 bejelentkez\xe9seket t\xe1mogatja:\n" + serverVersions + "\nDe ez az alkalmaz\xe1st csak ezeket t\xe1mogatja:\n" + supportedVersions;
    },
    get$sendTypingNotifications() {
      return "G\xe9pel\xe9si \xe9rtes\xedt\xe9s megjelen\xedt\xe9se";
    },
    get$swipeRightToLeftToReply() {
      return "H\xfazza balra a v\xe1laszol\xe1shoz";
    },
    get$sendOnEnter() {
      return "K\xfcld\xe9s Enterrel";
    },
    countChatsAndCountParticipants$2(chats, participants) {
      return "" + chats + " cseveg\xe9sek \xe9s " + participants + " r\xe9sztvev\u0151k";
    },
    get$noMoreChatsFound() {
      return "Nem tal\xe1lhat\xf3 t\xf6bb cseveg\xe9s...";
    },
    get$banFromChat() {
      return "Kitilt\xe1s a cseveg\xe9sb\u0151l";
    },
    get$banned() {
      return "Kitiltva";
    },
    bannedUser$2(username, targetName) {
      return username + " kitiltva " + targetName + " \xe1ltal";
    },
    get$blockDevice() {
      return "Eszk\xf6z blokkol\xe1sa";
    },
    get$blocked() {
      return "Blokkolva";
    },
    get$cancel(_) {
      return "M\xe9gse";
    },
    cantOpenUri$1(uri) {
      return "Nem siker\xfclt a k\xf6vetkez\u0151 URI megnyit\xe1sa: " + uri;
    },
    get$changeDeviceName() {
      return "Eszk\xf6zn\xe9v m\xf3dos\xedt\xe1sa";
    },
    changedTheChatAvatar$1(username) {
      return username + " m\xf3dos\xedtotta a cseveg\xe9si profilk\xe9p\xe9t";
    },
    changedTheChatDescriptionTo$2(username, description) {
      return username + " megv\xe1ltoztatta a cseveg\xe9s le\xedr\xe1st a k\xf6vetkez\u0151re: '" + description + "'";
    },
    changedTheChatNameTo$2(username, chatname) {
      return username + " m\xf3dos\xedtotta a cseveg\xe9s nev\xe9t a k\xf6vetkez\u0151re: '" + chatname + "'";
    },
    changedTheChatPermissions$1(username) {
      return username + " m\xf3dos\xedtotta a cseveg\xe9si enged\xe9lyeket";
    },
    changedTheDisplaynameTo$2(username, displayname) {
      return username + " m\xf3dos\xedtotta a megjelen\xedtett nev\xe9t erre: '" + displayname + "'";
    },
    changedTheGuestAccessRules$1(username) {
      return username + " m\xf3dos\xedtotta a vend\xe9gek hozz\xe1f\xe9r\xe9si szab\xe1lyokat";
    },
    changedTheGuestAccessRulesTo$2(username, rules) {
      return username + " m\xf3dos\xedtotta a vend\xe9gek hozz\xe1f\xe9r\xe9si szab\xe1lyait a k\xf6vetkez\u0151re: " + rules;
    },
    changedTheHistoryVisibility$1(username) {
      return username + " m\xf3dos\xedtotta az el\u0151zm\xe9nyek l\xe1that\xf3s\xe1g\xe1t";
    },
    changedTheHistoryVisibilityTo$2(username, rules) {
      return username + " m\xf3dos\xedtotta az el\u0151zm\xe9nyek l\xe1that\xf3s\xe1g\xe1t a k\xf6vetkez\u0151re: " + rules;
    },
    changedTheJoinRules$1(username) {
      return username + " m\xf3dos\xedtott a csatlakoz\xe1si szab\xe1lyokat";
    },
    changedTheJoinRulesTo$2(username, joinRules) {
      return username + " m\xf3dos\xedtotta a csatlakoz\xe1si szab\xe1lyokat a k\xf6vetkez\u0151re: " + joinRules;
    },
    changedTheProfileAvatar$1(username) {
      return username + " m\xf3dos\xedtotta a profilk\xe9p\xe9t";
    },
    changedTheRoomAliases$1(username) {
      return username + " m\xf3dos\xedtotta a szoba \xe1lneveit";
    },
    changedTheRoomInvitationLink$1(username) {
      return username + " m\xf3dos\xedtotta a megh\xedv\xf3 hivatkoz\xe1st";
    },
    get$changePassword() {
      return "Jelsz\xf3 m\xf3dos\xedt\xe1sa";
    },
    get$changeTheme() {
      return "St\xedlus\xe1nak m\xf3dos\xedt\xe1sa";
    },
    get$changeYourAvatar() {
      return "Profilk\xe9p m\xf3dos\xedt\xe1sa";
    },
    get$channelCorruptedDecryptError() {
      return "A titkos\xedt\xe1s megs\xe9r\xfclt";
    },
    get$chat() {
      return "Cseveg\xe9s";
    },
    get$chatDetails() {
      return "Cseveg\xe9s r\xe9szletei";
    },
    get$chats() {
      return "Cseveg\xe9sek";
    },
    get$chooseAStrongPassword() {
      return "V\xe1lasszon egy er\u0151s jelsz\xf3t";
    },
    get$clearArchive() {
      return "Arch\xedvum \xfcr\xedt\xe9se";
    },
    get$close(_) {
      return "Bez\xe1r";
    },
    get$commandHint_markasdm() {
      return "Szoba megjel\xf6l\xe9se mint k\xf6zvetlen cseveg\u0151 szoba az adott Matrix ID-n\xe9l";
    },
    get$commandHint_markasgroup() {
      return "Jel\xf6l\xe9s csoportnak";
    },
    get$commandHint_ban() {
      return "Adott felhaszn\xe1l\xf3 kitilt\xe1sa a szob\xe1b\xf3l";
    },
    get$commandHint_clearcache() {
      return "Gyors\xedt\xf3t\xe1r t\xf6rl\xe9se";
    },
    get$commandHint_create() {
      return "Egy \xfcres cseveg\u0151 csoport l\xe9trehoz\xe1sa\nA --no-encryption param\xe9terrel feloldhatja a titkos\xedt\xe1st";
    },
    get$commandHint_discardsession() {
      return "Munkamenet elvet\xe9se";
    },
    get$commandHint_dm() {
      return "K\xf6zvetlen cseveg\xe9s ind\xedt\xe1sa\nA --no-encryption param\xe9terrel kikapcsolhatja a titkos\xedt\xe1st";
    },
    get$commandHint_html() {
      return "HTML form\xe1zott sz\xf6veg k\xfcld\xe9se";
    },
    get$commandHint_invite() {
      return "Adott felhaszn\xe1l\xf3 megh\xedv\xe1sa ebbe a szob\xe1ba";
    },
    get$commandHint_join() {
      return "Csatlakoz\xe1s a megadott szob\xe1hoz";
    },
    get$commandHint_kick() {
      return "A megadott felhaszn\xe1l\xf3 kir\xfag\xe1sa a szob\xe1b\xf3l";
    },
    get$commandHint_leave() {
      return "Szoba elhagy\xe1sa";
    },
    get$commandHint_me() {
      return "\xcdrja le mag\xe1t";
    },
    get$commandHint_myroomavatar() {
      return "Profilk\xe9pe hozz\xe1rendel\xe9se a szob\xe1hoz (mxc URI haszn\xe1lat\xe1val)";
    },
    get$commandHint_myroomnick() {
      return "Megjelen\xedtett nev\xe9nek hozz\xe1rendel\xe9se a szob\xe1hoz";
    },
    get$commandHint_op() {
      return "Az adott felhaszn\xe1l\xf3 hozz\xe1f\xe9r\xe9si szintj\xe9nek megad\xe1sa (alap\xe9rtelmezett: 50)";
    },
    get$commandHint_plain() {
      return "Form\xe1zatlan sz\xf6veg k\xfcld\xe9se";
    },
    get$commandHint_react() {
      return "V\xe1lasz k\xfcld\xe9se reakci\xf3k\xe9nt";
    },
    get$commandHint_send() {
      return "Sz\xf6veg k\xfcld\xe9se";
    },
    get$commandHint_unban() {
      return "Adott felhaszn\xe1l\xf3 kitilt\xe1s\xe1nak felold\xe1sa a szob\xe1hoz";
    },
    get$compareEmojiMatch() {
      return "K\xe9rem, hasonl\xedtsa \xf6ssze a hangulatjeleket";
    },
    get$compareNumbersMatch() {
      return "K\xe9rem, hasonl\xedtsa \xf6ssze a sz\xe1mokat";
    },
    get$configureChat() {
      return "Cseveg\xe9s konfigur\xe1l\xe1sa";
    },
    get$confirm(_) {
      return "Meger\u0151s\xedt";
    },
    get$copiedToClipboard() {
      return "V\xe1g\xf3lapra m\xe1solva";
    },
    get$copy(_) {
      return "M\xe1sol\xe1s";
    },
    couldNotDecryptMessage$1(error) {
      return "Nem siker\xfclt visszafejteni az \xfczenetet: " + error;
    },
    get$checkList() {
      return "Tennival\xf3k list\xe1ja";
    },
    countParticipants$1(count) {
      return "" + count + " r\xe9sztvev\u0151";
    },
    countInvited$1(count) {
      return "" + count + " megh\xedvott";
    },
    get$create(_) {
      return "L\xe9trehoz";
    },
    createdTheChat$1(username) {
      return "\ud83d\udcac " + username + " cseveg\xe9st hozott l\xe9tre";
    },
    get$createGroup() {
      return "Csoport l\xe9trehoz\xe1sa";
    },
    get$currentlyActive() {
      return "Jelenleg akt\xedv";
    },
    get$darkTheme() {
      return "S\xf6t\xe9t";
    },
    dateAndTimeOfDay$2(date, timeOfDay) {
      return date + ", " + timeOfDay;
    },
    get$deactivateAccountWarning() {
      return "Ez deaktiv\xe1lja a felhaszn\xe1l\xf3i fi\xf3kj\xe1t. Ez nem vonhat\xf3 vissza! Biztos benne?";
    },
    get$defaultPermissionLevel() {
      return "Alap\xe9rtelmezett hozz\xe1f\xe9r\xe9si szint \xfaj felhaszn\xe1l\xf3kn\xe1l";
    },
    get$$delete(_) {
      return "T\xf6rl\xe9s";
    },
    get$deleteAccount() {
      return "Fi\xf3k t\xf6rl\xe9se";
    },
    get$deleteMessage() {
      return "\xdczenet t\xf6rl\xe9se";
    },
    get$devices() {
      return "Eszk\xf6z\xf6k";
    },
    get$displaynameHasBeenChanged() {
      return "A megjelen\xedt\xe9si n\xe9v megv\xe1ltozott";
    },
    get$downloadFile() {
      return "F\xe1jl let\xf6lt\xe9se";
    },
    get$edit() {
      return "Szerkeszt";
    },
    get$editBlockedServers() {
      return "Blokkolt szerverek szerkeszt\xe9se";
    },
    get$chatPermissions() {
      return "Cseveg\xe9s enged\xe9lyek";
    },
    get$editDisplayname() {
      return "Megjelen\xedt\xe9si n\xe9v szerkeszt\xe9se";
    },
    get$editRoomAvatar() {
      return "Szoba-profilk\xe9p szerkeszt\xe9se";
    },
    get$emoteExists() {
      return "A hangulatjel m\xe1r l\xe9tezik!";
    },
    get$emoteInvalid() {
      return "\xc9rv\xe9nytelen hangulatjel r\xf6vidk\xf3d!";
    },
    get$emoteKeyboardNoRecents() {
      return "A nemr\xe9g haszn\xe1lt hangulatjelek fognak itt megjelenni...";
    },
    get$emotePacks() {
      return "Hangulatjel csomagok a szob\xe1hoz";
    },
    get$customEmojisAndStickers() {
      return "Egyedi hangulatjelek \xe9s matric\xe1k";
    },
    get$emoteShortcode() {
      return "Hangulatjel r\xf6vidk\xf3d";
    },
    get$emoteWarnNeedToPick() {
      return "Ki kell v\xe1lasztania egy hangulatjel r\xf6vidk\xf3dot \xe9s egy k\xe9pet!";
    },
    get$emptyChat() {
      return "\xdcres cseveg\xe9s";
    },
    get$enableEmotesGlobally() {
      return "Hangulatjel csomag enged\xe9lyez\xe9se glob\xe1lisan";
    },
    get$enableEncryption() {
      return "Titkos\xedt\xe1s enged\xe9lyez\xe9se";
    },
    get$encrypted() {
      return "Titkos\xedtott";
    },
    get$encryptionNotEnabled() {
      return "Titkos\xedt\xe1s nem enged\xe9lyezve";
    },
    endedTheCall$1(senderName) {
      return senderName + " befejezte a h\xedv\xe1st";
    },
    get$enterAnEmailAddress() {
      return "Adjon meg egy email c\xedmet";
    },
    errorObtainingLocation$1(error) {
      return "Hiba a helymeghat\xe1roz\xe1skor: " + error;
    },
    get$fontSize(_) {
      return "Bet\u0171m\xe9ret";
    },
    get$forward(_) {
      return "Tov\xe1bb\xedt\xe1s";
    },
    get$fromJoining() {
      return "Csatlakoz\xe1s \xf3ta";
    },
    get$fromTheInvitation() {
      return "Megh\xedv\xe1s \xf3ta";
    },
    get$guestsAreForbidden() {
      return "A vend\xe9gek nem enged\xe9lyezettek";
    },
    get$guestsCanJoin() {
      return "Csatlakozhatnak vend\xe9gek";
    },
    hasWithdrawnTheInvitationFor$2(username, targetName) {
      return username + " visszavonta " + targetName + " megh\xedv\xe1s\xe1t";
    },
    get$help() {
      return "S\xfag\xf3";
    },
    get$hideRedactedMessages() {
      return "Szerkesztett \xfczenetek elrejt\xe9se";
    },
    get$hideRedactedMessagesBody() {
      return "Ha valaki szerkeszti az \xfczenet\xe9t, ez az \xfczenet nem jelenik meg a cseveg\xe9s sor\xe1n.";
    },
    get$hideInvalidOrUnknownMessageFormats() {
      return "\xc9rv\xe9nytelen vagy ismeretlen \xfczenetform\xe1tum elrejt\xe9se";
    },
    get$block() {
      return "Blokkol\xe1s";
    },
    get$blockedUsers() {
      return "Blokkolt felhaszn\xe1l\xf3k";
    },
    get$blockListDescription() {
      return "Az \xd6nt zavar\xf3 felhaszn\xe1l\xf3kat blokkolhatja. A blokkolt list\xe1n tal\xe1lhat\xf3 felhaszn\xe1l\xf3kt\xf3l nem tud fogadni \xfczenetet vagy szoba megh\xedv\xe1st.";
    },
    get$blockUsername() {
      return "Felhaszn\xe1l\xf3n\xe9v ignor\xe1l\xe1sa";
    },
    get$iHaveClickedOnLink() {
      return "R\xe1kattintottam a linkre";
    },
    get$incorrectPassphraseOrKey() {
      return "Hib\xe1s jelmondat vagy vissza\xe1ll\xedt\xe1si kulcs";
    },
    get$inviteContact() {
      return "Ismer\u0151s megh\xedv\xe1sa";
    },
    get$noChatDescriptionYet() {
      return "M\xe9g nincs cseveg\u0151 szoba le\xedr\xe1s.";
    },
    get$tryAgain() {
      return "Pr\xf3b\xe1lja \xfajra";
    },
    get$invited() {
      return "Megh\xedvott";
    },
    get$redactMessageDescription() {
      return "A t\xe1rsalg\xe1sban \xf6sszes r\xe9sztvev\u0151je sz\xe1m\xe1ra m\xf3dos\xedt\xe1sra ker\xfcl az \xfczenet. Ez nem visszavonhat\xf3.";
    },
    get$optionalRedactReason() {
      return "(V\xe1laszthat\xf3) A szerkeszt\xe9s oka...";
    },
    invitedUser$2(username, targetName) {
      return "\ud83d\udce9 " + username + " megh\xedvta " + targetName + " felhaszn\xe1l\xf3t";
    },
    get$invitedUsersOnly() {
      return "Csak megh\xedvott felhaszn\xe1l\xf3k";
    },
    get$inviteForMe() {
      return "Megh\xedv\xe1s sz\xe1momra";
    },
    get$isTyping() {
      return "\xe9pp g\xe9pel\u2026";
    },
    joinedTheChat$1(username) {
      return "\ud83d\udc4b " + username + " csatlakozott a cseveg\xe9shez";
    },
    kicked$2(username, targetName) {
      return "\ud83d\udc5e " + username + " kir\xfagta " + targetName + "-t";
    },
    get$kickFromChat() {
      return "Kir\xfag\xe1s a cseveg\xe9sb\u0151l";
    },
    lastActiveAgo$1(localizedTimeShort) {
      return "Utolj\xe1ra akt\xedv: " + localizedTimeShort;
    },
    get$leave() {
      return "Elhagy";
    },
    get$leftTheChat() {
      return "Elhagyta a cseveg\xe9st";
    },
    get$lightTheme() {
      return "Vil\xe1gos";
    },
    get$dehydrate() {
      return "Munkamenet export\xe1l\xe1sa \xe9s az eszk\xf6z t\xf6rl\xe9se";
    },
    get$dehydrateWarning() {
      return "Ez nem visszavonhat\xf3. Bizonyosodjon meg r\xf3la, hogy biztons\xe1gos helyre menti a f\xe1jlt.";
    },
    get$dehydrateTor() {
      return "TOR felhaszn\xe1l\xf3k: Munkamenet export\xe1l\xe1sa";
    },
    get$dehydrateTorLong() {
      return "TOR felhaszn\xe1l\xf3knak aj\xe1nlott a munkamenet export\xe1l\xe1sa az ablak bez\xe1r\xe1sa el\u0151tt.";
    },
    get$loadingPleaseWait() {
      return "Bet\xf6lt\xe9s\u2026 K\xe9rem, v\xe1rjon.";
    },
    get$loadMore() {
      return "Tov\xe1bbiak bet\xf6lt\xe9se\u2026";
    },
    get$locationDisabledNotice() {
      return "A helymeghat\xe1roz\xe1s ki van kapcsolva. K\xe9rem, kapcsolja be, hogy meg tudja osztani helyzet\xe9t.";
    },
    get$locationPermissionDeniedNotice() {
      return "A helymeghat\xe1roz\xe1s visszautas\xedt\xe1sra ker\xfclt. K\xe9rem enged\xe9lyezze, hogy meg tudja osztani helyzet\xe9t.";
    },
    get$logout() {
      return "Kijelentkez\xe9s";
    },
    get$mention() {
      return "Megeml\xedt\xe9s";
    },
    get$messages() {
      return "\xdczenetek";
    },
    get$messagesStyle() {
      return "\xdczenetek:";
    },
    get$moderator() {
      return "Moder\xe1tor";
    },
    get$newChat() {
      return "\xdaj cseveg\xe9s";
    },
    get$newVerificationRequest() {
      return "\xdaj hiteles\xedt\xe9si k\xe9relem!";
    },
    get$next(_) {
      return "K\xf6vetkez\u0151";
    },
    get$no() {
      return "Nem";
    },
    get$noConnectionToTheServer() {
      return "Nem el\xe9rhet\u0151 a szerver";
    },
    get$noEmotesFound() {
      return "Nem tal\xe1lhat\xf3ak hangulatjelek. \ud83d\ude15";
    },
    get$shareInviteLink() {
      return "Megh\xedv\xf3 link megoszt\xe1sa";
    },
    get$none() {
      return "Nincs";
    },
    get$noPasswordRecoveryDescription() {
      return "M\xe9g nem adott meg semmilyen m\xf3dszert a jelszava vissza\xe1ll\xedt\xe1s\xe1ra.";
    },
    get$noPermission() {
      return "Nincs enged\xe9ly";
    },
    get$noRoomsFound() {
      return "Nem tal\xe1lhat\xf3ak szob\xe1k\u2026";
    },
    get$notifications() {
      return "\xc9rtes\xedt\xe9sek";
    },
    get$obtainingLocation() {
      return "Tart\xf3zkod\xe1si hely lek\xe9r\xe9se\u2026";
    },
    get$offensive() {
      return "S\xe9rt\u0151";
    },
    get$ok() {
      return "Ok";
    },
    get$oopsSomethingWentWrong() {
      return "Hopp\xe1, valami hiba l\xe9pett fel\u2026";
    },
    get$oneClientLoggedOut() {
      return "Az egyik kliense kijelentkezett";
    },
    get$openInMaps() {
      return "Megnyit\xe1s t\xe9rk\xe9pen";
    },
    get$link() {
      return "Hivatkoz\xe1s";
    },
    get$serverRequiresEmail() {
      return "Ehhez a szerverhez sz\xfcks\xe9ges az email c\xedm\xe9nek visszaigazol\xe1sa.";
    },
    get$or() {
      return "Vagy";
    },
    get$participant() {
      return "R\xe9sztvev\u0151";
    },
    get$passphraseOrKey() {
      return "jelmondat vagy vissza\xe1ll\xedt\xe1si kulcs";
    },
    get$password(_) {
      return "Jelsz\xf3";
    },
    get$passwordForgotten() {
      return "Elfelejtett jelsz\xf3";
    },
    get$passwordHasBeenChanged() {
      return "A jelsz\xf3 m\xf3dos\xedt\xe1sra ker\xfclt";
    },
    get$overview() {
      return "\xc1ttekint\xe9s";
    },
    get$passwordRecoverySettings() {
      return "Jelsz\xf3-helyre\xe1ll\xedt\xe1si be\xe1ll\xedt\xe1sok";
    },
    get$passwordRecovery() {
      return "Jelsz\xf3 vissza\xe1ll\xedt\xe1s";
    },
    get$pickImage() {
      return "K\xe9p v\xe1laszt\xe1sa";
    },
    get$pin() {
      return "R\xf6gz\xedt\xe9s";
    },
    get$pleaseChoose() {
      return "K\xe9rem, v\xe1lasszon";
    },
    get$pleaseEnterYourPassword() {
      return "K\xe9rem, adja meg jelszav\xe1t";
    },
    get$pleaseEnterYourPin() {
      return "K\xe9rem, \xedrja be PIN k\xf3dj\xe1t";
    },
    get$pleaseEnterYourUsername() {
      return "K\xe9rem, adja meg a felhaszn\xe1l\xf3nev\xe9t";
    },
    get$pleaseFollowInstructionsOnWeb() {
      return "K\xe9rem, k\xf6vesse az instrukci\xf3kat az oldalon, \xe9s nyomjon a tov\xe1bb gombra.";
    },
    get$privacy() {
      return "Adatv\xe9delem";
    },
    get$reason(_) {
      return "Indok";
    },
    redactedBy$1(username) {
      return username + " \xe1ltal szerkesztve";
    },
    get$directChat() {
      return "Priv\xe1t cseveg\xe9s";
    },
    redactedByBecause$2(username, reason) {
      return username + ' \xe1ltal szerkesztve, mivel: "' + reason + '"';
    },
    redactedAnEvent$1(username) {
      return username + " szerkesztett egy esem\xe9nyt";
    },
    get$redactMessage() {
      return "\xdczenet szerkeszt\xe9se";
    },
    get$reject() {
      return "Elutas\xedt";
    },
    rejectedTheInvitation$1(username) {
      return username + " elutas\xedtotta a megh\xedv\xe1st";
    },
    get$removeAllOtherDevices() {
      return "Minden m\xe1s eszk\xf6z elt\xe1vol\xedt\xe1sa";
    },
    get$unbanFromChat() {
      return "Cseveg\xe9s kitilt\xe1s felold\xe1sa";
    },
    get$removeYourAvatar() {
      return "Profilk\xe9p\xe9nek t\xf6rl\xe9se";
    },
    get$replaceRoomWithNewerVersion() {
      return "Szoba cser\xe9l\xe9se egy \xfajabb verzi\xf3ra";
    },
    get$reply(_) {
      return "V\xe1lasz";
    },
    get$reportMessage() {
      return "\xdczenet jelent\xe9se";
    },
    get$roomHasBeenUpgraded() {
      return "A szoba friss\xedt\xe9sre ker\xfclt";
    },
    get$search(_) {
      return "Keres\xe9s";
    },
    get$security() {
      return "Biztons\xe1g";
    },
    get$send(_) {
      return "K\xfcld\xe9s";
    },
    get$sendAMessage() {
      return "\xdczenet k\xfcld\xe9se";
    },
    get$sendAudio() {
      return "Hang\xfczenet k\xfcld\xe9se";
    },
    get$sendFile() {
      return "F\xe1jl k\xfcld\xe9se";
    },
    get$sendImage() {
      return "K\xe9p k\xfcld\xe9se";
    },
    sendImages$1(count) {
      return "" + count + " k\xe9p k\xfcld\xe9se";
    },
    get$sendMessages() {
      return "\xdczenetek k\xfcld\xe9se";
    },
    get$sendVideo() {
      return "Vide\xf3 k\xfcld\xe9se";
    },
    sentAFile$1(username) {
      return "\ud83d\udcc1 " + username + " k\xfcld\xf6tt egy f\xe1jlt";
    },
    sentAnAudio$1(username) {
      return "\ud83c\udfa4 " + username + " hang\xfczenetet k\xfcld\xf6tt";
    },
    sentAPicture$1(username) {
      return "\ud83d\uddbc\ufe0f " + username + " k\xe9pet k\xfcld\xf6tt";
    },
    sentASticker$1(username) {
      return "\ud83d\ude0a " + username + " matric\xe1t k\xfcld\xf6tt";
    },
    sentAVideo$1(username) {
      return "\ud83c\udfa5 " + username + " vide\xf3t k\xfcld\xf6tt";
    },
    sentCallInformations$1(senderName) {
      return senderName + " h\xedv\xe1sinform\xe1ci\xf3t k\xfcld\xf6tt";
    },
    get$separateChatTypes() {
      return "Csoportok \xe9s priv\xe1t \xfczenetek elk\xfcl\xf6n\xedt\xe9se";
    },
    get$setChatDescription() {
      return "Cseveg\xe9s le\xedr\xe1s be\xe1ll\xedt\xe1sa";
    },
    get$setStatus() {
      return "\xc1llapot be\xe1ll\xedt\xe1sa";
    },
    get$settings() {
      return "Be\xe1ll\xedt\xe1sok";
    },
    get$share(_) {
      return "Megoszt\xe1s";
    },
    sharedTheLocation$1(username) {
      return username + " megosztotta a poz\xedci\xf3j\xe1t";
    },
    get$shareLocation() {
      return "Poz\xedci\xf3 megoszt\xe1sa";
    },
    get$presencesToggle() {
      return "M\xe1s felhaszn\xe1l\xf3k \xe1llapot \xfczeneteinek megjelen\xedt\xe9se";
    },
    get$skip(_) {
      return "Kihagy";
    },
    get$sourceCode() {
      return "Forr\xe1sk\xf3d";
    },
    startedACall$1(senderName) {
      return senderName + " h\xedv\xe1st ind\xedtott";
    },
    get$status(_) {
      return "\xc1llapot";
    },
    get$statusExampleMessage() {
      return "Hogy \xe9rzi mag\xe1t a mai napon?";
    },
    get$submit(_) {
      return "Bek\xfcld\xe9s";
    },
    get$synchronizingPleaseWait() {
      return "Szinkroniz\xe1l\xe1s... K\xe9rem, v\xe1rjon.";
    },
    synchronizingPleaseWaitCounter$1(percentage) {
      return " Szinkroniz\xe1l\xe1s\u2026 (" + percentage + "%)";
    },
    get$systemTheme() {
      return "Rendszer";
    },
    get$theyDontMatch() {
      return "Nem egyez\u0151ek";
    },
    get$theyMatch() {
      return "Egyez\u0151ek";
    },
    get$tooManyRequestsWarning() {
      return "T\xfal sok egyidej\u0171 k\xe9relem. K\xe9rem pr\xf3b\xe1lja meg k\xe9s\u0151bb!";
    },
    get$tryToSendAgain() {
      return "\xdajrak\xfcld\xe9s megpr\xf3b\xe1l\xe1sa";
    },
    get$unavailable() {
      return "Nem el\xe9rhet\u0151";
    },
    unbannedUser$2(username, targetName) {
      return username + " feloldotta " + targetName + " kitilt\xe1s\xe1t";
    },
    get$unblockDevice() {
      return "Eszk\xf6z blokkol\xe1s felold\xe1sa";
    },
    get$unknownDevice() {
      return "Ismeretlen eszk\xf6z";
    },
    get$unknownEncryptionAlgorithm() {
      return "Ismeretlen titkos\xedt\xe1si algoritmus";
    },
    unknownEvent$1(type) {
      return "Ismeretlen esem\xe9ny: '" + type + "'";
    },
    get$unpin() {
      return "R\xf6gz\xedt\xe9s megsz\xfcntet\xe9se";
    },
    userAndOthersAreTyping$2(username, count) {
      return username + " \xe9s " + count + " m\xe1sik r\xe9sztvev\u0151 g\xe9pel\u2026";
    },
    userAndUserAreTyping$2(username, username2) {
      return username + " \xe9s " + username2 + " g\xe9pel\u2026";
    },
    userIsTyping$1(username) {
      return username + " g\xe9pel\u2026";
    },
    userLeftTheChat$1(username) {
      return "\ud83d\udeaa " + username + " elhagyta a cseveg\xe9st";
    },
    get$username(_) {
      return "Felhaszn\xe1l\xf3n\xe9v";
    },
    userSentUnknownEvent$2(username, type) {
      return username + " felhaszn\xe1l\xf3 " + type + " esem\xe9nyt k\xfcld\xf6tt";
    },
    get$unverified() {
      return "Hiteles\xedtetlen";
    },
    get$verified() {
      return "Hiteles\xedtett";
    },
    get$verifyStart() {
      return "Hiteles\xedt\xe9s megkezd\xe9se";
    },
    get$verifySuccess() {
      return "Sikeres hiteles\xedt\xe9s!";
    },
    get$verifyTitle() {
      return "M\xe1sik fi\xf3k hiteles\xedt\xe9se";
    },
    get$visibleForAllParticipants() {
      return "Minden r\xe9sztvev\u0151 sz\xe1m\xe1ra l\xe1that\xf3";
    },
    get$visibleForEveryone() {
      return "B\xe1rki sz\xe1m\xe1ra l\xe1that\xf3";
    },
    get$voiceMessage() {
      return "Hang\xfczenet";
    },
    get$waitingPartnerAcceptRequest() {
      return "V\xe1rakoz\xe1s a partnerre, hogy elfogadja a k\xe9r\xe9st\u2026";
    },
    get$waitingPartnerEmoji() {
      return "V\xe1rakoz\xe1s a partnerre, hogy elfogadja a hangulatjelet\u2026";
    },
    get$waitingPartnerNumbers() {
      return "V\xe1rakoz\xe1s a partnerre, hogy elfogadja a sz\xe1mokat\u2026";
    },
    get$warning() {
      return "Figyelem!";
    },
    get$weSentYouAnEmail() {
      return "K\xfcldt\xfcnk \xd6nnek egy emailt";
    },
    get$whyDoYouWantToReportThis() {
      return "Mi\xe9rt k\xedv\xe1nja ezt bejelenteni?";
    },
    get$withTheseAddressesRecoveryDescription() {
      return "Ezekkel a c\xedmekkel vissza tudja \xe1ll\xedtani a jelszav\xe1t.";
    },
    get$writeAMessage() {
      return "\xcdrjon egy \xfczenetet\u2026";
    },
    get$yes() {
      return "Igen";
    },
    get$you() {
      return "\xd6n";
    },
    get$youAreNoLongerParticipatingInThisChat() {
      return "Imm\xe1ron nem vesz r\xe9szt ebben a cseveg\xe9sben";
    },
    get$youHaveBeenBannedFromThisChat() {
      return "Kitiltott\xe1k ebb\u0151l a cseveg\xe9sb\u0151l";
    },
    get$yourPublicKey() {
      return "A publikus kulcsa";
    },
    get$messageInfo() {
      return "\xdczenet inform\xe1ci\xf3";
    },
    get$time(_) {
      return "Id\u0151";
    },
    get$sender() {
      return "K\xfcld\u0151";
    },
    get$openGallery() {
      return "Gal\xe9ria megnyit\xe1sa";
    },
    get$start(_) {
      return "Kezd\xe9s";
    },
    get$markAsRead() {
      return "Olvasottk\xe9nt megjel\xf6l\xe9s";
    },
    reactedWith$2(sender, reaction) {
      return sender + " a k\xf6vetkez\u0151k\xe9pp reag\xe1lt: " + reaction;
    },
    get$pinMessage() {
      return "Kit\u0171z\xe9s a szob\xe1ban";
    },
    get$emojis() {
      return "Hangulatjelek";
    },
    get$youRejectedTheInvitation() {
      return "Visszautas\xedtotta a megh\xedv\xe1st";
    },
    get$youJoinedTheChat() {
      return "Becsatlakozott a cseveg\xe9sbe";
    },
    get$youAcceptedTheInvitation() {
      return "\ud83d\udc4d Elfogadta a megh\xedv\xe1st";
    },
    youBannedUser$1(user) {
      return "Letitotta " + user + " felhaszn\xe1l\xf3t";
    },
    youHaveWithdrawnTheInvitationFor$1(user) {
      return "Visszavonta " + user + " megh\xedv\xe1s\xe1t";
    },
    youInvitedBy$1(user) {
      return "\ud83d\udce9 " + user + " j\xf3volt\xe1b\xf3l kapott megh\xedv\xe1st";
    },
    youInvitedUser$1(user) {
      return "\ud83d\udce9 Megh\xedvta " + user + "-t";
    },
    youKicked$1(user) {
      return "\ud83d\udc5e Kir\xfagta " + user + "-t";
    },
    youUnbannedUser$1(user) {
      return "Levette a letilt\xe1st " + user + "-r\u0151l";
    },
    hasKnocked$1(user) {
      return "\ud83d\udeaa " + user + " bekopogott";
    },
    get$users() {
      return "Felhaszn\xe1l\xf3k";
    },
    countFiles$1(count) {
      return "" + count + " f\xe1jl";
    },
    get$user() {
      return "Felhaszn\xe1l\xf3";
    },
    get$custom() {
      return "Egyedi";
    },
    get$noKeyForThisMessage() {
      return "Akkor fordulhat el\u0151, ha az \xfczenet az eszk\xf6zre val\xf3 bejelentkez\xe9s el\u0151tt ker\xfclt k\xfcld\xe9sre.\n\nAz is elk\xe9pzelhet\u0151, hogy a k\xfcld\u0151 blokkolta az eszk\xf6z\xe9t, vagy valami probl\xe9ma l\xe9pett fel az internet kapcsolatban.\n\nM\xe1s helyen l\xe1tja az \xfczenetet? Akkor \xe1t tudja m\xe1solni ide is! Menjen a Be\xe1ll\xedt\xe1sok > Eszk\xf6z\xf6k r\xe9szbe, \xe9s gy\u0151z\u0151dj\xf6n meg r\xf3la, hogy az eszk\xf6zei meger\u0151s\xedtett\xe9k egym\xe1st. Legk\xf6zelebb amikor ezt a szob\xe1t megnyitja, \xe9s mind a k\xe9t kliens az el\u0151t\xe9rben van, akkor szikroniz\xe1l\xf3dni fognak.\n\nNem akarja elvesz\xedteni a kulcsokat amikor kijelentkezik, vagy eszk\xf6zt cser\xe9l? Gy\u0151z\u0151dj\xf6n meg r\xf3la, hogy bekapcsolta a chat ment\xe9st a be\xe1ll\xedt\xe1sokban.";
    },
    wasDirectChatDisplayName$1(oldDisplayName) {
      return "\xdcres cseveg\xe9s (kor\xe1bban " + oldDisplayName + ")";
    },
    get$reopenChat() {
      return "Cseveg\xe9s \xfajranyit\xe1sa";
    },
    get$noOtherDevicesFound() {
      return "Nem tal\xe1lhat\xf3 m\xe1s eszk\xf6z";
    },
    fileIsTooBigForServer$1(max) {
      return "Nem k\xfcldhet\u0151 el! A szerver csak " + max + " hat\xe1rig enged csatolm\xe1nyokat.";
    },
    get$jumpToLastReadMessage() {
      return "Az utolj\xe1ra olvasott \xfczenethez ugr\xe1s";
    },
    get$readUpToHere() {
      return "Olvas\xe1s id\xe1ig";
    },
    get$jump() {
      return "Ugr\xe1s";
    },
    get$openLinkInBrowser() {
      return "Hivatkoz\xe1s megnyit\xe1sa b\xf6ng\xe9sz\u0151ben";
    },
    get$setColorTheme() {
      return "Sz\xedn s\xe9ma be\xe1ll\xedt\xe1sa:";
    },
    get$invite() {
      return "Megh\xedv\xe1s";
    },
    get$invalidInput() {
      return "Hib\xe1s bevitel!";
    },
    wrongPinEntered$1(seconds) {
      return "Hib\xe1s pink\xf3dot adott meg! Pr\xf3b\xe1lja \xfajra " + seconds + " mp m\xfalva...";
    },
    get$pleaseEnterANumber() {
      return "Adjon meg egy 0-n\xe1l nagyobb sz\xe1mot";
    },
    get$removeDevicesDescription() {
      return "Ki fog jelentkezni a k\xe9sz\xfcl\xe9kr\u0151l, \xe9s t\xf6bb\xe9 nem fog tudni fogadni \xfczeneteket.";
    },
    get$banUserDescription() {
      return "A felhaszn\xe1l\xf3 kitilt\xe1sra ker\xfcl a cseveg\xe9sb\u0151l, \xe9s nem fog tudni visszaj\xf6nni eg\xe9szen a kitilt\xe1s felold\xe1s\xe1ig.";
    },
    get$unbanUserDescription() {
      return "A felhaszn\xe1l\xf3 vissza tud j\xf6nni a cseveg\xe9sbe ha akar.";
    },
    get$kickUserDescription() {
      return "A felhaszn\xe1l\xf3 kir\xfag\xe1sra ker\xfclt a cseveg\xe9sb\u0151l, de nincs kitiltva. Publikus cseveg\xe9s eset\xe9n a felhaszn\xe1l\xf3 b\xe1rmikor visszat\xe9rhet.";
    },
    get$makeAdminDescription() {
      return "Miut\xe1n a felhaszn\xe1l\xf3t aminisztr\xe1torr\xe1 l\xe9pteti el\u0151, nem fogja tudni visszavonni d\xf6nt\xe9s\xe9t, mivel azonos jogosults\xe1gi szinttel fognak rendelkezni.";
    },
    get$yourGlobalUserIdIs() {
      return "A glob\xe1lis felhaszn\xe1l\xf3-ID-je: ";
    },
    noUsersFoundWithQuery$1(query) {
      return '"' + query + '"-vel nem tal\xe1lhat\xf3 felhaszn\xe1l\xf3. Ellen\u0151rizze nincs e el\xedr\xe1s.';
    },
    get$knocking() {
      return "Bekopog\xe1s";
    },
    get$nothingFound() {
      return "Nincs tal\xe1lat...";
    },
    get$groupName() {
      return "Csoport n\xe9v";
    },
    get$wrongRecoveryKey() {
      return "Sajnos, \xfagy t\u0171nik hib\xe1san adta meg a vissza\xe1ll\xedt\xe1si kulcsot.";
    },
    get$startConversation() {
      return "T\xe1rsalg\xe1s kezd\xe9se";
    },
    get$commandHint_sendraw() {
      return "Tiszta json k\xfcld\xe9se";
    },
    get$leaveEmptyToClearStatus() {
      return "Hagyja \xfcresen a st\xe1tusz kit\xf6rl\xe9s\xe9hez.";
    },
    get$searchForUsers() {
      return "Keressen @felhaszn\xe1l\xf3kat...";
    },
    get$pleaseEnterYourCurrentPassword() {
      return "K\xe9rem adja meg jelenlegi jelszav\xe1t";
    },
    get$newPassword() {
      return "\xdaj jelsz\xf3";
    },
    get$pleaseChooseAStrongPassword() {
      return "K\xe9rem v\xe1lasszon egy er\u0151s jelsz\xf3t";
    },
    get$passwordsDoNotMatch() {
      return "A jelszavak nem egyeznek";
    },
    get$passwordIsWrong() {
      return "Hib\xe1s a be\xedrt jelszava";
    },
    get$decline() {
      return "Elutas\xedt\xe1s";
    },
    get$thisDevice() {
      return "Ez az eszk\xf6z:";
    },
    get$initAppError() {
      return "Hiba l\xe9pett fel az app ind\xedt\xe1sa sor\xe1n";
    },
    searchIn$1(chat) {
      return 'Keres\xe9s a "' + chat + '" cseveg\xe9sben...';
    },
    get$searchMore() {
      return "Tov\xe1bbi keres\xe9s...";
    },
    get$gallery() {
      return "Gal\xe9ria";
    },
    get$files(_) {
      return "F\xe1jlok";
    },
    sessionLostBody$2(url, error) {
      return "A munkamenete elvesz\u0151d\xf6tt. K\xe9rem jelentse ezt a fejleszt\u0151knek a " + url + " c\xedmen. A hiba sz\xf6vege a k\xf6vetkez\u0151: " + error;
    },
    restoreSessionBody$2(url, error) {
      return "Megpr\xf3b\xe1lkozunk vissza\xe1ll\xedtani a munkamenet\xe9t egy kor\xe1bbi ment\xe9sb\u0151l. K\xe9rem jelezze a hib\xe1t a fejleszt\u0151knek a " + url + " c\xedmen. A hiba sz\xf6vege a k\xf6vetkez\u0151: " + error;
    },
    get$sendReadReceipts() {
      return "Olvas\xe1si igazol\xe1s k\xfcld\xe9se";
    },
    get$sendTypingNotificationsDescription() {
      return "A cseveg\xe9s t\xf6bbi tagja l\xe1tja amikor g\xe9pel.";
    },
    get$sendReadReceiptsDescription() {
      return "A cseveg\xe9s t\xf6bbi tagja l\xe1thatja, ha olvasta az \xfczeneteiket.";
    },
    get$verifyOtherDevice() {
      return "\ud83d\udd10 M\xe1s eszk\xf6z hiteles\xedt\xe9se";
    },
    get$verifyOtherDeviceDescription() {
      return "Amikor egy m\xe1sik eszk\xf6zt hiteles\xedt, az eszk\xf6z\xf6k kulcsokat cser\xe9lnek egym\xe1s k\xf6z\xf6tt, ez\xe1ltal n\xf6velve az \xf6sszbiztons\xe1got. \ud83d\udcaa Amikor megkezd\u0151dik a folyamat, mind a k\xe9t eszk\xf6z\xf6n megjelenik egy felugr\xf3 \xfczenet. Hangulatjelek \xe9s sz\xe1mok sorozata fog megjelenni, amit \xf6ssze tud hasonl\xedtani a k\xe9t eszk\xf6z\xf6n. \xc9rdemes teh\xe1t mind a k\xe9t eszk\xf6zt a k\xf6zelben tartani. \ud83e\udd33";
    },
    acceptedKeyVerification$1(sender) {
      return sender + " elfogadta a kulcs meger\u0151s\xedt\xe9st";
    },
    canceledKeyVerification$1(sender) {
      return sender + " visszautas\xedtotta a kulcs meger\u0151s\xedt\xe9st";
    },
    completedKeyVerification$1(sender) {
      return sender + " befejezte a kulcs meger\u0151s\xedt\xe9st";
    },
    isReadyForKeyVerification$1(sender) {
      return sender + " k\xe9szen \xe1ll a kulcs meger\u0151s\xedt\xe9sre";
    },
    requestedKeyVerification$1(sender) {
      return sender + " kulcs meger\u0151s\xedt\xe9st k\xe9r";
    },
    startedKeyVerification$1(sender) {
      return sender + " elkezdte a kulcs meger\u0151s\xedt\xe9st";
    },
    get$stickers() {
      return "Matric\xe1k";
    },
    get$commandHint_ignore() {
      return "Adott matrix ID figyelmen k\xedv\xfcl hagy\xe1sa";
    },
    get$commandHint_unignore() {
      return "Adott matrix ID figyelembe v\xe9tele";
    },
    thereAreCountUsersBlocked$1(count) {
      return "Jelenleg " + count + " felhaszn\xe1l\xf3 van letiltva.";
    },
    get$restricted() {
      return "Korl\xe1tozott";
    },
    get$markAsUnread() {
      return "Olvasatlannak jel\xf6l\xe9s";
    },
    userLevel$1(level) {
      return "" + level + " - Felhaszn\xe1l\xf3";
    },
    moderatorLevel$1(level) {
      return "" + level + " - Moder\xe1tor";
    },
    adminLevel$1(level) {
      return "" + level + " - Adminisztr\xe1tor";
    },
    get$changeTheVisibilityOfChatHistory() {
      return "Cseveg\xe9si el\u0151zm\xe9nyek l\xe1that\xf3s\xe1g\xe1nak v\xe1ltoztat\xe1sa";
    },
    get$changeTheCanonicalRoomAlias() {
      return "Cseveg\xe9s f\u0151, nyilv\xe1nos c\xedm\xe9nek v\xe1ltoztat\xe1sa";
    },
    get$sendRoomNotifications() {
      return "@szoba \xe9rtes\xedt\xe9s k\xfcld\xe9se";
    },
    get$chatPermissionsDescription() {
      return "Adja meg milyen er\u0151ss\xe9gi szint kell egyes cseveg\xe9si m\u0171velethez. A 0, 50 \xe9s 100-as szintek \xe1ltal\xe1ban felhaszn\xe1l\xf3kat, moder\xe1torokat \xe9s adminisztr\xe1torokat jel\xf6lnek de b\xe1rmilyen szintez\xe9s lehets\xe9ges.";
    },
    updateInstalled$1(version) {
      return "\ud83c\udf89 " + version + " verzi\xf3j\xfa friss\xedt\xe9s telep\xedtve!";
    },
    get$sendCanceled() {
      return "K\xfcld\xe9s visszavonva";
    },
    get$doesNotSeemToBeAValidHomeserver() {
      return "Nem t\u0171nik kompatibilisnek a M\xe1trix-kiszolg\xe1l\xf3nak. Hib\xe1s a hivatkoz\xe1s?";
    },
    get$calculatingFileSize() {
      return "F\xe1jl m\xe9ret kalkul\xe1l\xe1sa...";
    },
    get$prepareSendingAttachment() {
      return "Felk\xe9sz\xfcl\xe9s csatolm\xe1ny k\xfcld\xe9s\xe9re...";
    },
    get$sendingAttachment() {
      return "Csatolm\xe1ny k\xfcld\xe9se...";
    },
    sendingAttachmentCountOfCount$2(index, $length) {
      return "" + index + " csatolm\xe1ny k\xfcld\xe9se " + $length + "-b\xf3l...";
    },
    serverLimitReached$1(seconds) {
      return "Szerver korl\xe1t el\xe9rve! " + seconds + " mp t\xfcrelem...";
    },
    get$noticeChatBackupDeviceVerification() {
      return "Megjegyz\xe9s: Minden eszk\xf6ze amit a cseveg\xe9s ment\xe9shez kapcsol, automatikusan hiteles\xedt\xe9sre ker\xfcl.";
    },
    get$continueText() {
      return "Folytat\xe1s";
    },
    get$blur(_) {
      return "Hom\xe1lyos\xedt:";
    },
    get$opacity(_) {
      return "\xc1tl\xe1tsz\xf3s\xe1g:";
    },
    get$setWallpaper() {
      return "H\xe1tt\xe9r be\xe1ll\xedt\xe1s";
    },
    get$noContactInformationProvided() {
      return "A szervert\u0151l nem \xe9rkezett vissza kapcsolati inform\xe1ci\xf3";
    },
    get$contactServerAdmin() {
      return "Kapcsolatfelv\xe9tel a szerver adminnal";
    },
    get$contactServerSecurity() {
      return "Kapcsolatfelv\xe9tel a szerver biztons\xe1ggal";
    },
    get$supportPage() {
      return "T\xe1mogat\xe1si oldal";
    },
    get$serverInformation() {
      return "Szerver inform\xe1ci\xf3:";
    },
    get$name(_) {
      return "N\xe9v";
    },
    get$version(_) {
      return "Verzi\xf3";
    },
    get$compress() {
      return "T\xf6m\xf6r\xedt\xe9s";
    },
    get$boldText() {
      return "F\xe9lk\xf6v\xe9r sz\xf6veg";
    },
    get$italicText() {
      return "D\u0151lt sz\xf6veg";
    },
    get$strikeThrough() {
      return "\xc1th\xfazott";
    },
    get$pleaseFillOut() {
      return "K\xe9rem t\xf6ltse ki";
    },
    get$invalidUrl() {
      return "Helytelen hivatkoz\xe1s";
    },
    get$addLink() {
      return "Hivatkoz\xe1s hozz\xe1ad\xe1sa";
    },
    get$unableToJoinChat() {
      return "Nem csatlakozhat a cseveg\xe9shez. Elk\xe9pzelhet\u0151, hogy a m\xe1sik f\xe9l m\xe1r kil\xe9pett.";
    },
    get$previous() {
      return "El\u0151z\u0151";
    },
    get$otherPartyNotLoggedIn() {
      return "A m\xe1sik f\xe9l jelenleg nincs bejelentkezve, emiatt nem fogadhat \xfczeneteket!";
    },
    get$open(_) {
      return "Megnyit\xe1s";
    },
    get$waitingForServer() {
      return "V\xe1rakoz\xe1s a szerverre...";
    },
    get$newChatRequest() {
      return "\ud83d\udce9 \xdaj cseveg\xe9s k\xe9relem";
    },
    get$contentNotificationSettings() {
      return "Tartalom \xe9rtes\xedt\xe9si be\xe1ll\xedt\xe1sok";
    },
    get$generalNotificationSettings() {
      return "\xc1tal\xe1nos \xe9rtes\xedt\xe9si be\xe1ll\xedt\xe1sok";
    },
    get$roomNotificationSettings() {
      return "Szoba \xe9rtes\xedt\xe9si be\xe1ll\xedt\xe1sok";
    },
    get$userSpecificNotificationSettings() {
      return "Felhaszn\xe1l\xf3 specifikus \xe9rtes\xedt\xe9s be\xe1ll\xedt\xe1sok";
    },
    get$otherNotificationSettings() {
      return "Egy\xe9b \xe9rtes\xedt\xe9s be\xe1ll\xedt\xe1sok";
    },
    get$notificationRuleContainsUserName() {
      return "Felhaszn\xe1l\xf3 nevet tartalmaz";
    },
    get$notificationRuleContainsUserNameDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t, ha az \xfczenet tartalmazza a nev\xe9t.";
    },
    get$notificationRuleMaster() {
      return "Minden \xe9rtes\xedt\xe9s n\xe9m\xedt\xe1sa";
    },
    get$notificationRuleMasterDescription() {
      return "Fel\xfcl\xedr minden m\xe1s szab\xe1lyt, \xe9s kikapcsolja az \xf6sszes \xe9rtes\xedt\xe9st.";
    },
    get$notificationRuleSuppressNotices() {
      return "Minden automata \xfczenetet n\xe9m\xedt";
    },
    get$notificationRuleSuppressNoticesDescription() {
      return "N\xe9m\xedt minden automata klienst\u0151l \xe9rkez\u0151 \xe9rtes\xedt\xe9st mint p\xe9ld\xe1ul botok.";
    },
    get$notificationRuleInviteForMe() {
      return "Megh\xedv\xe1s Sz\xe1momra";
    },
    get$notificationRuleInviteForMeDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t szoba megh\xedv\xe1s eset\xe9n.";
    },
    get$notificationRuleMemberEvent() {
      return "Tagi Esem\xe9ny";
    },
    get$notificationRuleMemberEventDescription() {
      return "N\xe9m\xedtja a tagi esem\xe9nyek \xe9rtes\xedt\xe9seit.";
    },
    get$notificationRuleIsUserMention() {
      return "Felhaszn\xe1l\xf3 Eml\xedt\xe9se";
    },
    get$notificationRuleIsUserMentionDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t, ha k\xf6zvetlen\xfcl eml\xedt\xe9sre ker\xfcl az \xfczenetben.";
    },
    get$notificationRuleContainsDisplayName() {
      return "Megjelen\xedtett Nevet Tartalmaz";
    },
    get$notificationRuleContainsDisplayNameDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t, ha k\xf6zvetlen\xfcl eml\xedt\xe9sre ker\xfcl a megjelen\xedtett neve az \xfczenetben.";
    },
    get$notificationRuleIsRoomMention() {
      return "Szoba Eml\xedt\xe9s";
    },
    get$notificationRuleIsRoomMentionDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t szoba eml\xedt\xe9skor.";
    },
    get$notificationRuleRoomnotif() {
      return "Szoba \xc9rtes\xedt\xe9s";
    },
    get$notificationRuleRoomnotifDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t ha az \xfczenet tartalmazza a '@szoba' eml\xedt\xe9st.";
    },
    get$notificationRuleTombstone() {
      return "S\xedrk\u0151";
    },
    get$notificationRuleTombstoneDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t a szoba deaktiv\xe1l\xe1s \xfczenetekr\u0151l.";
    },
    get$notificationRuleReaction() {
      return "Reakci\xf3";
    },
    get$notificationRuleReactionDescription() {
      return "N\xe9m\xedtja a reakci\xf3k \xe9rtes\xedt\xe9seit.";
    },
    get$notificationRuleRoomServerAcl() {
      return "Szoba Szerver ACL";
    },
    get$notificationRuleRoomServerAclDescription() {
      return "N\xe9m\xedtja a szoba szerver hozz\xe1f\xe9r\xe9si kezel\u0151 lista (ACL) \xe9rtes\xedt\xe9seket.";
    },
    get$notificationRuleSuppressEdits() {
      return "Szerkeszt\xe9sek n\xe9m\xedt\xe1sa";
    },
    get$notificationRuleSuppressEditsDescription() {
      return "N\xe9m\xedtja a szerkesztett \xfczenetek \xe9rtes\xedt\xe9seit.";
    },
    get$notificationRuleCall() {
      return "H\xedv\xe1s";
    },
    get$notificationRuleCallDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t a h\xedv\xe1sokr\xf3l.";
    },
    get$notificationRuleEncryptedRoomOneToOne() {
      return "Titkos\xedtott N\xe9gyszemk\xf6zti Szoba";
    },
    get$notificationRuleEncryptedRoomOneToOneDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t a titkos\xedtott n\xe9gyszemk\xf6zti szob\xe1kban lev\u0151 \xfczenetekr\u0151l.";
    },
    get$notificationRuleRoomOneToOne() {
      return "N\xe9gyszemk\xf6zti Szoba";
    },
    get$notificationRuleRoomOneToOneDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t a n\xe9gyszemk\xf6zti szob\xe1ban lev\u0151 \xfczenetekr\u0151l.";
    },
    get$notificationRuleMessage() {
      return "\xdczenet";
    },
    get$notificationRuleMessageDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t az \xe1ltal\xe1nos \xfczenetekr\u0151l.";
    },
    get$notificationRuleEncrypted() {
      return "Titkos\xedtott";
    },
    get$notificationRuleEncryptedDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t a titkos\xedtott szob\xe1kban lev\u0151 \xfczenetekr\u0151l.";
    },
    get$notificationRuleJitsi() {
      return "Jitsi";
    },
    get$notificationRuleJitsiDescription() {
      return "\xc9rtes\xedti a felhaszn\xe1l\xf3t a Jitsi widget esem\xe9nyekr\u0151l.";
    },
    get$notificationRuleServerAcl() {
      return "N\xe9m\xedtja a Szerver ACL Esem\xe9nyeket";
    },
    get$notificationRuleServerAclDescription() {
      return "N\xe9m\xedtja a Szerver ACL esem\xe9nyek \xe9rtes\xedt\xe9seit.";
    },
    unknownPushRule$1(rule) {
      return "'" + rule + "' egy ismeretlen push szab\xe1ly";
    },
    sentVoiceMessage$2(sender, duration) {
      return "\ud83c\udf99\ufe0f " + duration + " - " + sender;
    },
    get$deletePushRuleCanNotBeUndone() {
      return "Ha t\xf6rli ezt az \xe9rtes\xedt\xe9si be\xe1ll\xedt\xe1st, k\xe9s\u0151bb nem vonhat\xf3 vissza.";
    },
    get$more() {
      return "T\xf6bb";
    },
    get$shareKeysWith() {
      return "Kulcsok megoszt\xe1sa...";
    },
    get$shareKeysWithDescription() {
      return "Mely eszk\xf6z\xf6k tekinthet\u0151ek megb\xedzhat\xf3nak, hogy olvashass\xe1k a titkos\xedtott cseveg\xe9seket is?";
    },
    get$allDevices() {
      return "Minden eszk\xf6z";
    },
    get$crossVerifiedDevicesIfEnabled() {
      return "Kereszt-hiteles\xedtett eszk\xf6z\xf6k ha be van kapcsolva";
    },
    get$crossVerifiedDevices() {
      return "Kereszt-hiteles\xedtett eszk\xf6z\xf6k";
    },
    get$verifiedDevicesOnly() {
      return "Csak hiteles\xedtett eszk\xf6z\xf6k";
    },
    get$optionalMessage() {
      return "(V\xe1laszthat\xf3) \xfczenet...";
    },
    get$notSupportedOnThisDevice() {
      return "Nem t\xe1mogatott ezen az eszk\xf6z\xf6n";
    },
    get$enterNewChat() {
      return "Bel\xe9p\xe9s \xfaj cseveg\xe9sbe";
    },
    get$approve() {
      return "J\xf3v\xe1hagy";
    },
    get$commandHint_logout() {
      return "Logout your current device";
    },
    get$commandHint_logoutall() {
      return "Logout all active devices";
    },
    get$customReaction() {
      return "Custom reaction";
    },
    writeAMessageLangCodes$2(l1, l2) {
      return "Type in " + l1 + " or " + l2 + "...";
    },
    get$holdForInfo() {
      return "Click and hold for word info.";
    },
    get$greenFeedback() {
      return "That's what I would put!";
    },
    get$yellowFeedback() {
      return "Hm, you can try that and see if it works! To use this word, just click it again.";
    },
    get$redFeedback() {
      return "I don't think that's right...";
    },
    get$itInstructionsTitle() {
      return "I can help you translate!";
    },
    get$itInstructionsBody() {
      return "You can click and hold choices for word info.";
    },
    get$gaTooltip() {
      return "L2 use with grammar assistance";
    },
    get$taTooltip() {
      return "L2 use with translation assistance";
    },
    get$interactiveTranslatorSliderHeader() {
      return "Interactive Translator";
    },
    get$interactiveGrammarSliderHeader() {
      return "Interactive Grammar Checker";
    },
    get$waTooltip() {
      return "L2 use without assistance";
    },
    get$noIdenticalLanguages() {
      return "Please choose different base and target languages";
    },
    get$joinWithClassCode() {
      return "Join course";
    },
    get$joinWithClassCodeHint() {
      return "Enter invite code";
    },
    get$languageLevelPreA1() {
      return "True Beginner (Pre A1)";
    },
    get$languageLevelA1() {
      return "Beginner (A1)";
    },
    get$languageLevelA2() {
      return "Elementary (A2)";
    },
    get$languageLevelB1() {
      return "Intermediate (B1)";
    },
    get$languageLevelB2() {
      return "Upper Intermediate (B2)";
    },
    get$languageLevelC1() {
      return "Advanced (C1)";
    },
    get$languageLevelC2() {
      return "Mastery (C2)";
    },
    get$changeTheNameOfTheClass() {
      return "Change the name";
    },
    get$changeTheNameOfTheChat() {
      return "Change the name of the chat";
    },
    get$sorryNoResults() {
      return "Sorry, no results.";
    },
    get$ignoreInThisText() {
      return "Ignore";
    },
    needsItMessage$1(targetLanguage) {
      return "Wait, that's not " + targetLanguage + "! Do you need help translating?";
    },
    get$countryInformation() {
      return "My country";
    },
    get$targetLanguage() {
      return "Target Language";
    },
    get$updateLanguage() {
      return "My languages";
    },
    get$whatLanguageYouWantToLearn() {
      return "What language do you want to learn?";
    },
    get$whatIsYourBaseLanguage() {
      return "What is your base language?";
    },
    get$saveChanges() {
      return "Save changes";
    },
    get$publicProfileTitle() {
      return "Allow my profile to be found in search";
    },
    get$publicProfileDesc() {
      return "By turning on, you enable other users to find your profile in the global search bar and send requests to chat. At this point, you can choose to accept or deny the request.";
    },
    get$errorDisableIT() {
      return "Translation assistance is turned off.";
    },
    get$errorDisableIGC() {
      return "Grammar assistance is turned off.";
    },
    get$errorDisableLanguageAssistance() {
      return "Translation assistance and grammar assistance are turned off.";
    },
    get$errorDisableITUserDesc() {
      return "Click here to update translation assistance settings";
    },
    get$errorDisableIGCUserDesc() {
      return "Click here to update grammar assistance settings";
    },
    get$errorDisableLanguageAssistanceUserDesc() {
      return "Click here to update translation assistance and grammar assistance settings";
    },
    get$errorDisableITClassDesc() {
      return "Translation assistance is turned off for the course that this chat is in.";
    },
    get$errorDisableIGCClassDesc() {
      return "Grammar assistance is turned off for the course that this chat is in.";
    },
    get$error405Title() {
      return "Languages not set";
    },
    get$error405Desc() {
      return "Please set your languages in Main Menu > Learning Settings.";
    },
    get$termsAndConditions() {
      return "Terms and Conditions";
    },
    get$andCertifyIAmAtLeast13YearsOfAge() {
      return " and certify I am at least 16 years of age.";
    },
    get$error502504Title() {
      return "Wow, there are a lot of students online!";
    },
    get$error502504Desc() {
      return "Translation and grammar tools may be slow or unavailable while the Pangea bots catch up.";
    },
    get$error404Title() {
      return "Translation error!";
    },
    get$error404Desc() {
      return "Pangea Bot isn't sure how to translate that...";
    },
    get$errorPleaseRefresh() {
      return "We're looking into it! Please reload and try again.";
    },
    get$connectedToStaging() {
      return "Connected to Staging";
    },
    get$learningSettings() {
      return "Learning settings";
    },
    get$participants() {
      return "Participants";
    },
    get$clickMessageTitle() {
      return "Need help?";
    },
    get$clickMessageBody() {
      return "Click a message for language tools like translation, play back and more!";
    },
    get$allDone() {
      return "All done!";
    },
    get$vocab() {
      return "Vocab";
    },
    get$subscribe(_) {
      return "Subscribe";
    },
    get$getAccess() {
      return "Subscribe now!";
    },
    get$subscriptionDesc() {
      return "Messaging is free! Subscribe to unlock interactive translation, grammar checking and learning analytics.";
    },
    get$subscriptionManagement() {
      return "Subscription Management";
    },
    get$currentSubscription() {
      return "Current Subscription";
    },
    get$cancelSubscription() {
      return "Cancel your subscription";
    },
    get$selectYourPlan() {
      return "Select Your Plan";
    },
    get$subsciptionPlatformTooltip() {
      return "Please login to your original device to manage your subscription plan";
    },
    get$subscriptionManagementUnavailable() {
      return "Subscription management not available";
    },
    get$paymentMethod() {
      return "Payment Method";
    },
    get$paymentHistory() {
      return "Payment History";
    },
    get$emptyChatDownloadWarning() {
      return "Cannot download empty chat";
    },
    get$toggleImmersionMode() {
      return "Immersion Mode";
    },
    get$toggleImmersionModeDesc() {
      return "When enabled, all messages are displayed in your target language. This setting is most useful in language exchanges.";
    },
    get$itToggleDescription() {
      return "This language learning tool will identify words in your base language and help you translate them to your target language. Though rare, the AI can make translation errors.";
    },
    get$igcToggleDescription() {
      return "This language learning tool will identify common spelling, grammar and punctuation errors in your message and suggest corrections. Though rare, the AI can make correction errors.";
    },
    get$originalMessage() {
      return "Original Message";
    },
    get$sentMessage() {
      return "Sent Message";
    },
    get$useType() {
      return "Use Type";
    },
    get$notAvailable() {
      return "Not Available";
    },
    get$taAndGaTooltip() {
      return "L2 use with translation assistance and grammar assistance";
    },
    get$definitionsToolName() {
      return "Word Definitions";
    },
    get$definitionsToolDescription() {
      return "When enabled, words underlined in blue can be clicked for definitions. Click messages to access definitions.";
    },
    get$welcomeBack() {
      return "Welcome back! If you were part of the 2023-2024 pilot, please contact us for your special pilot subscription. If you are a teacher who has (or whose institution has) purchased licenses for your class, contact us for your teacher subscription.";
    },
    get$downloadTxtFile() {
      return "Download Text File";
    },
    get$downloadCSVFile() {
      return "Download CSV File";
    },
    get$promotionalSubscriptionDesc() {
      return "You currently have a lifetime promotional subscription. Message support@pangea.chat for help changing your subscription.";
    },
    originalSubscriptionPlatform$1(purchasePlatform) {
      return "Subscription purchased through " + purchasePlatform;
    },
    get$oneWeekTrial() {
      return "One Week Trial";
    },
    get$downloadXLSXFile() {
      return "Download Excel File";
    },
    get$unkDisplayName() {
      return "Unknown";
    },
    get$wwCountryDisplayName() {
      return "World Wide";
    },
    get$afCountryDisplayName() {
      return "Afghanistan";
    },
    get$axCountryDisplayName() {
      return "Aland Islands";
    },
    get$alCountryDisplayName() {
      return "Albania";
    },
    get$dzCountryDisplayName() {
      return "Algeria";
    },
    get$asCountryDisplayName() {
      return "American Samoa";
    },
    get$adCountryDisplayName() {
      return "Andorra";
    },
    get$aoCountryDisplayName() {
      return "Angola";
    },
    get$aiCountryDisplayName() {
      return "Anguilla";
    },
    get$agCountryDisplayName() {
      return "Antigua and Barbuda";
    },
    get$arCountryDisplayName() {
      return "Argentina";
    },
    get$amCountryDisplayName() {
      return "Armenia";
    },
    get$awCountryDisplayName() {
      return "Aruba";
    },
    get$acCountryDisplayName() {
      return "Ascension Island";
    },
    get$auCountryDisplayName() {
      return "Australia";
    },
    get$atCountryDisplayName() {
      return "Austria";
    },
    get$azCountryDisplayName() {
      return "Azerbaijan";
    },
    get$bsCountryDisplayName() {
      return "Bahamas";
    },
    get$bhCountryDisplayName() {
      return "Bahrain";
    },
    get$bdCountryDisplayName() {
      return "Bangladesh";
    },
    get$bbCountryDisplayName() {
      return "Barbados";
    },
    get$byCountryDisplayName() {
      return "Belarus";
    },
    get$beCountryDisplayName() {
      return "Belgium";
    },
    get$bzCountryDisplayName() {
      return "Belize";
    },
    get$bjCountryDisplayName() {
      return "Benin";
    },
    get$bmCountryDisplayName() {
      return "Bermuda";
    },
    get$btCountryDisplayName() {
      return "Bhutan";
    },
    get$boCountryDisplayName() {
      return "Bolivia";
    },
    get$baCountryDisplayName() {
      return "Bosnia and Herzegovina";
    },
    get$bwCountryDisplayName() {
      return "Botswana";
    },
    get$brCountryDisplayName() {
      return "Brazil";
    },
    get$ioCountryDisplayName() {
      return "British Indian Ocean Territory";
    },
    get$vgCountryDisplayName() {
      return "British Virgin Islands";
    },
    get$bnCountryDisplayName() {
      return "Brunei";
    },
    get$bgCountryDisplayName() {
      return "Bulgaria";
    },
    get$bfCountryDisplayName() {
      return "Burkina Faso";
    },
    get$biCountryDisplayName() {
      return "Burundi";
    },
    get$khCountryDisplayName() {
      return "Cambodia";
    },
    get$cmCountryDisplayName() {
      return "Cameroon";
    },
    get$caCountryDisplayName() {
      return "Canada";
    },
    get$cvCountryDisplayName() {
      return "Cape Verde";
    },
    get$bqCountryDisplayName() {
      return "Caribbean Netherlands";
    },
    get$kyCountryDisplayName() {
      return "Cayman Islands";
    },
    get$cfCountryDisplayName() {
      return "Central African Republic";
    },
    get$tdCountryDisplayName() {
      return "Chad";
    },
    get$clCountryDisplayName() {
      return "Chile";
    },
    get$cnCountryDisplayName() {
      return "China";
    },
    get$cxCountryDisplayName() {
      return "Christmas Island";
    },
    get$ccCountryDisplayName() {
      return "Cocos [Keeling] Islands";
    },
    get$coCountryDisplayName() {
      return "Colombia";
    },
    get$kmCountryDisplayName() {
      return "Comoros";
    },
    get$cdCountryDisplayName() {
      return "Democratic Republic Congo";
    },
    get$cgCountryDisplayName() {
      return "Republic of Congo";
    },
    get$ckCountryDisplayName() {
      return "Cook Islands";
    },
    get$crCountryDisplayName() {
      return "Costa Rica";
    },
    get$ciCountryDisplayName() {
      return "C\xf4te d'Ivoire";
    },
    get$hrCountryDisplayName() {
      return "Croatia";
    },
    get$cuCountryDisplayName() {
      return "Cuba";
    },
    get$cwCountryDisplayName() {
      return "Cura\xe7ao";
    },
    get$cyCountryDisplayName() {
      return "Cyprus";
    },
    get$czCountryDisplayName() {
      return "Czech Republic";
    },
    get$dkCountryDisplayName() {
      return "Denmark";
    },
    get$djCountryDisplayName() {
      return "Djibouti";
    },
    get$dmCountryDisplayName() {
      return "Dominica";
    },
    get$doCountryDisplayName() {
      return "Dominican Republic";
    },
    get$tlCountryDisplayName() {
      return "East Timor";
    },
    get$ecCountryDisplayName() {
      return "Ecuador";
    },
    get$egCountryDisplayName() {
      return "Egypt";
    },
    get$svCountryDisplayName() {
      return "El Salvador";
    },
    get$gqCountryDisplayName() {
      return "Equatorial Guinea";
    },
    get$erCountryDisplayName() {
      return "Eritrea";
    },
    get$eeCountryDisplayName() {
      return "Estonia";
    },
    get$szCountryDisplayName() {
      return "Eswatini";
    },
    get$etCountryDisplayName() {
      return "Ethiopia";
    },
    get$fkCountryDisplayName() {
      return "Falkland Islands";
    },
    get$foCountryDisplayName() {
      return "Faroe Islands";
    },
    get$fjCountryDisplayName() {
      return "Fiji";
    },
    get$fiCountryDisplayName() {
      return "Finland";
    },
    get$frCountryDisplayName() {
      return "France";
    },
    get$gfCountryDisplayName() {
      return "French Guiana";
    },
    get$pfCountryDisplayName() {
      return "French Polynesia";
    },
    get$gaCountryDisplayName() {
      return "Gabon";
    },
    get$gmCountryDisplayName() {
      return "Gambia";
    },
    get$geCountryDisplayName() {
      return "Georgia";
    },
    get$deCountryDisplayName() {
      return "Germany";
    },
    get$ghCountryDisplayName() {
      return "Ghana";
    },
    get$giCountryDisplayName() {
      return "Gibraltar";
    },
    get$grCountryDisplayName() {
      return "Greece";
    },
    get$glCountryDisplayName() {
      return "Greenland";
    },
    get$gdCountryDisplayName() {
      return "Grenada";
    },
    get$gpCountryDisplayName() {
      return "Guadeloupe";
    },
    get$guCountryDisplayName() {
      return "Guam";
    },
    get$gtCountryDisplayName() {
      return "Guatemala";
    },
    get$ggCountryDisplayName() {
      return "Guernsey";
    },
    get$gnCountryDisplayName() {
      return "Guinea Conakry";
    },
    get$gwCountryDisplayName() {
      return "Guinea-Bissau";
    },
    get$gyCountryDisplayName() {
      return "Guyana";
    },
    get$htCountryDisplayName() {
      return "Haiti";
    },
    get$hmCountryDisplayName() {
      return "Heard Island and McDonald Islands";
    },
    get$hnCountryDisplayName() {
      return "Honduras";
    },
    get$hkCountryDisplayName() {
      return "Hong Kong";
    },
    get$huCountryDisplayName() {
      return "Hungary";
    },
    get$isCountryDisplayName() {
      return "Iceland";
    },
    get$inCountryDisplayName() {
      return "India";
    },
    get$idCountryDisplayName() {
      return "Indonesia";
    },
    get$irCountryDisplayName() {
      return "Iran";
    },
    get$iqCountryDisplayName() {
      return "Iraq";
    },
    get$ieCountryDisplayName() {
      return "Ireland";
    },
    get$imCountryDisplayName() {
      return "Isle of Man";
    },
    get$ilCountryDisplayName() {
      return "Israel";
    },
    get$itCountryDisplayName() {
      return "Italy";
    },
    get$jmCountryDisplayName() {
      return "Jamaica";
    },
    get$jpCountryDisplayName() {
      return "Japan";
    },
    get$jeCountryDisplayName() {
      return "Jersey";
    },
    get$joCountryDisplayName() {
      return "Jordan";
    },
    get$kzCountryDisplayName() {
      return "Kazakhstan";
    },
    get$keCountryDisplayName() {
      return "Kenya";
    },
    get$kiCountryDisplayName() {
      return "Kiribati";
    },
    get$xkCountryDisplayName() {
      return "Kosovo";
    },
    get$kwCountryDisplayName() {
      return "Kuwait";
    },
    get$kgCountryDisplayName() {
      return "Kyrgyzstan";
    },
    get$laCountryDisplayName() {
      return "Laos";
    },
    get$lvCountryDisplayName() {
      return "Latvia";
    },
    get$lbCountryDisplayName() {
      return "Lebanon";
    },
    get$lsCountryDisplayName() {
      return "Lesotho";
    },
    get$lrCountryDisplayName() {
      return "Liberia";
    },
    get$lyCountryDisplayName() {
      return "Libya";
    },
    get$liCountryDisplayName() {
      return "Liechtenstein";
    },
    get$ltCountryDisplayName() {
      return "Lithuania";
    },
    get$luCountryDisplayName() {
      return "Luxembourg";
    },
    get$moCountryDisplayName() {
      return "Macau";
    },
    get$mkCountryDisplayName() {
      return "Macedonia";
    },
    get$mgCountryDisplayName() {
      return "Madagascar";
    },
    get$mwCountryDisplayName() {
      return "Malawi";
    },
    get$myCountryDisplayName() {
      return "Malaysia";
    },
    get$mvCountryDisplayName() {
      return "Maldives";
    },
    get$mlCountryDisplayName() {
      return "Mali";
    },
    get$mtCountryDisplayName() {
      return "Malta";
    },
    get$mhCountryDisplayName() {
      return "Marshall Islands";
    },
    get$mqCountryDisplayName() {
      return "Martinique";
    },
    get$mrCountryDisplayName() {
      return "Mauritania";
    },
    get$muCountryDisplayName() {
      return "Mauritius";
    },
    get$ytCountryDisplayName() {
      return "Mayotte";
    },
    get$mxCountryDisplayName() {
      return "Mexico";
    },
    get$fmCountryDisplayName() {
      return "Micronesia";
    },
    get$mdCountryDisplayName() {
      return "Moldova";
    },
    get$mcCountryDisplayName() {
      return "Monaco";
    },
    get$mnCountryDisplayName() {
      return "Mongolia";
    },
    get$meCountryDisplayName() {
      return "Montenegro";
    },
    get$msCountryDisplayName() {
      return "Montserrat";
    },
    get$maCountryDisplayName() {
      return "Morocco";
    },
    get$mzCountryDisplayName() {
      return "Mozambique";
    },
    get$mmCountryDisplayName() {
      return "Myanmar (Burma)";
    },
    get$naCountryDisplayName() {
      return "Namibia";
    },
    get$nrCountryDisplayName() {
      return "Nauru";
    },
    get$npCountryDisplayName() {
      return "Nepal";
    },
    get$nlCountryDisplayName() {
      return "Netherlands";
    },
    get$ncCountryDisplayName() {
      return "New Caledonia";
    },
    get$nzCountryDisplayName() {
      return "New Zealand";
    },
    get$niCountryDisplayName() {
      return "Nicaragua";
    },
    get$neCountryDisplayName() {
      return "Niger";
    },
    get$ngCountryDisplayName() {
      return "Nigeria";
    },
    get$nuCountryDisplayName() {
      return "Niue";
    },
    get$nfCountryDisplayName() {
      return "Norfolk Island";
    },
    get$kpCountryDisplayName() {
      return "North Korea";
    },
    get$mpCountryDisplayName() {
      return "Northern Mariana Islands";
    },
    get$noCountryDisplayName() {
      return "Norway";
    },
    get$omCountryDisplayName() {
      return "Oman";
    },
    get$pkCountryDisplayName() {
      return "Pakistan";
    },
    get$pwCountryDisplayName() {
      return "Palau";
    },
    get$psCountryDisplayName() {
      return "Palestinian Territories";
    },
    get$paCountryDisplayName() {
      return "Panama";
    },
    get$pgCountryDisplayName() {
      return "Papua New Guinea";
    },
    get$pyCountryDisplayName() {
      return "Paraguay";
    },
    get$peCountryDisplayName() {
      return "Peru";
    },
    get$phCountryDisplayName() {
      return "Philippines";
    },
    get$plCountryDisplayName() {
      return "Poland";
    },
    get$ptCountryDisplayName() {
      return "Portugal";
    },
    get$prCountryDisplayName() {
      return "Puerto Rico";
    },
    get$qaCountryDisplayName() {
      return "Qatar";
    },
    get$reCountryDisplayName() {
      return "R\xe9union";
    },
    get$roCountryDisplayName() {
      return "Romania";
    },
    get$ruCountryDisplayName() {
      return "Russia";
    },
    get$rwCountryDisplayName() {
      return "Rwanda";
    },
    get$blCountryDisplayName() {
      return "Saint Barth\xe9lemy";
    },
    get$shCountryDisplayName() {
      return "Saint Helena";
    },
    get$knCountryDisplayName() {
      return "St. Kitts";
    },
    get$lcCountryDisplayName() {
      return "St. Lucia";
    },
    get$mfCountryDisplayName() {
      return "Saint Martin";
    },
    get$pmCountryDisplayName() {
      return "Saint Pierre and Miquelon";
    },
    get$vcCountryDisplayName() {
      return "St. Vincent";
    },
    get$wsCountryDisplayName() {
      return "Samoa";
    },
    get$smCountryDisplayName() {
      return "San Marino";
    },
    get$stCountryDisplayName() {
      return "S\xe3o Tom\xe9 and Pr\xedncipe";
    },
    get$saCountryDisplayName() {
      return "Saudi Arabia";
    },
    get$snCountryDisplayName() {
      return "Senegal";
    },
    get$rsCountryDisplayName() {
      return "Serbia";
    },
    get$scCountryDisplayName() {
      return "Seychelles";
    },
    get$slCountryDisplayName() {
      return "Sierra Leone";
    },
    get$sgCountryDisplayName() {
      return "Singapore";
    },
    get$sxCountryDisplayName() {
      return "Sint Maarten";
    },
    get$skCountryDisplayName() {
      return "Slovakia";
    },
    get$siCountryDisplayName() {
      return "Slovenia";
    },
    get$sbCountryDisplayName() {
      return "Solomon Islands";
    },
    get$soCountryDisplayName() {
      return "Somalia";
    },
    get$zaCountryDisplayName() {
      return "South Africa";
    },
    get$gsCountryDisplayName() {
      return "South Georgia and the South Sandwich Islands";
    },
    get$krCountryDisplayName() {
      return "South Korea";
    },
    get$ssCountryDisplayName() {
      return "South Sudan";
    },
    get$esCountryDisplayName() {
      return "Spain";
    },
    get$lkCountryDisplayName() {
      return "Sri Lanka";
    },
    get$sdCountryDisplayName() {
      return "Sudan";
    },
    get$srCountryDisplayName() {
      return "Suriname";
    },
    get$sjCountryDisplayName() {
      return "Svalbard and Jan Mayen";
    },
    get$seCountryDisplayName() {
      return "Sweden";
    },
    get$chCountryDisplayName() {
      return "Switzerland";
    },
    get$syCountryDisplayName() {
      return "Syria";
    },
    get$twCountryDisplayName() {
      return "Taiwan";
    },
    get$tjCountryDisplayName() {
      return "Tajikistan";
    },
    get$tzCountryDisplayName() {
      return "Tanzania";
    },
    get$thCountryDisplayName() {
      return "Thailand";
    },
    get$tgCountryDisplayName() {
      return "Togo";
    },
    get$tkCountryDisplayName() {
      return "Tokelau";
    },
    get$toCountryDisplayName() {
      return "Tonga";
    },
    get$ttCountryDisplayName() {
      return "Trinidad/Tobago";
    },
    get$tnCountryDisplayName() {
      return "Tunisia";
    },
    get$trCountryDisplayName() {
      return "Turkey";
    },
    get$tmCountryDisplayName() {
      return "Turkmenistan";
    },
    get$tcCountryDisplayName() {
      return "Turks and Caicos Islands";
    },
    get$tvCountryDisplayName() {
      return "Tuvalu";
    },
    get$viCountryDisplayName() {
      return "U.S. Virgin Islands";
    },
    get$ugCountryDisplayName() {
      return "Uganda";
    },
    get$uaCountryDisplayName() {
      return "Ukraine";
    },
    get$aeCountryDisplayName() {
      return "United Arab Emirates";
    },
    get$gbCountryDisplayName() {
      return "United Kingdom";
    },
    get$usCountryDisplayName() {
      return "United States";
    },
    get$uyCountryDisplayName() {
      return "Uruguay";
    },
    get$uzCountryDisplayName() {
      return "Uzbekistan";
    },
    get$vuCountryDisplayName() {
      return "Vanuatu";
    },
    get$vaCountryDisplayName() {
      return "Vatican City";
    },
    get$veCountryDisplayName() {
      return "Venezuela";
    },
    get$vnCountryDisplayName() {
      return "Vietnam";
    },
    get$wfCountryDisplayName() {
      return "Wallis and Futuna";
    },
    get$ehCountryDisplayName() {
      return "Western Sahara";
    },
    get$yeCountryDisplayName() {
      return "Yemen";
    },
    get$zmCountryDisplayName() {
      return "Zambia";
    },
    get$zwCountryDisplayName() {
      return "Zimbabwe";
    },
    get$pay() {
      return "Pay";
    },
    invitedToSpace$2(space, user) {
      return user + " has invited you to join a course: " + space + "! Do you wish to accept?";
    },
    get$youreInvited() {
      return "\ud83d\udce9 You're invited!";
    },
    invitedToChat$2($name, user) {
      return user + " has invited you to join a chat: " + $name + "! Do you wish to accept?";
    },
    get$monthlySubscription() {
      return "Monthly";
    },
    get$yearlySubscription() {
      return "Yearly";
    },
    get$defaultSubscription() {
      return "Pangea Chat Subscription";
    },
    get$freeTrial() {
      return "Free Trial";
    },
    get$noDataFound() {
      return "No data found";
    },
    get$blurMeansTranslateTitle() {
      return "Why is the message blurred?";
    },
    get$blurMeansTranslateBody() {
      return "While Immersion Mode is on, messages that are sent in your base language will be blurred while Pangea Bot translates them to your target language. Immersion Mode can be toggled in individual and course settings.";
    },
    get$bestCorrectionFeedback() {
      return "That's correct!";
    },
    get$distractorFeedback() {
      return "That's not quite right.";
    },
    get$bestAnswerFeedback() {
      return "That's correct!";
    },
    get$definitionDefaultPrompt() {
      return "What does this word mean?";
    },
    get$practiceDefaultPrompt() {
      return "What is the best answer?";
    },
    get$correctionDefaultPrompt() {
      return "What is the best replacement?";
    },
    get$definition() {
      return "Definition";
    },
    get$exampleSentence() {
      return "Example Sentence";
    },
    get$reportToTeacher() {
      return "Who do you want to report this message to?";
    },
    reportMessageTitle$3(reportingUserId, reportedUserId, roomName) {
      return reportingUserId + " has reported a message from " + reportedUserId + " in the chat " + roomName;
    },
    reportMessageBody$2(reportedMessage, reason) {
      return "Message: " + reportedMessage + "\nReason: " + reason;
    },
    get$noTeachersFound() {
      return "No teachers found to report to";
    },
    trialExpiration$1(expiration) {
      return "Your free trial expires on " + expiration;
    },
    get$freeTrialDesc() {
      return "New users recieve a one week free trial of Pangea Chat";
    },
    get$activateTrial() {
      return "Free 7-Day Trial";
    },
    get$successfullySubscribed() {
      return "You have successfully subscribed!";
    },
    get$clickToManageSubscription() {
      return "Click here to manage your subscription.";
    },
    get$signUp() {
      return "Sign up";
    },
    pleaseChooseAtLeastChars$1(min) {
      return "Please choose at least " + min + " characters.";
    },
    get$pleaseEnterValidEmail() {
      return "Please enter a valid email address.";
    },
    get$pleaseChooseAUsername() {
      return "Please choose a username";
    },
    get$listen() {
      return "Listen";
    },
    get$trialPeriodExpired() {
      return "Your trial period has expired";
    },
    get$subscribedToUnlockTools() {
      return "Subscribe to unlock interactive translation and grammar checking, audio playback, personalized practice activities, and learning analytics!";
    },
    get$translationTooltip() {
      return "Translate";
    },
    get$speechToTextTooltip() {
      return "Transcript";
    },
    get$kickBotWarning() {
      return "Kicking Pangea Bot will remove the conversation bot from this chat.";
    },
    get$refresh(_) {
      return "Refresh";
    },
    get$botConfig() {
      return "Bot and activity settings";
    },
    get$botConfigNoPermissionTitle() {
      return "No permission";
    },
    get$botConfigNoPermissionMessage() {
      return "Contact room admin to change bot configuration";
    },
    get$conversationBotStatus() {
      return "Invite bot";
    },
    get$updatePhoneOS() {
      return "You may need to update your device's OS version.";
    },
    get$autoIGCToolName() {
      return "Run Pangea writing assistance automatically";
    },
    get$autoIGCToolDescription() {
      return "Automatically run Pangea Chat grammar and translation writing assistance before sending my message.";
    },
    get$tooltipInstructionsTitle() {
      return "Not sure what that does?";
    },
    get$tooltipInstructionsBrowserBody() {
      return "Hover over items to view tooltips.";
    },
    get$chatCapacity() {
      return "Chat capacity";
    },
    get$roomFull() {
      return "This room is already at capacity.";
    },
    get$chatCapacityHasBeenChanged() {
      return "Chat capacity changed";
    },
    chatCapacitySetTooLow$1(count) {
      return "Chat capacity must be at least " + count + ".";
    },
    get$chatCapacityExplanation() {
      return "Chat capacity limits the number of members allowed in a chat.";
    },
    get$enterNumber() {
      return "Please enter a whole number value.";
    },
    get$buildTranslation() {
      return "Build your translation from the choices above";
    },
    get$practice() {
      return "Practice";
    },
    get$noLanguagesSet() {
      return "No languages set";
    },
    get$speechToTextBody() {
      return "For voice messages, you can see a transcript as well as the speaker's Words Per Minute score.";
    },
    get$versionNotFound() {
      return "Version Not Found";
    },
    get$fetchingVersion() {
      return "Fetching version...";
    },
    get$versionFetchError() {
      return "Error fetching version";
    },
    versionText$2(version, buildNumber) {
      return "Version: " + version + "+" + buildNumber;
    },
    get$l1TranslationBody() {
      return "Messages in your base language will not be translated.";
    },
    get$deleteSubscriptionWarningTitle() {
      return "You have an active subscription";
    },
    get$deleteSubscriptionWarningBody() {
      return "Deleting your account will not automatically cancel your subscription.";
    },
    get$manageSubscription() {
      return "Manage Subscription";
    },
    get$error520Title() {
      return "Please try again.";
    },
    get$error520Desc() {
      return "Sorry, we could not understand your message...";
    },
    get$level(_) {
      return "Level";
    },
    get$translationChoicesBody() {
      return "Click and hold an option for a hint.";
    },
    get$grammar() {
      return "Grammar";
    },
    get$contactHasBeenInvitedToTheChat() {
      return "Contact has been invited to the chat";
    },
    get$inviteChat() {
      return "\ud83d\udce8 Invite chat";
    },
    get$chatName() {
      return "Chat name";
    },
    get$clickTheWordAgainToDeselect() {
      return "Click the selected word to deselect it.";
    },
    get$l2SupportNa() {
      return "Not Available";
    },
    get$l2SupportAlpha() {
      return "Alpha";
    },
    get$l2SupportBeta() {
      return "Beta";
    },
    get$l2SupportFull() {
      return "Full";
    },
    get$missingVoiceTitle() {
      return "Missing voice";
    },
    get$voiceNotAvailable() {
      return "You don't have a voice installed for this language.";
    },
    get$playAudio() {
      return "Play";
    },
    get$stop(_) {
      return "Stop";
    },
    get$grammarCopyPOSsconj() {
      return "Subordinating Conjunction";
    },
    get$grammarCopyPOSnum() {
      return "Number";
    },
    get$grammarCopyPOSverb() {
      return "Verb";
    },
    get$grammarCopyPOSaffix() {
      return "Affix";
    },
    get$grammarCopyPOSpart() {
      return "Particle";
    },
    get$grammarCopyPOSadj() {
      return "Adjective";
    },
    get$grammarCopyPOScconj() {
      return "Coordinating Conjunction";
    },
    get$grammarCopyPOSpunct() {
      return "Punctuation";
    },
    get$grammarCopyPOSadv() {
      return "Adverb";
    },
    get$grammarCopyPOSaux() {
      return "Auxiliary";
    },
    get$grammarCopyPOSspace() {
      return "Space";
    },
    get$grammarCopyPOSsym() {
      return "Symbol";
    },
    get$grammarCopyPOSdet() {
      return "Determiner";
    },
    get$grammarCopyPOSpron() {
      return "Pronoun";
    },
    get$grammarCopyPOSadp() {
      return "Adposition";
    },
    get$grammarCopyPOSpropn() {
      return "Proper Noun";
    },
    get$grammarCopyPOSnoun() {
      return "Noun";
    },
    get$grammarCopyPOSintj() {
      return "Interjection";
    },
    get$grammarCopyPOSx() {
      return "Other";
    },
    get$grammarCopyGENDERfem() {
      return "Feminine";
    },
    get$grammarCopyPERSON2() {
      return "Second Person";
    },
    get$grammarCopyMOODimp() {
      return "Imperative";
    },
    get$grammarCopyPUNCTTYPEqest() {
      return "Question";
    },
    get$grammarCopyASPECTperf() {
      return "Perfect";
    },
    get$grammarCopyCASEaccnom() {
      return "Accusative, Nominative";
    },
    get$grammarCopyCASEobl() {
      return "Oblique";
    },
    get$grammarCopyVOICEact() {
      return "Active";
    },
    get$grammarCopyPUNCTTYPEbrck() {
      return "Bracket";
    },
    get$grammarCopyNOUNTYPEart() {
      return "Article";
    },
    get$grammarCopyNUMBERsing() {
      return "Singular";
    },
    get$grammarCopyGENDERmasc() {
      return "Masculine";
    },
    get$grammarCopyVERBTYPEmod() {
      return "Modal";
    },
    get$grammarCopyADVTYPEadverbial() {
      return "Adverbial";
    },
    get$grammarCopyTENSEperi() {
      return "Periphrastic";
    },
    get$grammarCopyNUMFORMdigit() {
      return "Digit";
    },
    get$grammarCopyNOUNTYPEnot_proper() {
      return "Not Proper";
    },
    get$grammarCopyNUMTYPEcard() {
      return "Cardinal";
    },
    get$grammarCopyNOUNTYPEprop() {
      return "Proper";
    },
    get$grammarCopyPUNCTTYPEdash() {
      return "Dash";
    },
    get$grammarCopyPUNCTTYPEyes() {
      return "Yes";
    },
    get$grammarCopyPUNCTTYPEsemi() {
      return "Semicolon";
    },
    get$grammarCopyPUNCTTYPEcomm() {
      return "Comma";
    },
    get$grammarCopyMOODcnd() {
      return "Conditional";
    },
    get$grammarCopyCASEacc() {
      return "Accusative";
    },
    get$grammarCopyPARTTYPEpart() {
      return "Partitive";
    },
    get$grammarCopyTENSEpast() {
      return "Past";
    },
    get$grammarCopyDEGREEsup() {
      return "Superlative";
    },
    get$grammarCopyPUNCTTYPEcolo() {
      return "Colon";
    },
    get$grammarCopyPERSON3() {
      return "Third Person";
    },
    get$grammarCopyNUMBERplur() {
      return "Plural";
    },
    get$grammarCopyPRONTYPEnpr() {
      return "Proper Noun";
    },
    get$grammarCopyPRONTYPEinterrogative() {
      return "Interrogative";
    },
    get$grammarCopyPOLITEinfm() {
      return "Informal";
    },
    get$grammarCopyADVTYPEtim() {
      return "Time";
    },
    get$grammarCopyPOLARITYneg() {
      return "Negative";
    },
    get$grammarCopyNUMTYPEtot() {
      return "Total";
    },
    get$grammarCopyADVTYPEadnomial() {
      return "Adnominal";
    },
    get$grammarCopyASPECTprog() {
      return "Progressive";
    },
    get$grammarCopyMOODsub() {
      return "Subjunctive";
    },
    get$grammarCopyVERBFORMcomplementive() {
      return "Complementive";
    },
    get$grammarCopyCASEnom() {
      return "Nominative";
    },
    get$grammarCopyTENSEfut() {
      return "Future";
    },
    get$grammarCopyCASEdat() {
      return "Dative";
    },
    get$grammarCopyTENSEpres() {
      return "Present";
    },
    get$grammarCopyGENDERneut() {
      return "Neuter";
    },
    get$grammarCopyPRONTYPErel() {
      return "Relative";
    },
    get$grammarCopyVERBFORMfinalEnding() {
      return "Final Ending";
    },
    get$grammarCopyPRONTYPEdem() {
      return "Demonstrative";
    },
    get$grammarCopyPREPCASEpre() {
      return "Prepositional";
    },
    get$grammarCopyVERBFORMfin() {
      return "Finite";
    },
    get$grammarCopyDEGREEpos() {
      return "Positive";
    },
    get$grammarCopyPUNCTTYPEquot() {
      return "Quotation";
    },
    get$grammarCopyVERBFORMger() {
      return "Gerund";
    },
    get$grammarCopyVOICEpass() {
      return "Passive";
    },
    get$grammarCopyCASEgen() {
      return "Genitive";
    },
    get$grammarCopyTENSEprs() {
      return "Present";
    },
    get$grammarCopyDEFINITEdef() {
      return "Definite";
    },
    get$grammarCopyNUMTYPEord() {
      return "Ordinal";
    },
    get$grammarCopyCASEins() {
      return "Instrumental";
    },
    get$grammarCopyVERBFORMinf() {
      return "Infinitive";
    },
    get$grammarCopyVERBFORMaux() {
      return "Auxiliary";
    },
    get$grammarCopyNUMFORMlong() {
      return "Long";
    },
    get$grammarCopyCASEloc() {
      return "Locative";
    },
    get$grammarCopyMOODind() {
      return "Indicative";
    },
    get$grammarCopyDEGREEcmp() {
      return "Comparative";
    },
    get$grammarCopyCASErelativeCase() {
      return "Relative";
    },
    get$grammarCopyPUNCTTYPEexcl() {
      return "Exclamative";
    },
    get$grammarCopyPERSON1() {
      return "First Person";
    },
    get$grammarCopyPUNCTSIDEini() {
      return "Initial";
    },
    get$grammarCopyGENDERperson() {
      return "Person";
    },
    get$grammarCopyFOREIGNyes() {
      return "Foreign";
    },
    get$grammarCopyVOICEvoice() {
      return "Voice";
    },
    get$grammarCopyVERBTYPEverbType() {
      return "Verb";
    },
    get$grammarCopyPOSSpass() {
      return "Possessive";
    },
    get$grammarCopyPREPCASEprepCase() {
      return "Prepositional";
    },
    get$grammarCopyNUMTYPEnumType() {
      return "Numeral";
    },
    get$grammarCopyNOUNTYPEnounType() {
      return "Noun";
    },
    get$grammarCopyREFLEXreflex() {
      return "Reflexive";
    },
    get$grammarCopyPRONTYPEpronType() {
      return "Pronoun";
    },
    get$grammarCopyPUNCTSIDEpunctSide() {
      return "Punctuation Side";
    },
    get$grammarCopyVERBFORMverbForm() {
      return "Verb";
    },
    get$grammarCopyGENDERgender() {
      return "Gender";
    },
    get$grammarCopyMOODmood() {
      return "Mood";
    },
    get$grammarCopyASPECTaspect() {
      return "Aspect";
    },
    get$grammarCopyPUNCTTYPEpunctType() {
      return "Punctuation";
    },
    get$grammarCopyTENSEtense() {
      return "Tense";
    },
    get$grammarCopyDEGREEdegree() {
      return "Degree";
    },
    get$grammarCopyPOLITEpolite() {
      return "Politeness";
    },
    get$grammarCopyADVTYPEadvType() {
      return "Adverb";
    },
    get$grammarCopyNUMFORMnumber() {
      return "Number";
    },
    get$grammarCopyCONJTYPEconjType() {
      return "Conjunction";
    },
    get$grammarCopyPOLARITYpolarity() {
      return "Polarity";
    },
    get$grammarCopyCASEcase() {
      return "Case";
    },
    get$grammarCopyDEFINITEdefinite() {
      return "Definiteness";
    },
    get$grammarCopyNUMFORMnumForm() {
      return "Numeral";
    },
    get$grammarCopyPRONTYPEadn() {
      return "Adnominal";
    },
    get$grammarCopyVOCvoc() {
      return "Vocative";
    },
    get$grammarCopyCMPLcmpl() {
      return "Complementizer";
    },
    get$grammarCopyADVadv() {
      return "Adverbial";
    },
    get$grammarCopyMOODjus() {
      return "Jussive";
    },
    get$grammarCopyGENDERcom() {
      return "Common";
    },
    get$grammarCopyREFLEXrflx() {
      return "Reflexive";
    },
    get$grammarCopyPARTTYPEpar() {
      return "Partitive";
    },
    get$grammarCopySPCspc() {
      return "Specific";
    },
    get$grammarCopyTENSEpqp() {
      return "Pluperfect";
    },
    get$grammarCopyREFLEXref() {
      return "Reflexive";
    },
    get$grammarCopyPUNCTTYPEnshrt() {
      return "Short";
    },
    get$grammarCopyNUMBERdual() {
      return "Dual";
    },
    get$grammarCopyNUMFORMlng() {
      return "Long";
    },
    get$grammarCopyVOICEmid() {
      return "Middle";
    },
    get$grammarCopyINTRELintRel() {
      return "Interrogative, Relative";
    },
    get$grammarCopyINTint() {
      return "Interrogative";
    },
    get$grammarCopyVOICEcaus() {
      return "Causative";
    },
    get$grammarCopyUnknown() {
      return "Unknown";
    },
    get$grammarCopyEVIDENTevident() {
      return "Evidentiality";
    },
    get$grammarCopyNUMFORMnumberPsor() {
      return "Possessor's Number";
    },
    get$grammarCopyASPECThab() {
      return "Habitual";
    },
    get$grammarCopyCASEabl() {
      return "Ablative";
    },
    get$grammarCopyCASEall() {
      return "Allative";
    },
    get$grammarCopyCASEess() {
      return "Essive";
    },
    get$grammarCopyCASEtra() {
      return "Translative";
    },
    get$grammarCopyCASEequ() {
      return "Equative";
    },
    get$grammarCopyCASEdis() {
      return "Distributive";
    },
    get$grammarCopyCASEabs() {
      return "Absolutive";
    },
    get$grammarCopyCASEerg() {
      return "Ergative";
    },
    get$grammarCopyCASEcau() {
      return "Causal";
    },
    get$grammarCopyCASEben() {
      return "Benefactive";
    },
    get$grammarCopyCASEtem() {
      return "Temporal";
    },
    get$grammarCopyCONJTYPEcoord() {
      return "Coordinating";
    },
    get$grammarCopyDEFINITEcons() {
      return "Construct State";
    },
    get$grammarCopyDEGREEabs() {
      return "Absolute Degree";
    },
    get$grammarCopyEVIDENTfh() {
      return "Factual Evidentiality";
    },
    get$grammarCopyEVIDENTnfh() {
      return "Non-factual Evidentiality";
    },
    get$grammarCopyMOODopt() {
      return "Optative";
    },
    get$grammarCopyMOODadm() {
      return "Admirative";
    },
    get$grammarCopyMOODdes() {
      return "Desiderative";
    },
    get$grammarCopyMOODnec() {
      return "Necessitative";
    },
    get$grammarCopyMOODpot() {
      return "Potential";
    },
    get$grammarCopyMOODprp() {
      return "Propositive";
    },
    get$grammarCopyMOODqot() {
      return "Quotative";
    },
    get$grammarCopyNUMFORMword() {
      return "Word Form";
    },
    get$grammarCopyNUMFORMroman() {
      return "Roman Numeral";
    },
    get$grammarCopyNUMFORMletter() {
      return "Letter Form";
    },
    get$grammarCopyNUMTYPEmult() {
      return "Multiplicative";
    },
    get$grammarCopyNUMTYPEfrac() {
      return "Fractional";
    },
    get$grammarCopyNUMTYPEsets() {
      return "Set";
    },
    get$grammarCopyNUMTYPErange() {
      return "Range";
    },
    get$grammarCopyNUMTYPEdist() {
      return "Distributive";
    },
    get$grammarCopyNUMBERtri() {
      return "Trial";
    },
    get$grammarCopyNUMBERpauc() {
      return "Paucal";
    },
    get$grammarCopyNUMBERgrpa() {
      return "Greater Paucal";
    },
    get$grammarCopyNUMBERgrpl() {
      return "Greater Plural";
    },
    get$grammarCopyNUMBERinv() {
      return "Inverse";
    },
    get$grammarCopyPERSON0() {
      return "Zero";
    },
    get$grammarCopyPERSON4() {
      return "Fourth";
    },
    get$grammarCopyPOLITEform() {
      return "Formal";
    },
    get$grammarCopyPOLITEelev() {
      return "Elevated";
    },
    get$grammarCopyPOLITEhumb() {
      return "Humble";
    },
    get$grammarCopyPRONTYPEemp() {
      return "Emphatic";
    },
    get$grammarCopyPRONTYPEexc() {
      return "Exclamative";
    },
    get$grammarCopyPRONTYPErcp() {
      return "Reciprocal";
    },
    get$grammarCopyPRONTYPEintRelPronType() {
      return "Interrogative-Relative";
    },
    get$grammarCopyTENSEaor() {
      return "Aorist";
    },
    get$grammarCopyTENSEeps() {
      return "Epistemic";
    },
    get$grammarCopyTENSEprosp() {
      return "Prospective";
    },
    get$grammarCopyVERBFORMpart() {
      return "Participle";
    },
    get$grammarCopyVERBFORMconv() {
      return "Converb";
    },
    get$grammarCopyVERBFORMvnoun() {
      return "Verbal Noun";
    },
    get$grammarCopyVOICEantip() {
      return "Antipassive";
    },
    get$grammarCopyVOICEcauVoice() {
      return "Causative";
    },
    get$grammarCopyVOICedir() {
      return "Direct";
    },
    get$grammarCopyVOICEinvVoice() {
      return "Inverse";
    },
    get$grammarCopyVOICErcpVoice() {
      return "Reciprocal";
    },
    get$grammarCopyPOS() {
      return "Part of Speech";
    },
    get$grammarCopyGENDER() {
      return "Gender";
    },
    get$grammarCopyPERSON() {
      return "Person";
    },
    get$grammarCopyMOOD() {
      return "Mood";
    },
    get$grammarCopyPUNCTTYPE() {
      return "Punctuation Type";
    },
    get$grammarCopyASPECT() {
      return "Aspect";
    },
    get$grammarCopyCASE() {
      return "Case";
    },
    get$grammarCopyVOICE() {
      return "Voice";
    },
    get$grammarCopyNOUNTYPE() {
      return "Noun Type";
    },
    get$grammarCopyVERBTYPE() {
      return "Verb Type";
    },
    get$grammarCopyADVTYPE() {
      return "Adverb Type";
    },
    get$grammarCopyNUMFORM() {
      return "Numeral Form";
    },
    get$grammarCopyNUMTYPE() {
      return "Numeral Type";
    },
    get$grammarCopyNUMBER() {
      return "Number";
    },
    get$grammarCopyDEFINITE() {
      return "Definiteness";
    },
    get$grammarCopyDEGREE() {
      return "Degree";
    },
    get$grammarCopyEVIDENT() {
      return "Evidentiality";
    },
    get$grammarCopyFOREIGN() {
      return "Foreign";
    },
    get$grammarCopyPOLARITY() {
      return "Polarity";
    },
    get$grammarCopyPOLITE() {
      return "Politeness";
    },
    get$grammarCopyPREPCASE() {
      return "Prepositional Case";
    },
    get$grammarCopyPRONTYPE() {
      return "Pronoun Type";
    },
    get$grammarCopyPUNCTSIDE() {
      return "Punctuation Side";
    },
    get$grammarCopyREFLEX() {
      return "Reflexive";
    },
    get$grammarCopyTENSE() {
      return "Tense";
    },
    get$grammarCopyVERBFORM() {
      return "Verb Form";
    },
    get$grammarCopyCONJTYPE() {
      return "Conjunction Type";
    },
    get$grammarCopyUNKNOWN() {
      return "Unknown";
    },
    get$grammarCopyNUMBERPSOR() {
      return "Possessor's Number";
    },
    get$grammarCopyPOSS() {
      return "Possessive";
    },
    get$grammarCopyASPECTimp() {
      return "Imperfective Aspect";
    },
    get$grammarCopyCASEvoc() {
      return "Vocative";
    },
    get$grammarCopyCASEcom() {
      return "Comitative";
    },
    get$grammarCopyCASEpar() {
      return "Partitive";
    },
    get$grammarCopyCASEadv() {
      return "Adverbial";
    },
    get$grammarCopyCASEref() {
      return "Referential";
    },
    get$grammarCopyCASErel() {
      return "Relative";
    },
    get$grammarCopyCASEsub() {
      return "Subessive";
    },
    get$grammarCopyCASEsup() {
      return "Superessive";
    },
    get$grammarCopyCASEaccdat() {
      return "Accusative-Dative";
    },
    get$grammarCopyCASEpre() {
      return "Prepositional";
    },
    get$grammarCopyCONJTYPEsub() {
      return "Subordinating";
    },
    get$grammarCopyCONJTYPEcmp() {
      return "Comparative";
    },
    get$grammarCopyDEFINITEind() {
      return "Indefinite";
    },
    get$grammarCopyMOODint() {
      return "Interrogative Mood";
    },
    get$grammarCopyNOUNTYPEcomm() {
      return "Common Noun";
    },
    get$grammarCopyNUMBERPSORsing() {
      return "Possessor's Singular";
    },
    get$grammarCopyNUMBERPSORplur() {
      return "Possessor's Plural";
    },
    get$grammarCopyNUMBERPSORdual() {
      return "Possessor's Dual";
    },
    get$grammarCopyPOLARITYpos() {
      return "Positive Polarity";
    },
    get$grammarCopyPOSSyes() {
      return "Possessive";
    },
    get$grammarCopyPREPCASEnpr() {
      return "Non-prepositional";
    },
    get$grammarCopyPRONTYPEprs() {
      return "Personal";
    },
    get$grammarCopyPRONTYPEint() {
      return "Interrogative";
    },
    get$grammarCopyPRONTYPEtot() {
      return "Total";
    },
    get$grammarCopyPRONTYPEneg() {
      return "Negative";
    },
    get$grammarCopyPRONTYPEart() {
      return "Article";
    },
    get$grammarCopyPRONTYPEind() {
      return "Indefinite";
    },
    get$grammarCopyPRONTYPEintrel() {
      return "Interrogative-Relative";
    },
    get$grammarCopyPUNCTSIDEfin() {
      return "Final Punctuation";
    },
    get$grammarCopyPUNCTTYPEperi() {
      return "Period";
    },
    get$grammarCopyREFLEXyes() {
      return "Reflexive";
    },
    get$grammarCopyTENSEimp() {
      return "Imperfect";
    },
    get$grammarCopyVERBFORMsup() {
      return "Supine";
    },
    get$grammarCopyVERBFORMadn() {
      return "Adnominal";
    },
    get$grammarCopyVERBFORMlng() {
      return "Long";
    },
    get$grammarCopyVERBFORMshrt() {
      return "Short";
    },
    get$grammarCopyVERBTYPEcaus() {
      return "Causative Verb";
    },
    get$grammarCopyVOICEcau() {
      return "Causative";
    },
    get$grammarCopyVOICEdir() {
      return "Direct";
    },
    get$grammarCopyVOICEinv() {
      return "Inverse";
    },
    get$grammarCopyVOICErcp() {
      return "Reciprocal";
    },
    get$enterLanguageLevel() {
      return "Please enter a language level";
    },
    get$other() {
      return "Other";
    },
    levelShort$1(level) {
      return "LVL " + level;
    },
    get$clickBestOption() {
      return "Choose the best options to translate your message!";
    },
    get$completeActivitiesToUnlock() {
      return "Complete at least one activity to unlock the translation!";
    },
    get$downloadGroupText() {
      return "Download group text";
    },
    get$notificationsOn() {
      return "Notifications on";
    },
    get$notificationsOff() {
      return "Notifications off";
    },
    get$createChatAndInviteUsers() {
      return "Create chat and invite users";
    },
    get$updatedNewSpaceDescription() {
      return "Courses allow you to consolidate your chats and build private or public communities.";
    },
    get$joinWithCode() {
      return "Join with code";
    },
    get$enterCodeToJoin() {
      return "Enter code to join";
    },
    get$updateNow() {
      return "Update Now";
    },
    get$updateLater() {
      return "Later";
    },
    get$constructUseWaDesc() {
      return "Used without help";
    },
    get$constructUseGaDesc() {
      return "Grammar assistance";
    },
    get$constructUseTaDesc() {
      return "Translation assistance";
    },
    get$constructUseUnkDesc() {
      return "Unknown";
    },
    get$constructUseCorITDesc() {
      return "Correct in translation";
    },
    get$constructUseIgnITDesc() {
      return "Ignored in translation";
    },
    get$constructUseIncITDesc() {
      return "Incorrect in translation";
    },
    get$constructUseIgnIGCDesc() {
      return "Ignored in grammar correction";
    },
    get$constructUseCorIGCDesc() {
      return "Correct in grammar correction";
    },
    get$constructUseIncIGCDesc() {
      return "Incorrect in grammar correction";
    },
    get$constructUseCorPADesc() {
      return "Correct in word meaning activity";
    },
    get$constructUseIgnPADesc() {
      return "Ignored in word meaning activity";
    },
    get$constructUseIncPADesc() {
      return "Incorrect in word meaning activity";
    },
    get$constructUseCorWLDesc() {
      return "Correct in word listening activity";
    },
    get$constructUseIncWLDesc() {
      return "Incorrect in word listening activity";
    },
    get$constructUseIngWLDesc() {
      return "Ignored in word listening activity";
    },
    get$constructUseCorHWLDesc() {
      return "Correct in hidden word activity";
    },
    get$constructUseIncHWLDesc() {
      return "Incorrect in hidden word activity";
    },
    get$constructUseIgnHWLDesc() {
      return "Ignored in hidden word activity";
    },
    get$constructUseCorLDesc() {
      return "Correct in lemma activity";
    },
    get$constructUseIncLDesc() {
      return "Incorrect in lemma activity";
    },
    get$constructUseIgnLDesc() {
      return "Ignored in lemma activity";
    },
    get$constructUseCorMDesc() {
      return "Correct in grammar activity";
    },
    get$constructUseIncMDesc() {
      return "Incorrect in grammar activity";
    },
    get$constructUseIgnMDesc() {
      return "Ignored in grammar activity";
    },
    get$constructUseEmojiDesc() {
      return "Correct in emoji activity";
    },
    get$constructUseCollected() {
      return "Collected in chat";
    },
    get$constructUseNanDesc() {
      return "Not applicable";
    },
    xpIntoLevel$2(currentXP, maxXP) {
      return "" + currentXP + " / " + maxXP + " XP";
    },
    get$enableTTSToolName() {
      return "Enabled text-to-speech";
    },
    get$enableTTSToolDescription() {
      return "Allow the app to generate text-to-speech output for portions of text in your target language.";
    },
    get$createAnAccount() {
      return "Create an account";
    },
    get$signIn() {
      return "Sign in";
    },
    get$signUpWithEmail() {
      return "Sign up with Email";
    },
    get$signUpWithGoogle() {
      return "Sign up with Google";
    },
    get$signUpWithApple() {
      return "Sign up with Apple";
    },
    get$yourUsername() {
      return "Your username";
    },
    get$yourEmail() {
      return "Your email";
    },
    get$signInWithGoogle() {
      return "Sign in with Google";
    },
    get$signInWithApple() {
      return "Sign in with Apple";
    },
    get$chooseYourAvatar() {
      return "Choose your avatar";
    },
    get$iWantToLearn() {
      return "I want to learn";
    },
    get$letsStart() {
      return "Let's start";
    },
    get$pleaseEnterEmail() {
      return "Please enter a valid email address.";
    },
    get$pleaseSelectALanguage() {
      return "Please select a language";
    },
    get$myBaseLanguage() {
      return "My base language";
    },
    get$clickWordsInstructions() {
      return "\ud83d\udd75\ufe0f Click any word for details. \ud83e\uddd0";
    },
    get$meaningSectionHeader() {
      return "Meaning:";
    },
    get$formSectionHeader() {
      return "Forms used in chats:";
    },
    get$writingExercisesTooltip() {
      return "Writing";
    },
    get$listeningExercisesTooltip() {
      return "Listening";
    },
    get$readingExercisesTooltip() {
      return "Reading";
    },
    get$meaningNotFound() {
      return "Meaning could not be found.";
    },
    get$chooseBaseForm() {
      return "Choose the base form";
    },
    get$notTheCodeError() {
      return "Sorry, that's not the code!";
    },
    get$totalXP() {
      return "Total XP";
    },
    get$numLemmas() {
      return "Total number of lemmas";
    },
    get$numLemmasUsedCorrectly() {
      return "Number of lemmas used correctly at least once";
    },
    get$numLemmasUsedIncorrectly() {
      return "Number of lemmas used correctly 0 times";
    },
    get$numLemmasSmallXP() {
      return "Number of lemmas with 0 - 30 XP";
    },
    get$numLemmasMediumXP() {
      return "Number of lemmas with 31 - 200 XP";
    },
    get$numLemmasLargeXP() {
      return "Number of lemmas with > 200 XP";
    },
    get$numGrammarConcepts() {
      return "Number of grammar concepts";
    },
    get$listGrammarConcepts() {
      return "Grammar concepts";
    },
    get$listGrammarConceptsUsedCorrectly() {
      return "Grammar concepts used correctly in original messages at least 80% of the time";
    },
    get$listGrammarConceptsUsedIncorrectly() {
      return "Grammar concepts used correctly in original messages less than 80% of the time";
    },
    get$listGrammarConceptsUseCorrectlySystemGenerated() {
      return "Grammar concepts chosen correctly from system-generated suggestions at least 80% of the time";
    },
    get$listGrammarConceptsUseIncorrectlySystemGenerated() {
      return "Grammar concepts chosen correctly from system-generated suggestions less than 80% of the time";
    },
    get$listGrammarConceptsSmallXP() {
      return "Grammar concepts with 0-50 xp";
    },
    get$listGrammarConceptsMediumXP() {
      return "Grammar concepts with 51-200 xp";
    },
    get$listGrammarConceptsLargeXP() {
      return "Grammar concepts 201-500 xp";
    },
    get$listGrammarConceptsHugeXP() {
      return "Grammar concepts >500 xp";
    },
    get$numMessagesSent() {
      return "Number of messages sent";
    },
    get$numWordsTyped() {
      return "Number of words typed in original messages";
    },
    get$numCorrectChoices() {
      return "Number of correct words chosen from system-generated suggestions";
    },
    get$numIncorrectChoices() {
      return "Number of incorrect words chosen from system-generated suggestions";
    },
    get$commaSeparatedFile() {
      return "CSV";
    },
    get$excelFile() {
      return "Excel";
    },
    get$fileType() {
      return "File type";
    },
    get$download(_) {
      return "Download";
    },
    get$analyticsNotAvailable() {
      return "User analytics not available";
    },
    get$downloading() {
      return "Downloading...";
    },
    get$failedFetchUserAnalytics() {
      return "Failed to download user analytics";
    },
    get$downloadComplete() {
      return "Download complete!";
    },
    whatIsTheMorphTag$2(morphologicalFeature, wordForm) {
      return "What is the " + morphologicalFeature + " of '" + wordForm + "'?";
    },
    get$dataAvailable() {
      return "Data availability";
    },
    get$available(_) {
      return "Available";
    },
    get$pangeaBotIsFallible() {
      return "Pangea Bot makes mistakes too!";
    },
    whatIsMeaning$2(lemma, partOfSpeech) {
      return "What does '" + lemma + "' mean?";
    },
    get$chooseLemmaMeaningInstructionsBody() {
      return "Match meanings with the words in the message!";
    },
    get$doubleClickToEdit() {
      return "Double-click to edit.";
    },
    get$languageOfInstructionsLabel() {
      return "Language of activity instructions";
    },
    get$targetLanguageLabel() {
      return "Target language";
    },
    get$cefrLevelLabel() {
      return "CEFR level";
    },
    get$activityPlannerOverviewInstructionsBody() {
      return "Choose a topic, mode, learning objective and generate an activity for the chat!";
    },
    get$constructUsePvmDesc() {
      return "Produced in voice message";
    },
    get$leaveSpaceDescription() {
      return "By leaving the course, you will leave all of the chats within it. Other users will see that you have left the course.";
    },
    get$constructUseCorMmDesc() {
      return "Correct message meaning";
    },
    get$constructUseIncMmDesc() {
      return "Incorrect message meaning";
    },
    get$constructUseIgnMmDesc() {
      return "Ignored message meaning";
    },
    get$meaning() {
      return "Meaning";
    },
    chatWith$1(displayname) {
      return "Group with " + displayname;
    },
    get$clickOnEmailLink() {
      return "Please click on the link in the email and then proceed. In rare cases, the email can be sent to spam or take up to 5 minutes to arrive.";
    },
    get$dontForgetPassword() {
      return "Don't forget your password!";
    },
    get$enableAutocorrectToolName() {
      return "Enable device autocorrect";
    },
    get$enableAutocorrectDescription() {
      return "If your device supports the language your learning, you can enable device autocorrect to fix common errors as you type.";
    },
    get$ttsDisbledTitle() {
      return "Text-to-speech disabled";
    },
    get$ttsDisabledBody() {
      return "You can enable text-to-speech in your learning settings";
    },
    get$noSpaceDescriptionYet() {
      return "No course description created yet.";
    },
    get$tooLargeToSend() {
      return "This message is too large to send";
    },
    get$exitWithoutSaving() {
      return "Are you sure you want to leave without saving?";
    },
    get$enableAutocorrectWarning() {
      return "Warning! Requires adding your target language keyboard";
    },
    get$displayName(_) {
      return "Display name";
    },
    get$leaveRoomDescription() {
      return "You're about to leave this chat. Other users will see that you have left the chat.";
    },
    get$confirmUserId() {
      return "Please confirm your Pangea Chat username in order to delete your account.";
    },
    paidSubscriptionStarts$1(startDate) {
      return "Starting " + startDate;
    },
    get$cancelInSubscriptionSettings() {
      return "\u2022 Cancel at any time in subscription settings";
    },
    get$autocorrectNotAvailable() {
      return "Unfortunately your platform is not currently supported for this feature. Stay tuned for further development!";
    },
    get$pleaseUpdateApp() {
      return "Please update the app to continue.";
    },
    get$chooseEmojiInstructionsBody() {
      return "Match emojis with the words they best represent. Don't worry! No points off for disagreeing. \ud83d\ude05";
    },
    get$analyticsVocabListBody() {
      return "This is all your vocabulary! As you earn XP for each word, they'll go from seedling to full bloom. Click on any word to see more details.";
    },
    get$morphAnalyticsListBody() {
      return "These are all the grammar concepts in the language you're learning! You'll unlock them as you encounter them while chatting. Click for details.";
    },
    get$knockSpaceSuccess() {
      return "You have requested to join this course! An admin will respond to your request when they receive it \ud83d\ude00";
    },
    get$chooseWordAudioInstructionsBody() {
      return "Listen to the complete message. Then match the audios with the words.";
    },
    get$chooseMorphsInstructionsBody() {
      return "Click the puzzle pieces for grammar questions!";
    },
    get$home() {
      return "Home";
    },
    get$join(_) {
      return "Join";
    },
    get$readingAssistanceOverviewBody() {
      return "Click the buttons below for mini-games on matching emojis, audios, word meanings, and grammar concepts. Or click on any word for details.";
    },
    get$resetInstructionTooltipsTitle() {
      return "Reset instruction tooltips";
    },
    get$resetInstructionTooltipsDesc() {
      return "Click to show instruction tooltips like for a brand new user.";
    },
    get$selectForGrammar() {
      return "Select a grammar icon for activities and details.";
    },
    get$translationProblem() {
      return "Translation problem";
    },
    get$niceJob() {
      return "Nice job!";
    },
    get$askToJoin() {
      return "Ask to join";
    },
    get$emptyChatWarningTitle() {
      return "Chat is empty";
    },
    get$emptyChatWarningDesc() {
      return "You haven't invited anyone to your chat. Go to Chat settings to invite your contacts or the Bot. You can also do this later.";
    },
    get$areYouLikeMe() {
      return "Are you like me?";
    },
    get$tryAgainLater() {
      return "Too many attempts made. Please try again in 5 minutes.";
    },
    get$enterSpaceCode() {
      return "Enter course code";
    },
    get$shareSpaceLink() {
      return "Share link";
    },
    get$byUsingPangeaChat() {
      return "By using Pangea Chat, I agree to the ";
    },
    get$details(_) {
      return "Details";
    },
    get$languageLevelPreA1Desc() {
      return "I have never learned or used the language.";
    },
    get$languageLevelA1Desc() {
      return "I can understand and use some familiar everyday expressions and very basic phrases.";
    },
    get$languageLevelA2Desc() {
      return "I can understand sentences and frequently used expressions related to areas of immediate relevance.";
    },
    get$languageLevelB1Desc() {
      return "I can deal with most familiar situations and can produce simple connected text on familiar topics.";
    },
    get$languageLevelB2Desc() {
      return "I can understand the mains ideas of complex texts and interact with a degree of fluency and spontaneity.";
    },
    get$languageLevelC1Desc() {
      return "I can express ideas fluently and spontaneously without much struggle and understand a wide range of demanding texts.";
    },
    get$languageLevelC2Desc() {
      return "I can understand virtually everything heard or read and express myself fluently and precisely.";
    },
    get$newVocab() {
      return "New vocab";
    },
    get$newGrammar() {
      return "New grammar concepts";
    },
    get$choosePracticeMode() {
      return "Click on one of the buttons above to start a practice activity";
    },
    get$ban() {
      return "Ban";
    },
    get$kick() {
      return "Kick";
    },
    get$lemma() {
      return "Lemma";
    },
    get$grammarFeature() {
      return "Grammar feature";
    },
    get$grammarTag() {
      return "Grammar tag";
    },
    get$forms() {
      return "Forms";
    },
    get$exampleMessages() {
      return "Example messages";
    },
    get$timesUsedIndependently() {
      return "Times used independently";
    },
    get$timesUsedWithAssistance() {
      return "Times used with assistance";
    },
    shareInviteCode$1(code) {
      return "Share invite code: " + code;
    },
    welcomeUser$1(user) {
      return "Welcome " + user;
    },
    get$joinSpaceOnboardingDesc() {
      return "Do you have an invite code or link to a public course?";
    },
    get$skipForNow() {
      return "Skip for now";
    },
    get$permissions(_) {
      return "Permissions";
    },
    get$spaceChildPermission() {
      return "Who can add new chats to this course";
    },
    get$addEnvironmentOverride() {
      return "Add environment override";
    },
    get$defaultOption() {
      return "Default";
    },
    get$deleteChatDesc() {
      return "Are you sure you want to delete this chat? It will be deleted for all participants and all messages within the chat will no longer be available for practice or learning analytics.";
    },
    get$deleteSpaceDesc() {
      return "The course and any selected chats will be deleted for all participants and all messages within the chat will no longer be available for practice or learning analytics. This action cannot be undone.";
    },
    get$configureSpace() {
      return "Configure course";
    },
    get$pinMessages() {
      return "Pin messages";
    },
    get$setJoinRules() {
      return "Set join rules";
    },
    get$changeGeneralSettings() {
      return "Change general settings";
    },
    get$inviteOtherUsersToRoom() {
      return "Invite other users";
    },
    get$changeTheNameOfTheSpace() {
      return "Change the name of the course";
    },
    get$changeTheDescription() {
      return "Change the description";
    },
    get$changeThePermissions() {
      return "Change the permissions";
    },
    get$introductions() {
      return "Introductions";
    },
    get$announcements() {
      return "Announcements";
    },
    get$activities() {
      return "Activities";
    },
    get$access() {
      return "Access";
    },
    get$botSettings() {
      return "Bot settings";
    },
    get$howSpaceCanBeFound() {
      return "How this course can be found";
    },
    get$$private() {
      return "Private";
    },
    get$cannotBeFoundInSearch() {
      return "Cannot be found in search";
    },
    get$$public(_) {
      return "Public";
    },
    get$visibleToCommunity() {
      return 'Visible to the broader Pangea Chat community via "Find a course"';
    },
    get$howSpaceCanBeJoined() {
      return "How this course can be joined";
    },
    get$canBeFoundVia() {
      return "Can be found via:";
    },
    get$canBeFoundViaInvitation() {
      return "\u2022 invitation";
    },
    get$canBeFoundViaCodeOrLink() {
      return "\u2022 code or link";
    },
    get$canBeFoundViaKnock() {
      return "\u2022 request to join and admin approval";
    },
    get$youHaveLeveledUp() {
      return "You have leveled up!";
    },
    get$sendActivities() {
      return "Send activities";
    },
    get$getStarted() {
      return "Get Started";
    },
    get$getStartedBotChatDesc() {
      return "Chatting with AI is a great place to start and Pangea reading, writing, listening and speaking tools make it easy!";
    },
    get$getStartedCommunitiesDesc() {
      return "Learning with a community is where Pangea Chat shines!\nYou can join your class, find a course, or even make your own!";
    },
    get$getStartedFriendsDesc() {
      return "Do you have a friend that wants to learn with you?";
    },
    get$getStartedBotChatComplete() {
      return "Well-done! You're chatting with the bot!";
    },
    get$getStartedCommunitiesComplete() {
      return "Great, you have joined a course!";
    },
    get$getStartedComplete() {
      return "You've completed this section!\nKeep exploring our amazing features by chatting with friends!";
    },
    get$getStartedFriendsComplete() {
      return "Woohoo! You've got friends! \ud83d\ude09";
    },
    get$getStartedBotChatButton() {
      return "Start chatting!";
    },
    get$getStartedFriendsButton() {
      return "Chat with a friend";
    },
    get$directMessage() {
      return "Direct Message";
    },
    get$newDirectMessage() {
      return "New direct message";
    },
    get$speakingExercisesTooltip() {
      return "Speaking";
    },
    get$noChatsFoundHereYet() {
      return "No chats found here yet";
    },
    get$transcriptionFailed() {
      return "Failed to transcribe audio";
    },
    get$aUserIsKnocking() {
      return "1 user is requesting to join your course";
    },
    usersAreKnocking$1(users) {
      return "" + users + " users are requesting to join your course";
    },
    get$failedToFetchTranscription() {
      return "Failed to fetch transcription";
    },
    get$deleteEmptySpaceDesc() {
      return "The course will be deleted for all participants. This action cannot be undone.";
    },
    get$failedToPlayVideo() {
      return "Failed to play video";
    },
    get$done() {
      return "Done";
    },
    get$inThisSpace() {
      return "In this course";
    },
    get$myContacts() {
      return "My contacts";
    },
    get$inviteAllInSpace() {
      return "Invite all in this course";
    },
    get$spaceParticipantsHaveBeenInvitedToTheChat() {
      return "All course participants has been invited to the chat";
    },
    numKnocking$1(count) {
      return "" + count + " knocking";
    },
    numInvited$1(count) {
      return "" + count + " invited";
    },
    get$errorFetchingDefinition() {
      return "Failed to fetch definition";
    },
    get$errorProcessAnalytics() {
      return "Failed to process analytics";
    },
    get$errorDownloading() {
      return "Download failed";
    },
    get$errorFetchingLevelSummary() {
      return "Failed to fetch level summary";
    },
    get$errorLoadingSpaceChildren() {
      return "Failed to load chats within this course";
    },
    get$unexpectedError() {
      return "Unexpected error.";
    },
    get$pleaseReload() {
      return "Please reload and try again.";
    },
    get$translationError() {
      return "Translation error";
    },
    get$errorFetchingTranslation() {
      return "Failed to fetch translation";
    },
    get$errorFetchingActivity() {
      return "Failed to fetch activity";
    },
    get$check(_) {
      return "Check";
    },
    get$unableToFindRoom() {
      return "No chat or course found with that code. Please try again.";
    },
    get$numCompletedActivities() {
      return "Number of completed activities";
    },
    viewingAnalytics$2(visible, users) {
      return "Viewing " + visible + "/" + users + " Analytics";
    },
    get$request(_) {
      return "Request";
    },
    get$requestAll(_) {
      return "Request All";
    },
    get$confirmMessageUnpin() {
      return "Are you sure you want to unpin this message?";
    },
    get$pending(_) {
      return "Pending";
    },
    get$openRoleLabel() {
      return "OPEN";
    },
    joinedTheActivity$2(username, role) {
      return "\ud83d\udc4b " + username + " joined as " + role;
    },
    finishedTheActivity$1(username) {
      return "\ud83c\udfaf " + username + " wrapped up this activity";
    },
    get$endActivityTitle() {
      return "I'm done";
    },
    get$activitySummaryError() {
      return "Activity summaries unavailable";
    },
    get$requestSummaries() {
      return "Request summaries";
    },
    get$requestAccessTitle() {
      return "Request to analytics view access?";
    },
    get$requestAccessDesc() {
      return "Would you like to request access to view participant analytics?\n\nIf participants agree, admins of this course will be able to view their:\n    \u2022 total vocabulary\n    \u2022 total grammar concepts\n    \u2022 total activity sessions completed\n    \u2022 the specific grammar concepts used, correctly and incorrectly\n\nThey will not be able to view their:\n    \u2022 messages in chats outside the course\n    \u2022 vocabulary list";
    },
    get$analyticsInactiveTitle() {
      return "Requests to inactive users couldn\u2019t be sent";
    },
    get$analyticsInactiveDesc() {
      return "Inactive users who haven't logged in since this feature was introduced won't see your request.\n\nThe Request button will appear once they return. You can resend the request later by clicking the Request button under their name when it's available.";
    },
    get$accessRequestedTitle() {
      return "Analytics Access Request";
    },
    accessRequestedDesc$1(space) {
      return "The administrators of \u201c" + space + "\u201d are requesting to view your learning analytics.\n\nIf you agree, admins of this course will be able to view your:\n    \u2022 total vocabulary\n    \u2022 total grammar concepts\n    \u2022 total activity sessions completed\n    \u2022 the specific grammar concepts used, correctly and incorrectly\n\nThey will not be able to view your:\n    \u2022 messages in chats outside the course\n    \u2022 vocabulary list";
    },
    get$allowAccess() {
      return "Allow Access";
    },
    get$denyAccess() {
      return "Deny Access";
    },
    get$adminRequestedAccess() {
      return "Admins asked to view your analytics.";
    },
    lastUpdated$1(time) {
      return "Updated\n" + time;
    },
    get$activityFinishedMessage() {
      return "All Finished!";
    },
    get$endForAll() {
      return "End for all";
    },
    get$newCourse() {
      return "New course";
    },
    get$newCourseSubtitle() {
      return "Which course template would you like to use?";
    },
    get$failedToLoadCourses() {
      return "Failed to load courses";
    },
    numModules$1(num) {
      return "" + num + " modules";
    },
    numActivityPlans$1(num) {
      return "" + num + " activity plans";
    },
    get$coursePlan() {
      return "Course Plan";
    },
    get$editCourseLater() {
      return "You can edit template title, descriptions, and course image later.";
    },
    get$newCourseAccess() {
      return "By default, courses are private and require admin approval to join. You can edit these settings at any time.";
    },
    get$createCourse() {
      return "Create course";
    },
    get$stats() {
      return "Stats";
    },
    get$createGroupChat() {
      return "Create group chat";
    },
    get$editCourse() {
      return "Edit course";
    },
    get$inviteDesc() {
      return "By username, by code or link";
    },
    get$editCourseDesc() {
      return "Here you can edit course title, description, etc.";
    },
    get$permissionsDesc() {
      return "Set permissions such as who can invite users, send messages, create chats, etc.";
    },
    get$accessDesc() {
      return "You can make your course open to the world! Or, make your course private and secure.";
    },
    get$createGroupChatDesc() {
      return "Whereas activity sessions start and end, group chats will stay open for routine communication.";
    },
    get$deleteDesc() {
      return "Only admins can delete a course. This is a destructive action which removes all users and deletes all selected chats within the course. Proceed with caution.";
    },
    get$failedToLoadCourseInfo() {
      return "Failed to load course information";
    },
    get$noCourseFound() {
      return "No course information found";
    },
    additionalParticipants$1(num) {
      return "+ " + num + " others";
    },
    get$courseChats() {
      return "Course Chats";
    },
    get$directMessages() {
      return "Direct Messages";
    },
    get$whatNow() {
      return "What now?";
    },
    get$chooseNextActivity() {
      return "Choose your next activity!";
    },
    get$chooseRole() {
      return "Choose a role!";
    },
    get$chooseRoleToParticipate() {
      return "Choose a role to participate!";
    },
    waitingToFillRole$1(num) {
      return "Waiting to fill " + num + " roles...";
    },
    get$pingParticipants() {
      return "Ping course participants";
    },
    get$playWithBot() {
      return "Play with Pangea Bot";
    },
    get$inviteFriends() {
      return "Invite friends";
    },
    get$waitNotDone() {
      return "Wait I\u2019m not done!";
    },
    get$waitingForOthersToFinish() {
      return "Waiting for the rest to finish up...";
    },
    get$saveToCompletedActivities() {
      return "Save to completed activities";
    },
    get$generatingSummary() {
      return "Analyzing chat and generating results";
    },
    get$instructionsLanguage() {
      return "Instructions language";
    },
    get$findCourse() {
      return "Find a course";
    },
    get$activityCompletedDesc() {
      return "Your completed activity was added to analytics where you can review and practice the language you used.";
    },
    pingParticipantsNotification$2(user, room) {
      return user + " is looking for users to join the activity session in " + room;
    },
    get$courseName() {
      return "Course name";
    },
    get$createNewCourse() {
      return "New course";
    },
    get$publicCourses() {
      return "Public courses";
    },
    goToCourse$1(course) {
      return "Go to course: " + course;
    },
    get$activityComplete() {
      return "This activity has been completed. The activity summary should be available below.";
    },
    get$haventChattedMuch() {
      return "It looks like you haven't chatted much, try using some more vocab words! If you feel like you've completed your objective, you can end the activity below.";
    },
    get$haveChatted() {
      return "It looks like you've been chatting for a while! If you feel like you've completed your objective, wrap up to finish the activity and we'll generate you a summary in the chat!";
    },
    userDoneAndWaiting$2(num1, num2) {
      return "" + num1 + "/" + num2 + " participants have wrapped up. Wait for everyone to finish, and we'll generate you a summary in the chat! \n\nIf you'd like to rejoin the conversation, click the continue button in the chat.";
    },
    othersDoneAndWaiting$2(num1, num2) {
      return "" + num1 + "/" + num2 + " are done. Have you completed your objective?";
    },
    get$startNewSession() {
      return "Start new session";
    },
    get$joinOpenSession() {
      return "Join open session";
    },
    get$less() {
      return "less";
    },
    get$activityNotFound() {
      return "Activity not found";
    },
    get$levelUp() {
      return "Level up";
    },
    get$myActivities() {
      return "My activities";
    },
    get$openToJoin() {
      return "Open to join";
    },
    get$results(_) {
      return "Results";
    },
    get$activityDone() {
      return "Activity Done!";
    },
    get$moreLabel() {
      return "more";
    },
    get$promoCodeInfo() {
      return "Promo codes can be entered on the next page";
    },
    get$editsComingSoon() {
      return "The ability to edit cities and activities is coming soon.";
    },
    get$editing() {
      return "Editing";
    },
    activityNeedsMembers$1(num) {
      return "Uh oh! This activity needs " + num + " more people.";
    },
    get$inviteFriendsToCourse() {
      return "Invite friends to my course";
    },
    remove$1($receiver, arg0) {
      return this.get$remove(this).call$1(arg0);
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(A.L10nHu, C.L10n);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"L10nHu":{"L10n":[]}}'));
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_224", e: "endPart", h: h});
})($__dart_deferred_initializers__, "Za+XvpJE+X2ABTjUo6n3umnK9/s=");
;
//# sourceMappingURL=main.dart.js_224.part.js.map
