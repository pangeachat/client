// Generated by dart2js (, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.9.2.
((s, d) => {
  s[d] = s[d] || {};
})(self, "$__dart_deferred_initializers__");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var B, C,
  A = {
    L10nFr$() {
      return new A.L10nFr(B.canonicalizedLocale("fr"));
    },
    L10nFr: function L10nFr(t0) {
      this.localeName = t0;
    }
  };
  B = holdersList[0];
  C = holdersList[54];
  A = hunkHelpers.updateHolder(holdersList[22], A);
  A.L10nFr.prototype = {
    get$alwaysUse24HourFormat() {
      return "true";
    },
    get$repeatPassword() {
      return "R\xe9p\xe9tez le mot de passe";
    },
    get$notAnImage() {
      return "Pas un fichier image.";
    },
    get$setCustomPermissionLevel() {
      return "Set custom permission level";
    },
    get$setPermissionsLevelDescription() {
      return "Please choose a predefined role below or enter a custom permission level between 0 and 100.";
    },
    get$ignoreUser() {
      return "Ignore user";
    },
    get$normalUser() {
      return "Normal user";
    },
    get$remove(_) {
      return "Supprimer";
    },
    get$importNow() {
      return "Importer maintenant";
    },
    get$importEmojis() {
      return "Importer des Emojis";
    },
    get$importFromZipFile() {
      return "Importer depuis un fichier .zip";
    },
    get$exportEmotePack() {
      return "Exporter le pack d'\xe9motic\xf4nes au format .zip";
    },
    get$replace(_) {
      return "Remplacer";
    },
    aboutHomeserver$1(homeserver) {
      return "\xc0 propos de " + homeserver;
    },
    get$accept(_) {
      return "Accepter";
    },
    acceptedTheInvitation$1(username) {
      return "\ud83d\udc4d " + username + " a accept\xe9 l'invitation";
    },
    get$account() {
      return "Compte";
    },
    activatedEndToEndEncryption$1(username) {
      return "\ud83d\udd10 " + username + " a activ\xe9 le chiffrement de bout en bout";
    },
    get$addEmail() {
      return "Ajouter un courriel";
    },
    supposedMxid$1(mxid) {
      return "Cela devrait \xeatre " + mxid;
    },
    get$admin() {
      return "Administrateur";
    },
    get$commandHint_roomupgrade() {
      return "Upgrade this room to the given room version";
    },
    get$commandHint_googly() {
      return "Envoyer des yeux \xe9carquill\xe9s";
    },
    get$commandHint_cuddle() {
      return "Envoyer un c\xe2lin";
    },
    get$commandHint_hug() {
      return "Envoyer une accolade";
    },
    googlyEyesContent$1(senderName) {
      return senderName + " vous envoie des yeux \xe9carquill\xe9s";
    },
    cuddleContent$1(senderName) {
      return senderName + " vous fait un c\xe2lin";
    },
    hugContent$1(senderName) {
      return senderName + " vous fait une accolade";
    },
    answeredTheCall$1(senderName) {
      return senderName + " a r\xe9pondu \xe0 l'appel";
    },
    get$anyoneCanJoin() {
      return "Tout le monde peut rejoindre";
    },
    get$archive() {
      return "Archiver";
    },
    get$areYouSure() {
      return "\xcates-vous s\xfbr\xb7e\xa0?";
    },
    get$areYouSureYouWantToLogout() {
      return "Voulez-vous vraiment vous d\xe9connecter ?";
    },
    get$askSSSSSign() {
      return "Pour pouvoir faire signer l'autre personne, veuillez entrer la phrase de passe de votre trousseau s\xe9curis\xe9 ou votre cl\xe9 de r\xe9cup\xe9ration.";
    },
    askVerificationRequest$1(username) {
      return "Accepter cette demande de v\xe9rification de la part de " + username + " ?";
    },
    badServerLoginTypesException$3(serverVersions, supportedVersions, suportedVersions) {
      return "Le serveur d'accueil prend en charge les types de connexion :\n" + serverVersions + "\nMais cette application ne prend en charge que :\n" + supportedVersions;
    },
    get$sendTypingNotifications() {
      return "Envoyer des notifications de frappe";
    },
    get$swipeRightToLeftToReply() {
      return "Glisser de droite \xe0 gauche pour r\xe9pondre";
    },
    get$sendOnEnter() {
      return "Envoyer avec Entr\xe9e";
    },
    countChatsAndCountParticipants$2(chats, participants) {
      return "" + chats + " discussions et " + participants + " participants";
    },
    get$banFromChat() {
      return "Bannir de la discussion";
    },
    get$banned() {
      return "Banni";
    },
    bannedUser$2(username, targetName) {
      return username + " a banni " + targetName;
    },
    get$blockDevice() {
      return "Bloquer l'appareil";
    },
    get$blocked() {
      return "Bloqu\xe9";
    },
    get$cancel(_) {
      return "Annuler";
    },
    cantOpenUri$1(uri) {
      return "Impossible d'ouvrir l'URI " + uri;
    },
    get$changeDeviceName() {
      return "Modifier le nom de l'appareil";
    },
    changedTheChatAvatar$1(username) {
      return username + " a chang\xe9 l'image de la discussion";
    },
    changedTheChatDescriptionTo$2(username, description) {
      return username + " a chang\xe9 la description de la discussion en\xa0: '" + description + "'";
    },
    changedTheChatNameTo$2(username, chatname) {
      return username + " a renomm\xe9 la discussion en\xa0: '" + chatname + "'";
    },
    changedTheChatPermissions$1(username) {
      return username + " a chang\xe9 les permissions de la discussion";
    },
    changedTheDisplaynameTo$2(username, displayname) {
      return username + " a chang\xe9 son nom en : '" + displayname + "'";
    },
    changedTheGuestAccessRules$1(username) {
      return username + " a chang\xe9 les r\xe8gles d'acc\xe8s \xe0 la discussion pour les invit\xe9s";
    },
    changedTheGuestAccessRulesTo$2(username, rules) {
      return username + " a chang\xe9 les r\xe8gles d'acc\xe8s \xe0 la discussion pour les invit\xe9s en : " + rules;
    },
    changedTheHistoryVisibility$1(username) {
      return username + " a chang\xe9 la visibilit\xe9 de l'historique de la discussion";
    },
    changedTheHistoryVisibilityTo$2(username, rules) {
      return username + " a chang\xe9 la visibilit\xe9 de l'historique de la discussion en : " + rules;
    },
    changedTheJoinRules$1(username) {
      return username + " a chang\xe9 les r\xe8gles d'acc\xe8s \xe0 la discussion";
    },
    changedTheJoinRulesTo$2(username, joinRules) {
      return username + " a chang\xe9 les r\xe8gles d'acc\xe8s \xe0 la discussion en : " + joinRules;
    },
    changedTheProfileAvatar$1(username) {
      return username + " a chang\xe9 son avatar";
    },
    changedTheRoomAliases$1(username) {
      return username + " a chang\xe9 les adresses du salon";
    },
    changedTheRoomInvitationLink$1(username) {
      return username + " a chang\xe9 le lien d'invitation";
    },
    get$changePassword() {
      return "Changer de mot de passe";
    },
    get$changeTheme() {
      return "Changez votre style";
    },
    get$changeYourAvatar() {
      return "Changer votre avatar";
    },
    get$channelCorruptedDecryptError() {
      return "Le chiffrement a \xe9t\xe9 corrompu";
    },
    get$chat() {
      return "Discussion";
    },
    get$chatDetails() {
      return "D\xe9tails de la discussion";
    },
    get$chats() {
      return "Discussions";
    },
    get$chooseAStrongPassword() {
      return "Choisissez un mot de passe fort";
    },
    get$clearArchive() {
      return "Effacer les archives";
    },
    get$close(_) {
      return "Fermer";
    },
    get$commandHint_markasdm() {
      return "Marquer comme salon de messages directs pour l'identifiant Matrix indiqu\xe9";
    },
    get$commandHint_markasgroup() {
      return "Marquer comme groupe";
    },
    get$commandHint_ban() {
      return "Bannir l'utilisateur/trice donn\xe9(e) de ce salon";
    },
    get$commandHint_clearcache() {
      return "Vider le cache";
    },
    get$commandHint_create() {
      return "Cr\xe9er un groupe de discussion vide\nUtilisez --no-encryption pour d\xe9sactiver le chiffrement";
    },
    get$commandHint_discardsession() {
      return "Abandonner la session";
    },
    get$commandHint_dm() {
      return "Commencer une discussion directe\nUtilisez --no-encryption pour d\xe9sactiver le chiffrement";
    },
    get$commandHint_html() {
      return "Envoyer du texte au format HTML";
    },
    get$commandHint_invite() {
      return "Inviter l'utilisateur/trice donn\xe9(e) dans ce salon";
    },
    get$commandHint_join() {
      return "Rejoindre le salon donn\xe9";
    },
    get$commandHint_kick() {
      return "Supprime l'utilisateur/trice donn\xe9(e) de ce salon";
    },
    get$commandHint_leave() {
      return "Quitter ce salon";
    },
    get$commandHint_me() {
      return "D\xe9crivez-vous";
    },
    get$commandHint_myroomavatar() {
      return "D\xe9finir votre image pour ce salon (par mxc-uri)";
    },
    get$commandHint_myroomnick() {
      return "D\xe9finir votre nom d'affichage pour ce salon";
    },
    get$commandHint_op() {
      return "D\xe9finir le niveau de puissance de l'utilisateur/trice donn\xe9(e) (par d\xe9faut : 50)";
    },
    get$commandHint_plain() {
      return "Envoyer du texte non format\xe9";
    },
    get$commandHint_react() {
      return "Envoyer une r\xe9ponse en tant que r\xe9action";
    },
    get$commandHint_send() {
      return "Envoyer du texte";
    },
    get$commandHint_unban() {
      return "D\xe9bannir l'utilisateur/trice donn\xe9(e) de ce salon";
    },
    get$compareEmojiMatch() {
      return "Veuillez comparer les \xe9mojis";
    },
    get$compareNumbersMatch() {
      return "Veuillez comparer les chiffres";
    },
    get$configureChat() {
      return "Configurer la discussion";
    },
    get$confirm(_) {
      return "Confirmer";
    },
    get$copiedToClipboard() {
      return "Copi\xe9 dans le presse-papier";
    },
    get$copy(_) {
      return "Copier";
    },
    couldNotDecryptMessage$1(error) {
      return "Impossible de d\xe9chiffrer le message : " + error;
    },
    get$checkList() {
      return "Check list";
    },
    countParticipants$1(count) {
      return "" + count + " participant(s)";
    },
    countInvited$1(count) {
      return "" + count + " invited";
    },
    get$create(_) {
      return "Cr\xe9er";
    },
    createdTheChat$1(username) {
      return "\ud83d\udcac " + username + " a cr\xe9\xe9 la discussion";
    },
    get$createGroup() {
      return "Cr\xe9er un groupe";
    },
    get$currentlyActive() {
      return "Actif en ce moment";
    },
    get$darkTheme() {
      return "Sombre";
    },
    dateAndTimeOfDay$2(date, timeOfDay) {
      return date + ", " + timeOfDay;
    },
    get$deactivateAccountWarning() {
      return "Cette op\xe9ration va d\xe9sactiver votre compte. Une fois cette action effectu\xe9e, aucun retour en arri\xe8re n'est possible\xa0! \xcates-vous s\xfbr\xb7e\xa0?";
    },
    get$defaultPermissionLevel() {
      return "Niveau d'autorisation par d\xe9faut pour les arrivants";
    },
    get$$delete(_) {
      return "Supprimer";
    },
    get$deleteAccount() {
      return "Supprimer le compte";
    },
    get$deleteMessage() {
      return "Supprimer le message";
    },
    get$devices() {
      return "Appareils";
    },
    get$displaynameHasBeenChanged() {
      return "Renommage effectu\xe9";
    },
    get$downloadFile() {
      return "T\xe9l\xe9charger le fichier";
    },
    get$edit() {
      return "Modifier";
    },
    get$editBlockedServers() {
      return "Modifier les serveurs bloqu\xe9s";
    },
    get$chatPermissions() {
      return "Permissions du salon";
    },
    get$editDisplayname() {
      return "Changer de nom d'affichage";
    },
    get$editRoomAvatar() {
      return "Modifier l'avatar du salon";
    },
    get$emoteExists() {
      return "Cette \xe9motic\xf4ne existe d\xe9j\xe0\xa0!";
    },
    get$emoteInvalid() {
      return "Raccourci d'\xe9motic\xf4ne invalide\xa0!";
    },
    get$emoteKeyboardNoRecents() {
      return "Les \xe9motic\xf4nes r\xe9cemment utilis\xe9es appara\xeetront ici...";
    },
    get$emotePacks() {
      return "Packs d'\xe9motic\xf4nes pour le salon";
    },
    get$customEmojisAndStickers() {
      return "\xc9motic\xf4nes et autocollants personnalis\xe9s";
    },
    get$emoteShortcode() {
      return "Raccourci de l'\xe9motic\xf4ne";
    },
    get$emoteWarnNeedToPick() {
      return "Vous devez s\xe9lectionner un raccourci d'\xe9motic\xf4ne et une image\xa0!";
    },
    get$emptyChat() {
      return "Discussion vide";
    },
    get$enableEmotesGlobally() {
      return "Activer globalement le pack d'\xe9motic\xf4nes";
    },
    get$enableEncryption() {
      return "Activer le chiffrement";
    },
    get$encrypted() {
      return "Chiffr\xe9";
    },
    get$encryptionNotEnabled() {
      return "Le chiffrement n'est pas activ\xe9";
    },
    endedTheCall$1(senderName) {
      return senderName + " a mis fin \xe0 l'appel";
    },
    get$enterAnEmailAddress() {
      return "Saisissez une adresse de courriel";
    },
    errorObtainingLocation$1(error) {
      return "Erreur lors de l'obtention de la localisation : " + error;
    },
    get$fontSize(_) {
      return "Taille de la police";
    },
    get$forward(_) {
      return "Transf\xe9rer";
    },
    get$fromJoining() {
      return "\xc0 partir de l'entr\xe9e dans le salon";
    },
    get$fromTheInvitation() {
      return "\xc0 partir de l'invitation";
    },
    get$guestsAreForbidden() {
      return "Les invit\xe9s ne peuvent pas rejoindre";
    },
    get$guestsCanJoin() {
      return "Les invit\xe9s peuvent rejoindre";
    },
    hasWithdrawnTheInvitationFor$2(username, targetName) {
      return username + " a annul\xe9 l'invitation de " + targetName;
    },
    get$help() {
      return "Aide";
    },
    get$hideRedactedMessages() {
      return "Cacher les messages \xe9dit\xe9s";
    },
    get$hideRedactedMessagesBody() {
      return "Si quelqu'un modifie un message, celui-ci ne sera plus visible dans la discussion.";
    },
    get$hideInvalidOrUnknownMessageFormats() {
      return "Masquer les formats de message invalides ou inconnus";
    },
    get$block() {
      return "Bloquer";
    },
    get$blockedUsers() {
      return "Utilisateurs/trices bloqu\xe9s";
    },
    get$blockListDescription() {
      return "Vous pouvez bloquer des utilisateurs/trices qui vous d\xe9rangent. Vous ne pourrez plus recevoir aucun message ou invitation \xe0 un salon d'utilisateurs/trices figurant sur votre liste de blocage personnelle.";
    },
    get$blockUsername() {
      return "Ignorer le nom d'utilisateur/trice";
    },
    get$iHaveClickedOnLink() {
      return "J'ai cliqu\xe9 sur le lien";
    },
    get$incorrectPassphraseOrKey() {
      return "Phrase de passe ou cl\xe9 de r\xe9cup\xe9ration incorrecte";
    },
    get$inviteContact() {
      return "Inviter un contact";
    },
    get$noChatDescriptionYet() {
      return "Aucune description de discussion n'a encore \xe9t\xe9 cr\xe9\xe9e.";
    },
    get$tryAgain() {
      return "Nouvelle tentative";
    },
    get$invited() {
      return "Invit\xe9\xb7e";
    },
    get$redactMessageDescription() {
      return "Le message sera modifi\xe9 pour tous les participants de cette conversation. Il n'est pas possible de revenir en arri\xe8re.";
    },
    get$optionalRedactReason() {
      return "(Facultatif) Raison de la modification de ce message...";
    },
    invitedUser$2(username, targetName) {
      return "\ud83d\udce9 " + username + " a invit\xe9 " + targetName;
    },
    get$invitedUsersOnly() {
      return "Uniquement les utilisateur\xb7ices invit\xe9\xb7es";
    },
    get$inviteForMe() {
      return "Inviter pour moi";
    },
    get$isTyping() {
      return "est en train d'\xe9crire\u2026";
    },
    joinedTheChat$1(username) {
      return "\ud83d\udc4b " + username + " a rejoint la discussion";
    },
    kicked$2(username, targetName) {
      return "\ud83d\udc5e " + username + " a expuls\xe9 " + targetName;
    },
    get$kickFromChat() {
      return "Expulser de la discussion";
    },
    lastActiveAgo$1(localizedTimeShort) {
      return "Vu\xb7e pour la derni\xe8re fois\u202f: " + localizedTimeShort;
    },
    get$leave() {
      return "Partir";
    },
    get$leftTheChat() {
      return "A quitt\xe9 la discussion";
    },
    get$lightTheme() {
      return "Clair";
    },
    get$dehydrate() {
      return "Exporter la session et effacer l'appareil";
    },
    get$dehydrateWarning() {
      return "Cette action ne peut pas \xeatre annul\xe9e. Assurez-vous d'enregistrer convenablement le fichier de sauvegarde.";
    },
    get$dehydrateTor() {
      return "Utilisateurs/trices de TOR : Exporter la session";
    },
    get$dehydrateTorLong() {
      return "Pour les utilisateurs/trices de TOR, il est recommand\xe9 d'exporter la session avant de fermer la fen\xeatre.";
    },
    get$loadingPleaseWait() {
      return "Chargement\u2026 Veuillez patienter.";
    },
    get$loadMore() {
      return "Charger plus\u2026";
    },
    get$locationDisabledNotice() {
      return "Les services de localisation sont d\xe9sactiv\xe9s. Il est n\xe9cessaire de les activer avant de pouvoir partager votre localisation.";
    },
    get$locationPermissionDeniedNotice() {
      return "L'application n'a pas la permission d'acc\xe9der \xe0 votre localisation. Merci de l'accorder afin de pouvoir partager votre localisation.";
    },
    get$login() {
      return "Se connecter";
    },
    get$logout() {
      return "Se d\xe9connecter";
    },
    get$mention() {
      return "Mentionner";
    },
    get$messages() {
      return "Messages";
    },
    get$messagesStyle() {
      return "Messages\u202f:";
    },
    get$moderator() {
      return "Mod\xe9rateur\xb7rice";
    },
    get$newChat() {
      return "Nouvelle discussion";
    },
    get$newVerificationRequest() {
      return "Nouvelle demande de v\xe9rification !";
    },
    get$next(_) {
      return "Suivant";
    },
    get$no() {
      return "Non";
    },
    get$noConnectionToTheServer() {
      return "Aucune connexion au serveur";
    },
    get$noEmotesFound() {
      return "Aucune \xe9motic\xf4ne trouv\xe9e. \ud83d\ude15";
    },
    get$shareInviteLink() {
      return "Partager un lien d'invitation";
    },
    get$none() {
      return "Aucun";
    },
    get$noPasswordRecoveryDescription() {
      return "Vous n'avez pas encore ajout\xe9 de moyen pour r\xe9cup\xe9rer votre mot de passe.";
    },
    get$noPermission() {
      return "Aucune permission";
    },
    get$noRoomsFound() {
      return "Aucun salon trouv\xe9\u2026";
    },
    get$notifications() {
      return "Notifications";
    },
    get$obtainingLocation() {
      return "Obtention de la localisation\u2026";
    },
    get$offensive() {
      return "Offensant";
    },
    get$ok() {
      return "Valider";
    },
    get$oopsSomethingWentWrong() {
      return "Oups, un probl\xe8me est survenu\u2026";
    },
    get$oneClientLoggedOut() {
      return "Un de vos clients a \xe9t\xe9 d\xe9connect\xe9";
    },
    get$openInMaps() {
      return "Ouvrir dans maps";
    },
    get$link() {
      return "Lien";
    },
    get$serverRequiresEmail() {
      return "Ce serveur doit valider votre adresse \xe9lectronique pour l'inscription.";
    },
    get$participant() {
      return "Participant(e)";
    },
    get$passphraseOrKey() {
      return "Phrase de passe ou cl\xe9 de r\xe9cup\xe9ration";
    },
    get$password(_) {
      return "Mot de passe";
    },
    get$passwordForgotten() {
      return "Mot de passe oubli\xe9";
    },
    get$passwordHasBeenChanged() {
      return "Le mot de passe a \xe9t\xe9 modifi\xe9";
    },
    get$overview() {
      return "Aper\xe7u";
    },
    get$passwordRecoverySettings() {
      return "Param\xe8tres de r\xe9cup\xe9ration de mot de passe";
    },
    get$passwordRecovery() {
      return "R\xe9cup\xe9ration du mot de passe";
    },
    get$pickImage() {
      return "Choisir une image";
    },
    get$pin() {
      return "\xc9pingler";
    },
    get$pleaseChoose() {
      return "Veuillez choisir";
    },
    get$pleaseEnterYourPassword() {
      return "Renseignez votre mot de passe";
    },
    get$pleaseEnterYourPin() {
      return "Veuillez saisir votre code PIN";
    },
    get$pleaseEnterYourUsername() {
      return "Renseignez votre nom d'utilisateur\xb7ice";
    },
    get$pleaseFollowInstructionsOnWeb() {
      return "Veuillez suivre les instructions sur le site et appuyer sur Suivant.";
    },
    get$privacy() {
      return "Vie priv\xe9e";
    },
    get$reason(_) {
      return "Motif";
    },
    redactedBy$1(username) {
      return "Modifi\xe9 par " + username;
    },
    get$directChat() {
      return "Discussion directe";
    },
    redactedByBecause$2(username, reason) {
      return "Modifi\xe9 par " + username + ' car\u202f: "' + reason + '"';
    },
    redactedAnEvent$1(username) {
      return username + " a supprim\xe9 un \xe9v\xe8nement";
    },
    get$redactMessage() {
      return "Supprimer un message";
    },
    get$reject() {
      return "Refuser";
    },
    rejectedTheInvitation$1(username) {
      return username + " a refus\xe9 l'invitation";
    },
    get$removeAllOtherDevices() {
      return "Supprimer tous les autres appareils";
    },
    get$unbanFromChat() {
      return "D\xe9bannissement de la discussion";
    },
    get$removeYourAvatar() {
      return "Supprimer votre avatar";
    },
    get$replaceRoomWithNewerVersion() {
      return "Remplacer le salon par une nouvelle version";
    },
    get$reply(_) {
      return "R\xe9pondre";
    },
    get$reportMessage() {
      return "Signaler un message";
    },
    get$roomHasBeenUpgraded() {
      return "Le salon a \xe9t\xe9 mis \xe0 niveau";
    },
    get$search(_) {
      return "Rechercher";
    },
    get$security() {
      return "S\xe9curit\xe9";
    },
    get$send(_) {
      return "Envoyer";
    },
    get$sendAMessage() {
      return "Envoyer un message";
    },
    get$sendAudio() {
      return "Envoyer un fichier audio";
    },
    get$sendFile() {
      return "Envoyer un fichier";
    },
    get$sendImage() {
      return "Envoyer une image";
    },
    sendImages$1(count) {
      return "Send " + count + " image";
    },
    get$sendMessages() {
      return "Envoyer des messages";
    },
    get$sendVideo() {
      return "Envoyer une vid\xe9o";
    },
    sentAFile$1(username) {
      return "\ud83d\udcc1 " + username + " a envoy\xe9 un fichier";
    },
    sentAnAudio$1(username) {
      return "\ud83c\udfa4 " + username + " a envoy\xe9 un fichier audio";
    },
    sentAPicture$1(username) {
      return "\ud83d\uddbc\ufe0f " + username + " a envoy\xe9 une image";
    },
    sentASticker$1(username) {
      return "\ud83d\ude0a " + username + " a envoy\xe9 un autocollant";
    },
    sentAVideo$1(username) {
      return "\ud83c\udfa5 " + username + " a envoy\xe9 une vid\xe9o";
    },
    sentCallInformations$1(senderName) {
      return senderName + " a envoy\xe9 des informations sur l'appel";
    },
    get$separateChatTypes() {
      return "S\xe9parer les discussions directes et les groupes";
    },
    get$setChatDescription() {
      return "D\xe9finir la description de la discussion";
    },
    get$setStatus() {
      return "D\xe9finir le statut";
    },
    get$settings() {
      return "Param\xe8tres";
    },
    get$share(_) {
      return "Partager";
    },
    sharedTheLocation$1(username) {
      return username + " a partag\xe9 sa position";
    },
    get$shareLocation() {
      return "Partager la localisation";
    },
    get$presencesToggle() {
      return "Afficher les messages de statut des autres utilisateurs/trices";
    },
    get$skip(_) {
      return "Ignorer";
    },
    get$sourceCode() {
      return "Code source";
    },
    startedACall$1(senderName) {
      return senderName + " a d\xe9marr\xe9 un appel";
    },
    get$status(_) {
      return "Statut";
    },
    get$statusExampleMessage() {
      return "Comment allez-vous aujourd'hui ?";
    },
    get$submit(_) {
      return "Soumettre";
    },
    get$synchronizingPleaseWait() {
      return "Synchronisation... Veuillez patienter.";
    },
    synchronizingPleaseWaitCounter$1(percentage) {
      return " Synchronisation\u2026 (" + percentage + " %)";
    },
    get$systemTheme() {
      return "Syst\xe8me";
    },
    get$theyDontMatch() {
      return "Elles ne correspondent pas";
    },
    get$theyMatch() {
      return "Elles correspondent";
    },
    get$tooManyRequestsWarning() {
      return "Trop de requ\xeates. Veuillez r\xe9essayer plus tard\xa0!";
    },
    get$tryToSendAgain() {
      return "Retenter l'envoi";
    },
    get$unavailable() {
      return "Indisponible";
    },
    unbannedUser$2(username, targetName) {
      return username + " a annul\xe9 le bannissement de " + targetName;
    },
    get$unblockDevice() {
      return "Retirer le blocage sur l'appareil";
    },
    get$unknownDevice() {
      return "Appareil inconnu";
    },
    get$unknownEncryptionAlgorithm() {
      return "Algorithme de chiffrement inconnu";
    },
    unknownEvent$1(type) {
      return "\xc9v\xe9nement de type inconnu : '" + type + "'";
    },
    get$unpin() {
      return "D\xe9s\xe9pingler";
    },
    userAndOthersAreTyping$2(username, count) {
      return username + " et " + count + " autres sont en train d'\xe9crire\u2026";
    },
    userAndUserAreTyping$2(username, username2) {
      return username + " et " + username2 + " sont en train d'\xe9crire\u2026";
    },
    userIsTyping$1(username) {
      return username + " est en train d'\xe9crire\u2026";
    },
    userLeftTheChat$1(username) {
      return "\ud83d\udeaa " + username + " a quitt\xe9 la discussion";
    },
    get$username(_) {
      return "Nom d'utilisateur\xb7ice";
    },
    userSentUnknownEvent$2(username, type) {
      return username + " a envoy\xe9 un \xe9v\xe8nement de type " + type;
    },
    get$unverified() {
      return "Non v\xe9rifi\xe9";
    },
    get$verified() {
      return "V\xe9rifi\xe9";
    },
    get$verifyStart() {
      return "Commencer la v\xe9rification";
    },
    get$verifySuccess() {
      return "La v\xe9rification a \xe9t\xe9 effectu\xe9e avec succ\xe8s !";
    },
    get$verifyTitle() {
      return "V\xe9rification de l'autre compte";
    },
    get$visibleForAllParticipants() {
      return "Visible pour tous les participant\xb7es";
    },
    get$visibleForEveryone() {
      return "Visible pour tout le monde";
    },
    get$voiceMessage() {
      return "Message vocal";
    },
    get$waitingPartnerAcceptRequest() {
      return "En attente de l'acceptation de la demande par le partenaire\u2026";
    },
    get$waitingPartnerEmoji() {
      return "En attente de l'acceptation de l'\xe9moji par le partenaire\u2026";
    },
    get$waitingPartnerNumbers() {
      return "En attente de l'acceptation des nombres par le partenaire\u2026";
    },
    get$warning() {
      return "Attention\xa0!";
    },
    get$weSentYouAnEmail() {
      return "Nous vous avons envoy\xe9 un courriel";
    },
    get$whyDoYouWantToReportThis() {
      return "Pourquoi voulez-vous le signaler ?";
    },
    get$withTheseAddressesRecoveryDescription() {
      return "Gr\xe2ce \xe0 ces adresses, vous pouvez r\xe9cup\xe9rer votre mot de passe si vous en avez besoin.";
    },
    get$writeAMessage() {
      return "\xc9crivez un message\u2026";
    },
    get$yes() {
      return "Oui";
    },
    get$you() {
      return "Vous";
    },
    get$youAreNoLongerParticipatingInThisChat() {
      return "Vous ne participez plus \xe0 cette discussion";
    },
    get$youHaveBeenBannedFromThisChat() {
      return "Vous avez \xe9t\xe9 banni\xb7e de cette discussion";
    },
    get$yourPublicKey() {
      return "Votre cl\xe9 publique";
    },
    get$messageInfo() {
      return "Informations sur le message";
    },
    get$time(_) {
      return "Heure";
    },
    get$sender() {
      return "Exp\xe9diteur/trice";
    },
    get$openGallery() {
      return "Ouvrir dans la Galerie";
    },
    get$start(_) {
      return "Commencer";
    },
    get$markAsRead() {
      return "Marquer comme lu";
    },
    reactedWith$2(sender, reaction) {
      return sender + " a r\xe9agi avec " + reaction;
    },
    get$pinMessage() {
      return "\xc9pingler au salon";
    },
    get$emojis() {
      return "\xc9mojis";
    },
    get$youRejectedTheInvitation() {
      return "Vous avez rejet\xe9 l'invitation";
    },
    get$youJoinedTheChat() {
      return "Vous avez rejoint la discussion";
    },
    get$youAcceptedTheInvitation() {
      return "\ud83d\udc4d Vous avez accept\xe9 l'invitation";
    },
    youBannedUser$1(user) {
      return "Vous avez banni " + user;
    },
    youHaveWithdrawnTheInvitationFor$1(user) {
      return "Vous avez retir\xe9 l'invitation pour " + user;
    },
    youInvitedBy$1(user) {
      return "\ud83d\udce9 Vous avez \xe9t\xe9 invit\xe9 par " + user;
    },
    youInvitedUser$1(user) {
      return "\ud83d\udce9 Vous avez invit\xe9 " + user;
    },
    youKicked$1(user) {
      return "\ud83d\udc5e Vous avez d\xe9gag\xe9 " + user;
    },
    youUnbannedUser$1(user) {
      return "Vous avez d\xe9banni " + user;
    },
    hasKnocked$1(user) {
      return "\ud83d\udeaa " + user + " a frapp\xe9";
    },
    get$users() {
      return "Utilisateurs/trices";
    },
    countFiles$1(count) {
      return "" + count + " fichiers";
    },
    get$user() {
      return "Utilisateur/trice";
    },
    get$custom() {
      return "Personnalis\xe9";
    },
    get$noKeyForThisMessage() {
      return "Cela peut se produire si le message a \xe9t\xe9 envoy\xe9 avant que vous ne vous soyez connect\xe9 \xe0 votre compte sur cet appareil.\n\nIl est \xe9galement possible que l'exp\xe9diteur ait bloqu\xe9 votre appareil ou qu'un probl\xe8me de connexion Internet se soit produit.\n\n\xcates-vous capable de lire le message sur une autre session ? Vous pouvez alors transf\xe9rer le message \xe0 partir de celle-ci ! Allez dans Param\xe8tres > Appareils et assurez-vous que vos appareils se sont v\xe9rifi\xe9s mutuellement. Lorsque vous ouvrirez le salon la fois suivante et que les deux sessions seront au premier plan, les cl\xe9s seront transmises automatiquement.\n\nVous ne voulez pas perdre les cl\xe9s en vous d\xe9connectant ou en changeant d'appareil ? Assurez-vous que vous avez activ\xe9 la sauvegarde de la discussion dans les param\xe8tres.";
    },
    wasDirectChatDisplayName$1(oldDisplayName) {
      return "Discussion vide (\xe9tait " + oldDisplayName + ")";
    },
    get$reopenChat() {
      return "Rouvrir la discussion";
    },
    get$noOtherDevicesFound() {
      return "Aucun autre appareil trouv\xe9";
    },
    fileIsTooBigForServer$1(max) {
      return "Impossible d'envoyer\u202f! Le serveur accepte uniquement les pi\xe8ces jointes jusqu'\xe0 " + max + ".";
    },
    get$jumpToLastReadMessage() {
      return "Aller au dernier message lu";
    },
    get$readUpToHere() {
      return "Lisez jusqu\u2019ici";
    },
    get$jump() {
      return "Sauter";
    },
    get$openLinkInBrowser() {
      return "Ouvrir le lien dans le navigateur";
    },
    get$setColorTheme() {
      return "D\xe9finir la couleur du th\xe8me\u202f:";
    },
    get$invite() {
      return "Inviter";
    },
    get$invalidInput() {
      return "Entr\xe9e invalide\u202f!";
    },
    wrongPinEntered$1(seconds) {
      return "Mauvais code PIN saisi\u202f! Veuillez r\xe9essayer dans " + seconds + " secondes...";
    },
    get$pleaseEnterANumber() {
      return "Veuillez saisir un nombre sup\xe9rieur \xe0 0";
    },
    get$removeDevicesDescription() {
      return "Vous serez d\xe9connect\xe9 de cet appareil et ne pourrez plus recevoir de messages.";
    },
    get$banUserDescription() {
      return "L'utilisateur/trice sera banni de la discussion et ne pourra plus y acc\xe9der jusqu'\xe0 ce qu'il/elle soit d\xe9banni.";
    },
    get$unbanUserDescription() {
      return "L'utilisateur/trice pourra entrer \xe0 nouveau dans la discussion si il/elle le souhaite.";
    },
    get$kickUserDescription() {
      return "L'utilisateur/trice est expuls\xe9 de la discussion mais n'est pas banni. Dans les discussions publiques, l'utilisateur/trice peut revenir \xe0 tout moment.";
    },
    get$makeAdminDescription() {
      return "Une fois que vous aurez nomm\xe9 cet utilisateur/trice administrateur, vous ne pourrez peut-\xeatre plus annuler cette op\xe9ration, car il disposera alors des m\xeames autorisations que vous.";
    },
    get$yourGlobalUserIdIs() {
      return "Votre identifiant utilisateur global est\u202f: ";
    },
    noUsersFoundWithQuery$1(query) {
      return "Malheureusement, aucun utilisateur/trice n'a pu \xeatre trouv\xe9 avec \"" + query + "\". Veuillez v\xe9rifier si vous n'avez pas fait de faute de frappe.";
    },
    get$knocking() {
      return "Frapper";
    },
    get$nothingFound() {
      return "Rien n'a \xe9t\xe9 trouv\xe9...";
    },
    get$groupName() {
      return "Nom du groupe";
    },
    get$wrongRecoveryKey() {
      return "D\xe9sol\xe9... il ne semble pas s'agir de la bonne cl\xe9 de r\xe9cup\xe9ration.";
    },
    get$startConversation() {
      return "D\xe9marrer la conversation";
    },
    get$commandHint_sendraw() {
      return "Envoyer du JSON brut";
    },
    get$leaveEmptyToClearStatus() {
      return "Laisser vide pour effacer votre statut.";
    },
    get$searchForUsers() {
      return "Rechercher des @utilisateurs/trices...";
    },
    get$pleaseEnterYourCurrentPassword() {
      return "Veuillez saisir votre mot de passe actuel";
    },
    get$newPassword() {
      return "Nouveau mot de passe";
    },
    get$pleaseChooseAStrongPassword() {
      return "Veuillez choisir un mot de passe fort";
    },
    get$passwordsDoNotMatch() {
      return "Les mots de passe ne correspondent pas";
    },
    get$passwordIsWrong() {
      return "Votre mot de passe saisi est erron\xe9";
    },
    get$decline() {
      return "Refuser";
    },
    get$thisDevice() {
      return "Cet appareil\u202f:";
    },
    get$initAppError() {
      return "Une erreur est survenue pendant l'initialisation de l'application";
    },
    searchIn$1(chat) {
      return 'Rechercher dans la discussion "' + chat + '"...';
    },
    get$searchMore() {
      return "Rechercher davantage...";
    },
    get$gallery() {
      return "Galerie";
    },
    get$files(_) {
      return "Fichiers";
    },
    sessionLostBody$2(url, error) {
      return "Votre session est perdue. Veuillez signaler cette erreur aux d\xe9veloppeurs \xe0 " + url + ". Le message d'erreur est le suivant\u202f: " + error;
    },
    restoreSessionBody$2(url, error) {
      return "L'application tente maintenant de restaurer votre session depuis la sauvegarde. Veuillez signaler cette erreur aux d\xe9veloppeurs \xe0 " + url + ". Le message d'erreur est le suivant\u202f: " + error;
    },
    get$sendReadReceipts() {
      return "Envoyer des accus\xe9s de r\xe9ception";
    },
    get$sendTypingNotificationsDescription() {
      return "Les autres participants \xe0 une discussion peuvent voir que vous \xeates en train de taper un nouveau message.";
    },
    get$sendReadReceiptsDescription() {
      return "Les autres participants \xe0 une discussion peuvent voir si vous avez lu un message.";
    },
    get$verifyOtherDevice() {
      return "\ud83d\udd10 V\xe9rifier l'autre appareil";
    },
    get$verifyOtherDeviceDescription() {
      return "Lorsque vous v\xe9rifiez un autre appareil, ces appareils peuvent \xe9changer des cl\xe9s, ce qui augmente votre s\xe9curit\xe9 globale. \ud83d\udcaa Lorsque vous lancez une v\xe9rification, une fen\xeatre contextuelle s'affiche dans l'application sur les deux appareils. Vous y verrez alors une s\xe9rie d'\xe9motic\xf4nes ou de chiffres que vous devrez comparer. Il est pr\xe9f\xe9rable d'avoir les deux appareils \xe0 port\xe9e de main avant de lancer la v\xe9rification. \ud83e\udd33";
    },
    acceptedKeyVerification$1(sender) {
      return sender + " a accept\xe9 la v\xe9rification de cl\xe9";
    },
    canceledKeyVerification$1(sender) {
      return sender + " a annul\xe9 la v\xe9rification de cl\xe9";
    },
    completedKeyVerification$1(sender) {
      return sender + " a termin\xe9 la v\xe9rification de cl\xe9";
    },
    isReadyForKeyVerification$1(sender) {
      return sender + " est pr\xeat pour la v\xe9rification de cl\xe9";
    },
    requestedKeyVerification$1(sender) {
      return sender + " a demand\xe9 une v\xe9rification de cl\xe9";
    },
    startedKeyVerification$1(sender) {
      return sender + " a lanc\xe9 la v\xe9rification de cl\xe9";
    },
    get$stickers() {
      return "Autocollants";
    },
    get$commandHint_ignore() {
      return "Ignorer l'identifiant Matrix indiqu\xe9";
    },
    get$commandHint_unignore() {
      return "Ne plus ignorer l'identifiant Matrix indiqu\xe9";
    },
    thereAreCountUsersBlocked$1(count) {
      return "Actuellement, il y a " + count + " utilisateurs/trices bloqu\xe9s.";
    },
    get$restricted() {
      return "Limit\xe9";
    },
    get$markAsUnread() {
      return "Marquer comme non lu";
    },
    userLevel$1(level) {
      return "" + level + " \u2014 Membre";
    },
    moderatorLevel$1(level) {
      return "" + level + " \u2014 Mod\xe9ration";
    },
    adminLevel$1(level) {
      return "" + level + " \u2014 Administration";
    },
    get$changeTheVisibilityOfChatHistory() {
      return "Modifier la visibilit\xe9 de l'historique de la discussion";
    },
    get$changeTheCanonicalRoomAlias() {
      return "Modifier l'adresse publique principale de la discussion";
    },
    get$sendRoomNotifications() {
      return "Send a @room notifications";
    },
    get$chatPermissionsDescription() {
      return "D\xe9finir quel niveau de pouvoir est n\xe9cessaires pour certaines actions dans cette discussion. Les niveaux de pouvoir 0, 50 et 100 repr\xe9sentent g\xe9n\xe9ralement les membres, la mod\xe9ration et l'administration, mais toute gradation est possible.";
    },
    updateInstalled$1(version) {
      return "\ud83c\udf89 La mise \xe0 niveau " + version + " est install\xe9e\u202f!";
    },
    get$sendCanceled() {
      return "Envoi annul\xe9";
    },
    get$doesNotSeemToBeAValidHomeserver() {
      return "Doesn't seem to be a compatible homeserver. Wrong URL?";
    },
    get$calculatingFileSize() {
      return "Calculating file size...";
    },
    get$prepareSendingAttachment() {
      return "Prepare sending attachment...";
    },
    get$sendingAttachment() {
      return "Sending attachment...";
    },
    sendingAttachmentCountOfCount$2(index, $length) {
      return "Sending attachment " + index + " of " + $length + "...";
    },
    serverLimitReached$1(seconds) {
      return "Server limit reached! Waiting " + seconds + " seconds...";
    },
    get$noticeChatBackupDeviceVerification() {
      return "Note: When you connect all your devices to the chat backup, they are automatically verified.";
    },
    get$continueText() {
      return "Continue";
    },
    get$blur(_) {
      return "Blur:";
    },
    get$opacity(_) {
      return "Opacity:";
    },
    get$setWallpaper() {
      return "Set wallpaper";
    },
    get$noContactInformationProvided() {
      return "Server does not provide any valid contact information";
    },
    get$contactServerAdmin() {
      return "Contact server admin";
    },
    get$contactServerSecurity() {
      return "Contact server security";
    },
    get$supportPage() {
      return "Support page";
    },
    get$serverInformation() {
      return "Server information:";
    },
    get$name(_) {
      return "Name";
    },
    get$version(_) {
      return "Version";
    },
    get$compress() {
      return "Compress";
    },
    get$boldText() {
      return "Bold text";
    },
    get$italicText() {
      return "Italic text";
    },
    get$strikeThrough() {
      return "Strikethrough";
    },
    get$pleaseFillOut() {
      return "Please fill out";
    },
    get$invalidUrl() {
      return "Invalid url";
    },
    get$addLink() {
      return "Add link";
    },
    get$unableToJoinChat() {
      return "Unable to join chat. Maybe the other party has already closed the conversation.";
    },
    get$previous() {
      return "Previous";
    },
    get$otherPartyNotLoggedIn() {
      return "The other party is currently not logged in and therefore cannot receive messages!";
    },
    get$open(_) {
      return "Open";
    },
    get$waitingForServer() {
      return "Waiting for server...";
    },
    get$newChatRequest() {
      return "\ud83d\udce9 New chat request";
    },
    get$contentNotificationSettings() {
      return "Content notification settings";
    },
    get$generalNotificationSettings() {
      return "General notification settings";
    },
    get$roomNotificationSettings() {
      return "Room notification settings";
    },
    get$userSpecificNotificationSettings() {
      return "User specific notification settings";
    },
    get$otherNotificationSettings() {
      return "Other notification settings";
    },
    get$notificationRuleContainsUserName() {
      return "Contains User Name";
    },
    get$notificationRuleContainsUserNameDescription() {
      return "Notifies the user when a message contains their username.";
    },
    get$notificationRuleMaster() {
      return "Mute all notifications";
    },
    get$notificationRuleMasterDescription() {
      return "Overrides all other rules and disables all notifications.";
    },
    get$notificationRuleSuppressNotices() {
      return "Suppress Automated Messages";
    },
    get$notificationRuleSuppressNoticesDescription() {
      return "Suppresses notifications from automated clients like bots.";
    },
    get$notificationRuleInviteForMe() {
      return "Invite for Me";
    },
    get$notificationRuleInviteForMeDescription() {
      return "Notifies the user when they are invited to a room.";
    },
    get$notificationRuleMemberEvent() {
      return "Member Event";
    },
    get$notificationRuleMemberEventDescription() {
      return "Suppresses notifications for membership events.";
    },
    get$notificationRuleIsUserMention() {
      return "User Mention";
    },
    get$notificationRuleIsUserMentionDescription() {
      return "Notifies the user when they are directly mentioned in a message.";
    },
    get$notificationRuleContainsDisplayName() {
      return "Contains Display Name";
    },
    get$notificationRuleContainsDisplayNameDescription() {
      return "Notifies the user when a message contains their display name.";
    },
    get$notificationRuleIsRoomMention() {
      return "Room Mention";
    },
    get$notificationRuleIsRoomMentionDescription() {
      return "Notifies the user when there is a room mention.";
    },
    get$notificationRuleRoomnotif() {
      return "Room Notification";
    },
    get$notificationRuleRoomnotifDescription() {
      return "Notifies the user when a message contains '@room'.";
    },
    get$notificationRuleTombstone() {
      return "Tombstone";
    },
    get$notificationRuleTombstoneDescription() {
      return "Notifies the user about room deactivation messages.";
    },
    get$notificationRuleReaction() {
      return "Reaction";
    },
    get$notificationRuleReactionDescription() {
      return "Suppresses notifications for reactions.";
    },
    get$notificationRuleRoomServerAcl() {
      return "Room Server ACL";
    },
    get$notificationRuleRoomServerAclDescription() {
      return "Suppresses notifications for room server access control lists (ACL).";
    },
    get$notificationRuleSuppressEdits() {
      return "Suppress Edits";
    },
    get$notificationRuleSuppressEditsDescription() {
      return "Suppresses notifications for edited messages.";
    },
    get$notificationRuleCall() {
      return "Call";
    },
    get$notificationRuleCallDescription() {
      return "Notifies the user about calls.";
    },
    get$notificationRuleEncryptedRoomOneToOne() {
      return "Encrypted Room One-to-One";
    },
    get$notificationRuleEncryptedRoomOneToOneDescription() {
      return "Notifies the user about messages in encrypted one-to-one rooms.";
    },
    get$notificationRuleRoomOneToOne() {
      return "Room One-to-One";
    },
    get$notificationRuleRoomOneToOneDescription() {
      return "Notifies the user about messages in one-to-one rooms.";
    },
    get$notificationRuleMessage() {
      return "Message";
    },
    get$notificationRuleMessageDescription() {
      return "Notifies the user about general messages.";
    },
    get$notificationRuleEncrypted() {
      return "Encrypted";
    },
    get$notificationRuleEncryptedDescription() {
      return "Notifies the user about messages in encrypted rooms.";
    },
    get$notificationRuleJitsi() {
      return "Jitsi";
    },
    get$notificationRuleJitsiDescription() {
      return "Notifies the user about Jitsi widget events.";
    },
    get$notificationRuleServerAcl() {
      return "Suppress Server ACL Events";
    },
    get$notificationRuleServerAclDescription() {
      return "Suppresses notifications for Server ACL events.";
    },
    unknownPushRule$1(rule) {
      return "Unknown push rule '" + rule + "'";
    },
    sentVoiceMessage$2(sender, duration) {
      return "\ud83c\udf99\ufe0f " + duration + " - Voice message from " + sender;
    },
    get$deletePushRuleCanNotBeUndone() {
      return "If you delete this notification setting, this can not be undone.";
    },
    get$more() {
      return "More";
    },
    get$shareKeysWith() {
      return "Share keys with...";
    },
    get$shareKeysWithDescription() {
      return "Which devices should be trusted so that they can read along your messages in encrypted chats?";
    },
    get$allDevices() {
      return "All devices";
    },
    get$crossVerifiedDevicesIfEnabled() {
      return "Cross verified devices if enabled";
    },
    get$crossVerifiedDevices() {
      return "Cross verified devices";
    },
    get$verifiedDevicesOnly() {
      return "Verified devices only";
    },
    get$optionalMessage() {
      return "(Optional) message...";
    },
    get$notSupportedOnThisDevice() {
      return "Not supported on this device";
    },
    get$enterNewChat() {
      return "Enter new chat";
    },
    get$approve() {
      return "Approve";
    },
    get$commandHint_logout() {
      return "Logout your current device";
    },
    get$commandHint_logoutall() {
      return "Logout all active devices";
    },
    get$customReaction() {
      return "Custom reaction";
    },
    writeAMessageLangCodes$2(l1, l2) {
      return "Type in " + l1 + " or " + l2 + "...";
    },
    get$holdForInfo() {
      return "Click and hold for word info.";
    },
    get$greenFeedback() {
      return "That's what I would put!";
    },
    get$yellowFeedback() {
      return "Hm, you can try that and see if it works! To use this word, just click it again.";
    },
    get$redFeedback() {
      return "I don't think that's right...";
    },
    get$itInstructionsTitle() {
      return "I can help you translate!";
    },
    get$itInstructionsBody() {
      return "You can click and hold choices for word info.";
    },
    get$gaTooltip() {
      return "L2 use with grammar assistance";
    },
    get$taTooltip() {
      return "L2 use with translation assistance";
    },
    get$interactiveTranslatorSliderHeader() {
      return "Interactive Translator";
    },
    get$interactiveGrammarSliderHeader() {
      return "Interactive Grammar Checker";
    },
    get$waTooltip() {
      return "L2 use without assistance";
    },
    get$noIdenticalLanguages() {
      return "Please choose different base and target languages";
    },
    get$joinWithClassCode() {
      return "Join course";
    },
    get$joinWithClassCodeHint() {
      return "Enter invite code";
    },
    get$languageLevelPreA1() {
      return "True Beginner (Pre A1)";
    },
    get$languageLevelA1() {
      return "Beginner (A1)";
    },
    get$languageLevelA2() {
      return "Elementary (A2)";
    },
    get$languageLevelB1() {
      return "Intermediate (B1)";
    },
    get$languageLevelB2() {
      return "Upper Intermediate (B2)";
    },
    get$languageLevelC1() {
      return "Advanced (C1)";
    },
    get$languageLevelC2() {
      return "Mastery (C2)";
    },
    get$changeTheNameOfTheClass() {
      return "Change the name";
    },
    get$changeTheNameOfTheChat() {
      return "Change the name of the chat";
    },
    get$sorryNoResults() {
      return "Sorry, no results.";
    },
    get$ignoreInThisText() {
      return "Ignore";
    },
    needsItMessage$1(targetLanguage) {
      return "Wait, that's not " + targetLanguage + "! Do you need help translating?";
    },
    get$countryInformation() {
      return "My country";
    },
    get$targetLanguage() {
      return "Target Language";
    },
    get$updateLanguage() {
      return "My languages";
    },
    get$whatLanguageYouWantToLearn() {
      return "What language do you want to learn?";
    },
    get$whatIsYourBaseLanguage() {
      return "What is your base language?";
    },
    get$saveChanges() {
      return "Save changes";
    },
    get$publicProfileTitle() {
      return "Allow my profile to be found in search";
    },
    get$publicProfileDesc() {
      return "By turning on, you enable other users to find your profile in the global search bar and send requests to chat. At this point, you can choose to accept or deny the request.";
    },
    get$errorDisableIT() {
      return "Translation assistance is turned off.";
    },
    get$errorDisableIGC() {
      return "Grammar assistance is turned off.";
    },
    get$errorDisableLanguageAssistance() {
      return "Translation assistance and grammar assistance are turned off.";
    },
    get$errorDisableITUserDesc() {
      return "Click here to update translation assistance settings";
    },
    get$errorDisableIGCUserDesc() {
      return "Click here to update grammar assistance settings";
    },
    get$errorDisableLanguageAssistanceUserDesc() {
      return "Click here to update translation assistance and grammar assistance settings";
    },
    get$errorDisableITClassDesc() {
      return "Translation assistance is turned off for the course that this chat is in.";
    },
    get$errorDisableIGCClassDesc() {
      return "Grammar assistance is turned off for the course that this chat is in.";
    },
    get$error405Title() {
      return "Languages not set";
    },
    get$error405Desc() {
      return "Please set your languages in Main Menu > Learning Settings.";
    },
    get$termsAndConditions() {
      return "Terms and Conditions";
    },
    get$andCertifyIAmAtLeast13YearsOfAge() {
      return " and certify I am at least 16 years of age.";
    },
    get$error502504Title() {
      return "Wow, there are a lot of students online!";
    },
    get$error502504Desc() {
      return "Translation and grammar tools may be slow or unavailable while the Pangea bots catch up.";
    },
    get$error404Title() {
      return "Translation error!";
    },
    get$error404Desc() {
      return "Pangea Bot isn't sure how to translate that...";
    },
    get$errorPleaseRefresh() {
      return "We're looking into it! Please reload and try again.";
    },
    get$connectedToStaging() {
      return "Connected to Staging";
    },
    get$learningSettings() {
      return "Learning settings";
    },
    get$participants() {
      return "Participants";
    },
    get$clickMessageTitle() {
      return "Need help?";
    },
    get$clickMessageBody() {
      return "Click a message for language tools like translation, play back and more!";
    },
    get$allDone() {
      return "All done!";
    },
    get$vocab() {
      return "Vocab";
    },
    get$subscribe(_) {
      return "Subscribe";
    },
    get$getAccess() {
      return "Subscribe now!";
    },
    get$subscriptionDesc() {
      return "Messaging is free! Subscribe to unlock interactive translation, grammar checking and learning analytics.";
    },
    get$subscriptionManagement() {
      return "Subscription Management";
    },
    get$currentSubscription() {
      return "Current Subscription";
    },
    get$cancelSubscription() {
      return "Cancel your subscription";
    },
    get$selectYourPlan() {
      return "Select Your Plan";
    },
    get$subsciptionPlatformTooltip() {
      return "Please login to your original device to manage your subscription plan";
    },
    get$subscriptionManagementUnavailable() {
      return "Subscription management not available";
    },
    get$paymentMethod() {
      return "Payment Method";
    },
    get$paymentHistory() {
      return "Payment History";
    },
    get$emptyChatDownloadWarning() {
      return "Cannot download empty chat";
    },
    get$toggleImmersionMode() {
      return "Immersion Mode";
    },
    get$toggleImmersionModeDesc() {
      return "When enabled, all messages are displayed in your target language. This setting is most useful in language exchanges.";
    },
    get$itToggleDescription() {
      return "This language learning tool will identify words in your base language and help you translate them to your target language. Though rare, the AI can make translation errors.";
    },
    get$igcToggleDescription() {
      return "This language learning tool will identify common spelling, grammar and punctuation errors in your message and suggest corrections. Though rare, the AI can make correction errors.";
    },
    get$originalMessage() {
      return "Original Message";
    },
    get$sentMessage() {
      return "Sent Message";
    },
    get$useType() {
      return "Use Type";
    },
    get$notAvailable() {
      return "Not Available";
    },
    get$taAndGaTooltip() {
      return "L2 use with translation assistance and grammar assistance";
    },
    get$definitionsToolName() {
      return "Word Definitions";
    },
    get$definitionsToolDescription() {
      return "When enabled, words underlined in blue can be clicked for definitions. Click messages to access definitions.";
    },
    get$welcomeBack() {
      return "Welcome back! If you were part of the 2023-2024 pilot, please contact us for your special pilot subscription. If you are a teacher who has (or whose institution has) purchased licenses for your class, contact us for your teacher subscription.";
    },
    get$downloadTxtFile() {
      return "Download Text File";
    },
    get$downloadCSVFile() {
      return "Download CSV File";
    },
    get$promotionalSubscriptionDesc() {
      return "You currently have a lifetime promotional subscription. Message support@pangea.chat for help changing your subscription.";
    },
    originalSubscriptionPlatform$1(purchasePlatform) {
      return "Subscription purchased through " + purchasePlatform;
    },
    get$oneWeekTrial() {
      return "One Week Trial";
    },
    get$downloadXLSXFile() {
      return "Download Excel File";
    },
    get$unkDisplayName() {
      return "Unknown";
    },
    get$wwCountryDisplayName() {
      return "World Wide";
    },
    get$afCountryDisplayName() {
      return "Afghanistan";
    },
    get$axCountryDisplayName() {
      return "Aland Islands";
    },
    get$alCountryDisplayName() {
      return "Albania";
    },
    get$dzCountryDisplayName() {
      return "Algeria";
    },
    get$asCountryDisplayName() {
      return "American Samoa";
    },
    get$adCountryDisplayName() {
      return "Andorra";
    },
    get$aoCountryDisplayName() {
      return "Angola";
    },
    get$aiCountryDisplayName() {
      return "Anguilla";
    },
    get$agCountryDisplayName() {
      return "Antigua and Barbuda";
    },
    get$arCountryDisplayName() {
      return "Argentina";
    },
    get$amCountryDisplayName() {
      return "Armenia";
    },
    get$awCountryDisplayName() {
      return "Aruba";
    },
    get$acCountryDisplayName() {
      return "Ascension Island";
    },
    get$auCountryDisplayName() {
      return "Australia";
    },
    get$atCountryDisplayName() {
      return "Austria";
    },
    get$azCountryDisplayName() {
      return "Azerbaijan";
    },
    get$bsCountryDisplayName() {
      return "Bahamas";
    },
    get$bhCountryDisplayName() {
      return "Bahrain";
    },
    get$bdCountryDisplayName() {
      return "Bangladesh";
    },
    get$bbCountryDisplayName() {
      return "Barbados";
    },
    get$byCountryDisplayName() {
      return "Belarus";
    },
    get$beCountryDisplayName() {
      return "Belgium";
    },
    get$bzCountryDisplayName() {
      return "Belize";
    },
    get$bjCountryDisplayName() {
      return "Benin";
    },
    get$bmCountryDisplayName() {
      return "Bermuda";
    },
    get$btCountryDisplayName() {
      return "Bhutan";
    },
    get$boCountryDisplayName() {
      return "Bolivia";
    },
    get$baCountryDisplayName() {
      return "Bosnia and Herzegovina";
    },
    get$bwCountryDisplayName() {
      return "Botswana";
    },
    get$brCountryDisplayName() {
      return "Brazil";
    },
    get$ioCountryDisplayName() {
      return "British Indian Ocean Territory";
    },
    get$vgCountryDisplayName() {
      return "British Virgin Islands";
    },
    get$bnCountryDisplayName() {
      return "Brunei";
    },
    get$bgCountryDisplayName() {
      return "Bulgaria";
    },
    get$bfCountryDisplayName() {
      return "Burkina Faso";
    },
    get$biCountryDisplayName() {
      return "Burundi";
    },
    get$khCountryDisplayName() {
      return "Cambodia";
    },
    get$cmCountryDisplayName() {
      return "Cameroon";
    },
    get$caCountryDisplayName() {
      return "Canada";
    },
    get$cvCountryDisplayName() {
      return "Cape Verde";
    },
    get$bqCountryDisplayName() {
      return "Caribbean Netherlands";
    },
    get$kyCountryDisplayName() {
      return "Cayman Islands";
    },
    get$cfCountryDisplayName() {
      return "Central African Republic";
    },
    get$tdCountryDisplayName() {
      return "Chad";
    },
    get$clCountryDisplayName() {
      return "Chile";
    },
    get$cnCountryDisplayName() {
      return "China";
    },
    get$cxCountryDisplayName() {
      return "Christmas Island";
    },
    get$ccCountryDisplayName() {
      return "Cocos [Keeling] Islands";
    },
    get$coCountryDisplayName() {
      return "Colombia";
    },
    get$kmCountryDisplayName() {
      return "Comoros";
    },
    get$cdCountryDisplayName() {
      return "Democratic Republic Congo";
    },
    get$cgCountryDisplayName() {
      return "Republic of Congo";
    },
    get$ckCountryDisplayName() {
      return "Cook Islands";
    },
    get$crCountryDisplayName() {
      return "Costa Rica";
    },
    get$ciCountryDisplayName() {
      return "C\xf4te d'Ivoire";
    },
    get$hrCountryDisplayName() {
      return "Croatia";
    },
    get$cuCountryDisplayName() {
      return "Cuba";
    },
    get$cwCountryDisplayName() {
      return "Cura\xe7ao";
    },
    get$cyCountryDisplayName() {
      return "Cyprus";
    },
    get$czCountryDisplayName() {
      return "Czech Republic";
    },
    get$dkCountryDisplayName() {
      return "Denmark";
    },
    get$djCountryDisplayName() {
      return "Djibouti";
    },
    get$dmCountryDisplayName() {
      return "Dominica";
    },
    get$doCountryDisplayName() {
      return "Dominican Republic";
    },
    get$tlCountryDisplayName() {
      return "East Timor";
    },
    get$ecCountryDisplayName() {
      return "Ecuador";
    },
    get$egCountryDisplayName() {
      return "Egypt";
    },
    get$svCountryDisplayName() {
      return "El Salvador";
    },
    get$gqCountryDisplayName() {
      return "Equatorial Guinea";
    },
    get$erCountryDisplayName() {
      return "Eritrea";
    },
    get$eeCountryDisplayName() {
      return "Estonia";
    },
    get$szCountryDisplayName() {
      return "Eswatini";
    },
    get$etCountryDisplayName() {
      return "Ethiopia";
    },
    get$fkCountryDisplayName() {
      return "Falkland Islands";
    },
    get$foCountryDisplayName() {
      return "Faroe Islands";
    },
    get$fjCountryDisplayName() {
      return "Fiji";
    },
    get$fiCountryDisplayName() {
      return "Finland";
    },
    get$frCountryDisplayName() {
      return "France";
    },
    get$gfCountryDisplayName() {
      return "French Guiana";
    },
    get$pfCountryDisplayName() {
      return "French Polynesia";
    },
    get$gaCountryDisplayName() {
      return "Gabon";
    },
    get$gmCountryDisplayName() {
      return "Gambia";
    },
    get$geCountryDisplayName() {
      return "Georgia";
    },
    get$deCountryDisplayName() {
      return "Germany";
    },
    get$ghCountryDisplayName() {
      return "Ghana";
    },
    get$giCountryDisplayName() {
      return "Gibraltar";
    },
    get$grCountryDisplayName() {
      return "Greece";
    },
    get$glCountryDisplayName() {
      return "Greenland";
    },
    get$gdCountryDisplayName() {
      return "Grenada";
    },
    get$gpCountryDisplayName() {
      return "Guadeloupe";
    },
    get$guCountryDisplayName() {
      return "Guam";
    },
    get$gtCountryDisplayName() {
      return "Guatemala";
    },
    get$ggCountryDisplayName() {
      return "Guernsey";
    },
    get$gnCountryDisplayName() {
      return "Guinea Conakry";
    },
    get$gwCountryDisplayName() {
      return "Guinea-Bissau";
    },
    get$gyCountryDisplayName() {
      return "Guyana";
    },
    get$htCountryDisplayName() {
      return "Haiti";
    },
    get$hmCountryDisplayName() {
      return "Heard Island and McDonald Islands";
    },
    get$hnCountryDisplayName() {
      return "Honduras";
    },
    get$hkCountryDisplayName() {
      return "Hong Kong";
    },
    get$huCountryDisplayName() {
      return "Hungary";
    },
    get$isCountryDisplayName() {
      return "Iceland";
    },
    get$inCountryDisplayName() {
      return "India";
    },
    get$idCountryDisplayName() {
      return "Indonesia";
    },
    get$irCountryDisplayName() {
      return "Iran";
    },
    get$iqCountryDisplayName() {
      return "Iraq";
    },
    get$ieCountryDisplayName() {
      return "Ireland";
    },
    get$imCountryDisplayName() {
      return "Isle of Man";
    },
    get$ilCountryDisplayName() {
      return "Israel";
    },
    get$itCountryDisplayName() {
      return "Italy";
    },
    get$jmCountryDisplayName() {
      return "Jamaica";
    },
    get$jpCountryDisplayName() {
      return "Japan";
    },
    get$jeCountryDisplayName() {
      return "Jersey";
    },
    get$joCountryDisplayName() {
      return "Jordan";
    },
    get$kzCountryDisplayName() {
      return "Kazakhstan";
    },
    get$keCountryDisplayName() {
      return "Kenya";
    },
    get$kiCountryDisplayName() {
      return "Kiribati";
    },
    get$xkCountryDisplayName() {
      return "Kosovo";
    },
    get$kwCountryDisplayName() {
      return "Kuwait";
    },
    get$kgCountryDisplayName() {
      return "Kyrgyzstan";
    },
    get$laCountryDisplayName() {
      return "Laos";
    },
    get$lvCountryDisplayName() {
      return "Latvia";
    },
    get$lbCountryDisplayName() {
      return "Lebanon";
    },
    get$lsCountryDisplayName() {
      return "Lesotho";
    },
    get$lrCountryDisplayName() {
      return "Liberia";
    },
    get$lyCountryDisplayName() {
      return "Libya";
    },
    get$liCountryDisplayName() {
      return "Liechtenstein";
    },
    get$ltCountryDisplayName() {
      return "Lithuania";
    },
    get$luCountryDisplayName() {
      return "Luxembourg";
    },
    get$moCountryDisplayName() {
      return "Macau";
    },
    get$mkCountryDisplayName() {
      return "Macedonia";
    },
    get$mgCountryDisplayName() {
      return "Madagascar";
    },
    get$mwCountryDisplayName() {
      return "Malawi";
    },
    get$myCountryDisplayName() {
      return "Malaysia";
    },
    get$mvCountryDisplayName() {
      return "Maldives";
    },
    get$mlCountryDisplayName() {
      return "Mali";
    },
    get$mtCountryDisplayName() {
      return "Malta";
    },
    get$mhCountryDisplayName() {
      return "Marshall Islands";
    },
    get$mqCountryDisplayName() {
      return "Martinique";
    },
    get$mrCountryDisplayName() {
      return "Mauritania";
    },
    get$muCountryDisplayName() {
      return "Mauritius";
    },
    get$ytCountryDisplayName() {
      return "Mayotte";
    },
    get$mxCountryDisplayName() {
      return "Mexico";
    },
    get$fmCountryDisplayName() {
      return "Micronesia";
    },
    get$mdCountryDisplayName() {
      return "Moldova";
    },
    get$mcCountryDisplayName() {
      return "Monaco";
    },
    get$mnCountryDisplayName() {
      return "Mongolia";
    },
    get$meCountryDisplayName() {
      return "Montenegro";
    },
    get$msCountryDisplayName() {
      return "Montserrat";
    },
    get$maCountryDisplayName() {
      return "Morocco";
    },
    get$mzCountryDisplayName() {
      return "Mozambique";
    },
    get$mmCountryDisplayName() {
      return "Myanmar (Burma)";
    },
    get$naCountryDisplayName() {
      return "Namibia";
    },
    get$nrCountryDisplayName() {
      return "Nauru";
    },
    get$npCountryDisplayName() {
      return "Nepal";
    },
    get$nlCountryDisplayName() {
      return "Netherlands";
    },
    get$ncCountryDisplayName() {
      return "New Caledonia";
    },
    get$nzCountryDisplayName() {
      return "New Zealand";
    },
    get$niCountryDisplayName() {
      return "Nicaragua";
    },
    get$neCountryDisplayName() {
      return "Niger";
    },
    get$ngCountryDisplayName() {
      return "Nigeria";
    },
    get$nuCountryDisplayName() {
      return "Niue";
    },
    get$nfCountryDisplayName() {
      return "Norfolk Island";
    },
    get$kpCountryDisplayName() {
      return "North Korea";
    },
    get$mpCountryDisplayName() {
      return "Northern Mariana Islands";
    },
    get$noCountryDisplayName() {
      return "Norway";
    },
    get$omCountryDisplayName() {
      return "Oman";
    },
    get$pkCountryDisplayName() {
      return "Pakistan";
    },
    get$pwCountryDisplayName() {
      return "Palau";
    },
    get$psCountryDisplayName() {
      return "Palestinian Territories";
    },
    get$paCountryDisplayName() {
      return "Panama";
    },
    get$pgCountryDisplayName() {
      return "Papua New Guinea";
    },
    get$pyCountryDisplayName() {
      return "Paraguay";
    },
    get$peCountryDisplayName() {
      return "Peru";
    },
    get$phCountryDisplayName() {
      return "Philippines";
    },
    get$plCountryDisplayName() {
      return "Poland";
    },
    get$ptCountryDisplayName() {
      return "Portugal";
    },
    get$prCountryDisplayName() {
      return "Puerto Rico";
    },
    get$qaCountryDisplayName() {
      return "Qatar";
    },
    get$reCountryDisplayName() {
      return "R\xe9union";
    },
    get$roCountryDisplayName() {
      return "Romania";
    },
    get$ruCountryDisplayName() {
      return "Russia";
    },
    get$rwCountryDisplayName() {
      return "Rwanda";
    },
    get$blCountryDisplayName() {
      return "Saint Barth\xe9lemy";
    },
    get$shCountryDisplayName() {
      return "Saint Helena";
    },
    get$knCountryDisplayName() {
      return "St. Kitts";
    },
    get$lcCountryDisplayName() {
      return "St. Lucia";
    },
    get$mfCountryDisplayName() {
      return "Saint Martin";
    },
    get$pmCountryDisplayName() {
      return "Saint Pierre and Miquelon";
    },
    get$vcCountryDisplayName() {
      return "St. Vincent";
    },
    get$wsCountryDisplayName() {
      return "Samoa";
    },
    get$smCountryDisplayName() {
      return "San Marino";
    },
    get$stCountryDisplayName() {
      return "S\xe3o Tom\xe9 and Pr\xedncipe";
    },
    get$saCountryDisplayName() {
      return "Saudi Arabia";
    },
    get$snCountryDisplayName() {
      return "Senegal";
    },
    get$rsCountryDisplayName() {
      return "Serbia";
    },
    get$scCountryDisplayName() {
      return "Seychelles";
    },
    get$slCountryDisplayName() {
      return "Sierra Leone";
    },
    get$sgCountryDisplayName() {
      return "Singapore";
    },
    get$sxCountryDisplayName() {
      return "Sint Maarten";
    },
    get$skCountryDisplayName() {
      return "Slovakia";
    },
    get$siCountryDisplayName() {
      return "Slovenia";
    },
    get$sbCountryDisplayName() {
      return "Solomon Islands";
    },
    get$soCountryDisplayName() {
      return "Somalia";
    },
    get$zaCountryDisplayName() {
      return "South Africa";
    },
    get$gsCountryDisplayName() {
      return "South Georgia and the South Sandwich Islands";
    },
    get$krCountryDisplayName() {
      return "South Korea";
    },
    get$ssCountryDisplayName() {
      return "South Sudan";
    },
    get$esCountryDisplayName() {
      return "Spain";
    },
    get$lkCountryDisplayName() {
      return "Sri Lanka";
    },
    get$sdCountryDisplayName() {
      return "Sudan";
    },
    get$srCountryDisplayName() {
      return "Suriname";
    },
    get$sjCountryDisplayName() {
      return "Svalbard and Jan Mayen";
    },
    get$seCountryDisplayName() {
      return "Sweden";
    },
    get$chCountryDisplayName() {
      return "Switzerland";
    },
    get$syCountryDisplayName() {
      return "Syria";
    },
    get$twCountryDisplayName() {
      return "Taiwan";
    },
    get$tjCountryDisplayName() {
      return "Tajikistan";
    },
    get$tzCountryDisplayName() {
      return "Tanzania";
    },
    get$thCountryDisplayName() {
      return "Thailand";
    },
    get$tgCountryDisplayName() {
      return "Togo";
    },
    get$tkCountryDisplayName() {
      return "Tokelau";
    },
    get$toCountryDisplayName() {
      return "Tonga";
    },
    get$ttCountryDisplayName() {
      return "Trinidad/Tobago";
    },
    get$tnCountryDisplayName() {
      return "Tunisia";
    },
    get$trCountryDisplayName() {
      return "Turkey";
    },
    get$tmCountryDisplayName() {
      return "Turkmenistan";
    },
    get$tcCountryDisplayName() {
      return "Turks and Caicos Islands";
    },
    get$tvCountryDisplayName() {
      return "Tuvalu";
    },
    get$viCountryDisplayName() {
      return "U.S. Virgin Islands";
    },
    get$ugCountryDisplayName() {
      return "Uganda";
    },
    get$uaCountryDisplayName() {
      return "Ukraine";
    },
    get$aeCountryDisplayName() {
      return "United Arab Emirates";
    },
    get$gbCountryDisplayName() {
      return "United Kingdom";
    },
    get$usCountryDisplayName() {
      return "United States";
    },
    get$uyCountryDisplayName() {
      return "Uruguay";
    },
    get$uzCountryDisplayName() {
      return "Uzbekistan";
    },
    get$vuCountryDisplayName() {
      return "Vanuatu";
    },
    get$vaCountryDisplayName() {
      return "Vatican City";
    },
    get$veCountryDisplayName() {
      return "Venezuela";
    },
    get$vnCountryDisplayName() {
      return "Vietnam";
    },
    get$wfCountryDisplayName() {
      return "Wallis and Futuna";
    },
    get$ehCountryDisplayName() {
      return "Western Sahara";
    },
    get$yeCountryDisplayName() {
      return "Yemen";
    },
    get$zmCountryDisplayName() {
      return "Zambia";
    },
    get$zwCountryDisplayName() {
      return "Zimbabwe";
    },
    get$pay() {
      return "Pay";
    },
    invitedToSpace$2(space, user) {
      return user + " has invited you to join a course: " + space + "! Do you wish to accept?";
    },
    get$youreInvited() {
      return "\ud83d\udce9 You're invited!";
    },
    invitedToChat$2($name, user) {
      return user + " has invited you to join a chat: " + $name + "! Do you wish to accept?";
    },
    get$monthlySubscription() {
      return "Monthly";
    },
    get$yearlySubscription() {
      return "Yearly";
    },
    get$defaultSubscription() {
      return "Pangea Chat Subscription";
    },
    get$freeTrial() {
      return "Free Trial";
    },
    get$noDataFound() {
      return "No data found";
    },
    get$blurMeansTranslateTitle() {
      return "Why is the message blurred?";
    },
    get$blurMeansTranslateBody() {
      return "While Immersion Mode is on, messages that are sent in your base language will be blurred while Pangea Bot translates them to your target language. Immersion Mode can be toggled in individual and course settings.";
    },
    get$bestCorrectionFeedback() {
      return "That's correct!";
    },
    get$distractorFeedback() {
      return "That's not quite right.";
    },
    get$bestAnswerFeedback() {
      return "That's correct!";
    },
    get$definitionDefaultPrompt() {
      return "What does this word mean?";
    },
    get$practiceDefaultPrompt() {
      return "What is the best answer?";
    },
    get$correctionDefaultPrompt() {
      return "What is the best replacement?";
    },
    get$reportToTeacher() {
      return "Who do you want to report this message to?";
    },
    reportMessageTitle$3(reportingUserId, reportedUserId, roomName) {
      return reportingUserId + " has reported a message from " + reportedUserId + " in the chat " + roomName;
    },
    reportMessageBody$2(reportedMessage, reason) {
      return "Message: " + reportedMessage + "\nReason: " + reason;
    },
    get$noTeachersFound() {
      return "No teachers found to report to";
    },
    trialExpiration$1(expiration) {
      return "Your free trial expires on " + expiration;
    },
    get$freeTrialDesc() {
      return "New users recieve a one week free trial of Pangea Chat";
    },
    get$activateTrial() {
      return "Free 7-Day Trial";
    },
    get$successfullySubscribed() {
      return "You have successfully subscribed!";
    },
    get$clickToManageSubscription() {
      return "Click here to manage your subscription.";
    },
    pleaseChooseAtLeastChars$1(min) {
      return "Please choose at least " + min + " characters.";
    },
    get$pleaseEnterValidEmail() {
      return "Please enter a valid email address.";
    },
    get$pleaseChooseAUsername() {
      return "Please choose a username";
    },
    get$listen() {
      return "Listen";
    },
    get$trialPeriodExpired() {
      return "Your trial period has expired";
    },
    get$subscribedToUnlockTools() {
      return "Subscribe to unlock interactive translation and grammar checking, audio playback, personalized practice activities, and learning analytics!";
    },
    get$translationTooltip() {
      return "Translate";
    },
    get$speechToTextTooltip() {
      return "Transcript";
    },
    get$kickBotWarning() {
      return "Kicking Pangea Bot will remove the conversation bot from this chat.";
    },
    get$refresh(_) {
      return "Refresh";
    },
    get$botConfig() {
      return "Bot and activity settings";
    },
    get$botConfigNoPermissionTitle() {
      return "No permission";
    },
    get$botConfigNoPermissionMessage() {
      return "Contact room admin to change bot configuration";
    },
    get$conversationBotStatus() {
      return "Invite bot";
    },
    get$updatePhoneOS() {
      return "You may need to update your device's OS version.";
    },
    get$autoIGCToolName() {
      return "Run Pangea writing assistance automatically";
    },
    get$autoIGCToolDescription() {
      return "Automatically run Pangea Chat grammar and translation writing assistance before sending my message.";
    },
    get$tooltipInstructionsTitle() {
      return "Not sure what that does?";
    },
    get$tooltipInstructionsBrowserBody() {
      return "Hover over items to view tooltips.";
    },
    get$chatCapacity() {
      return "Chat capacity";
    },
    get$roomFull() {
      return "This room is already at capacity.";
    },
    get$chatCapacityHasBeenChanged() {
      return "Chat capacity changed";
    },
    chatCapacitySetTooLow$1(count) {
      return "Chat capacity must be at least " + count + ".";
    },
    get$chatCapacityExplanation() {
      return "Chat capacity limits the number of members allowed in a chat.";
    },
    get$enterNumber() {
      return "Please enter a whole number value.";
    },
    get$buildTranslation() {
      return "Build your translation from the choices above";
    },
    get$practice() {
      return "Practice";
    },
    get$noLanguagesSet() {
      return "No languages set";
    },
    get$speechToTextBody() {
      return "For voice messages, you can see a transcript as well as the speaker's Words Per Minute score.";
    },
    get$versionNotFound() {
      return "Version Not Found";
    },
    get$fetchingVersion() {
      return "Fetching version...";
    },
    get$versionFetchError() {
      return "Error fetching version";
    },
    versionText$2(version, buildNumber) {
      return "Version: " + version + "+" + buildNumber;
    },
    get$l1TranslationBody() {
      return "Messages in your base language will not be translated.";
    },
    get$deleteSubscriptionWarningTitle() {
      return "You have an active subscription";
    },
    get$deleteSubscriptionWarningBody() {
      return "Deleting your account will not automatically cancel your subscription.";
    },
    get$manageSubscription() {
      return "Manage Subscription";
    },
    get$error520Title() {
      return "Please try again.";
    },
    get$error520Desc() {
      return "Sorry, we could not understand your message...";
    },
    get$level(_) {
      return "Level";
    },
    get$translationChoicesBody() {
      return "Click and hold an option for a hint.";
    },
    get$grammar() {
      return "Grammar";
    },
    get$contactHasBeenInvitedToTheChat() {
      return "Contact has been invited to the chat";
    },
    get$inviteChat() {
      return "\ud83d\udce8 Invite chat";
    },
    get$chatName() {
      return "Chat name";
    },
    get$clickTheWordAgainToDeselect() {
      return "Click the selected word to deselect it.";
    },
    get$l2SupportNa() {
      return "Not Available";
    },
    get$l2SupportAlpha() {
      return "Alpha";
    },
    get$l2SupportBeta() {
      return "Beta";
    },
    get$l2SupportFull() {
      return "Full";
    },
    get$missingVoiceTitle() {
      return "Missing voice";
    },
    get$voiceNotAvailable() {
      return "You don't have a voice installed for this language.";
    },
    get$playAudio() {
      return "Play";
    },
    get$stop(_) {
      return "Stop";
    },
    get$grammarCopyPOSsconj() {
      return "Subordinating Conjunction";
    },
    get$grammarCopyPOSnum() {
      return "Number";
    },
    get$grammarCopyPOSverb() {
      return "Verb";
    },
    get$grammarCopyPOSaffix() {
      return "Affix";
    },
    get$grammarCopyPOSpart() {
      return "Particle";
    },
    get$grammarCopyPOSadj() {
      return "Adjective";
    },
    get$grammarCopyPOScconj() {
      return "Coordinating Conjunction";
    },
    get$grammarCopyPOSpunct() {
      return "Punctuation";
    },
    get$grammarCopyPOSadv() {
      return "Adverb";
    },
    get$grammarCopyPOSaux() {
      return "Auxiliary";
    },
    get$grammarCopyPOSspace() {
      return "Space";
    },
    get$grammarCopyPOSsym() {
      return "Symbol";
    },
    get$grammarCopyPOSdet() {
      return "Determiner";
    },
    get$grammarCopyPOSpron() {
      return "Pronoun";
    },
    get$grammarCopyPOSadp() {
      return "Adposition";
    },
    get$grammarCopyPOSpropn() {
      return "Proper Noun";
    },
    get$grammarCopyPOSnoun() {
      return "Noun";
    },
    get$grammarCopyPOSintj() {
      return "Interjection";
    },
    get$grammarCopyPOSx() {
      return "Other";
    },
    get$grammarCopyGENDERfem() {
      return "Feminine";
    },
    get$grammarCopyPERSON2() {
      return "Second Person";
    },
    get$grammarCopyMOODimp() {
      return "Imperative";
    },
    get$grammarCopyPUNCTTYPEqest() {
      return "Question";
    },
    get$grammarCopyASPECTperf() {
      return "Perfect";
    },
    get$grammarCopyCASEaccnom() {
      return "Accusative, Nominative";
    },
    get$grammarCopyCASEobl() {
      return "Oblique";
    },
    get$grammarCopyVOICEact() {
      return "Active";
    },
    get$grammarCopyPUNCTTYPEbrck() {
      return "Bracket";
    },
    get$grammarCopyNOUNTYPEart() {
      return "Article";
    },
    get$grammarCopyNUMBERsing() {
      return "Singular";
    },
    get$grammarCopyGENDERmasc() {
      return "Masculine";
    },
    get$grammarCopyVERBTYPEmod() {
      return "Modal";
    },
    get$grammarCopyADVTYPEadverbial() {
      return "Adverbial";
    },
    get$grammarCopyTENSEperi() {
      return "Periphrastic";
    },
    get$grammarCopyNUMFORMdigit() {
      return "Digit";
    },
    get$grammarCopyNOUNTYPEnot_proper() {
      return "Not Proper";
    },
    get$grammarCopyNUMTYPEcard() {
      return "Cardinal";
    },
    get$grammarCopyNOUNTYPEprop() {
      return "Proper";
    },
    get$grammarCopyPUNCTTYPEdash() {
      return "Dash";
    },
    get$grammarCopyPUNCTTYPEyes() {
      return "Yes";
    },
    get$grammarCopyPUNCTTYPEsemi() {
      return "Semicolon";
    },
    get$grammarCopyPUNCTTYPEcomm() {
      return "Comma";
    },
    get$grammarCopyMOODcnd() {
      return "Conditional";
    },
    get$grammarCopyCASEacc() {
      return "Accusative";
    },
    get$grammarCopyPARTTYPEpart() {
      return "Partitive";
    },
    get$grammarCopyTENSEpast() {
      return "Past";
    },
    get$grammarCopyDEGREEsup() {
      return "Superlative";
    },
    get$grammarCopyPUNCTTYPEcolo() {
      return "Colon";
    },
    get$grammarCopyPERSON3() {
      return "Third Person";
    },
    get$grammarCopyNUMBERplur() {
      return "Plural";
    },
    get$grammarCopyPRONTYPEnpr() {
      return "Proper Noun";
    },
    get$grammarCopyPRONTYPEinterrogative() {
      return "Interrogative";
    },
    get$grammarCopyPOLITEinfm() {
      return "Informal";
    },
    get$grammarCopyADVTYPEtim() {
      return "Time";
    },
    get$grammarCopyPOLARITYneg() {
      return "Negative";
    },
    get$grammarCopyNUMTYPEtot() {
      return "Total";
    },
    get$grammarCopyADVTYPEadnomial() {
      return "Adnominal";
    },
    get$grammarCopyASPECTprog() {
      return "Progressive";
    },
    get$grammarCopyMOODsub() {
      return "Subjunctive";
    },
    get$grammarCopyVERBFORMcomplementive() {
      return "Complementive";
    },
    get$grammarCopyCASEnom() {
      return "Nominative";
    },
    get$grammarCopyTENSEfut() {
      return "Future";
    },
    get$grammarCopyCASEdat() {
      return "Dative";
    },
    get$grammarCopyTENSEpres() {
      return "Present";
    },
    get$grammarCopyGENDERneut() {
      return "Neuter";
    },
    get$grammarCopyPRONTYPErel() {
      return "Relative";
    },
    get$grammarCopyVERBFORMfinalEnding() {
      return "Final Ending";
    },
    get$grammarCopyPRONTYPEdem() {
      return "Demonstrative";
    },
    get$grammarCopyPREPCASEpre() {
      return "Prepositional";
    },
    get$grammarCopyVERBFORMfin() {
      return "Finite";
    },
    get$grammarCopyDEGREEpos() {
      return "Positive";
    },
    get$grammarCopyPUNCTTYPEquot() {
      return "Quotation";
    },
    get$grammarCopyVERBFORMger() {
      return "Gerund";
    },
    get$grammarCopyVOICEpass() {
      return "Passive";
    },
    get$grammarCopyCASEgen() {
      return "Genitive";
    },
    get$grammarCopyTENSEprs() {
      return "Present";
    },
    get$grammarCopyDEFINITEdef() {
      return "Definite";
    },
    get$grammarCopyNUMTYPEord() {
      return "Ordinal";
    },
    get$grammarCopyCASEins() {
      return "Instrumental";
    },
    get$grammarCopyVERBFORMinf() {
      return "Infinitive";
    },
    get$grammarCopyVERBFORMaux() {
      return "Auxiliary";
    },
    get$grammarCopyNUMFORMlong() {
      return "Long";
    },
    get$grammarCopyCASEloc() {
      return "Locative";
    },
    get$grammarCopyMOODind() {
      return "Indicative";
    },
    get$grammarCopyDEGREEcmp() {
      return "Comparative";
    },
    get$grammarCopyCASErelativeCase() {
      return "Relative";
    },
    get$grammarCopyPUNCTTYPEexcl() {
      return "Exclamative";
    },
    get$grammarCopyPERSON1() {
      return "First Person";
    },
    get$grammarCopyPUNCTSIDEini() {
      return "Initial";
    },
    get$grammarCopyGENDERperson() {
      return "Person";
    },
    get$grammarCopyFOREIGNyes() {
      return "Foreign";
    },
    get$grammarCopyVOICEvoice() {
      return "Voice";
    },
    get$grammarCopyVERBTYPEverbType() {
      return "Verb";
    },
    get$grammarCopyPOSSpass() {
      return "Possessive";
    },
    get$grammarCopyPREPCASEprepCase() {
      return "Prepositional";
    },
    get$grammarCopyNUMTYPEnumType() {
      return "Numeral";
    },
    get$grammarCopyNOUNTYPEnounType() {
      return "Noun";
    },
    get$grammarCopyREFLEXreflex() {
      return "Reflexive";
    },
    get$grammarCopyPRONTYPEpronType() {
      return "Pronoun";
    },
    get$grammarCopyPUNCTSIDEpunctSide() {
      return "Punctuation Side";
    },
    get$grammarCopyVERBFORMverbForm() {
      return "Verb";
    },
    get$grammarCopyGENDERgender() {
      return "Gender";
    },
    get$grammarCopyMOODmood() {
      return "Mood";
    },
    get$grammarCopyASPECTaspect() {
      return "Aspect";
    },
    get$grammarCopyPUNCTTYPEpunctType() {
      return "Punctuation";
    },
    get$grammarCopyTENSEtense() {
      return "Tense";
    },
    get$grammarCopyDEGREEdegree() {
      return "Degree";
    },
    get$grammarCopyPOLITEpolite() {
      return "Politeness";
    },
    get$grammarCopyADVTYPEadvType() {
      return "Adverb";
    },
    get$grammarCopyNUMFORMnumber() {
      return "Number";
    },
    get$grammarCopyCONJTYPEconjType() {
      return "Conjunction";
    },
    get$grammarCopyPOLARITYpolarity() {
      return "Polarity";
    },
    get$grammarCopyCASEcase() {
      return "Case";
    },
    get$grammarCopyDEFINITEdefinite() {
      return "Definiteness";
    },
    get$grammarCopyNUMFORMnumForm() {
      return "Numeral";
    },
    get$grammarCopyPRONTYPEadn() {
      return "Adnominal";
    },
    get$grammarCopyVOCvoc() {
      return "Vocative";
    },
    get$grammarCopyCMPLcmpl() {
      return "Complementizer";
    },
    get$grammarCopyADVadv() {
      return "Adverbial";
    },
    get$grammarCopyMOODjus() {
      return "Jussive";
    },
    get$grammarCopyGENDERcom() {
      return "Common";
    },
    get$grammarCopyREFLEXrflx() {
      return "Reflexive";
    },
    get$grammarCopyPARTTYPEpar() {
      return "Partitive";
    },
    get$grammarCopySPCspc() {
      return "Specific";
    },
    get$grammarCopyTENSEpqp() {
      return "Pluperfect";
    },
    get$grammarCopyREFLEXref() {
      return "Reflexive";
    },
    get$grammarCopyPUNCTTYPEnshrt() {
      return "Short";
    },
    get$grammarCopyNUMBERdual() {
      return "Dual";
    },
    get$grammarCopyNUMFORMlng() {
      return "Long";
    },
    get$grammarCopyVOICEmid() {
      return "Middle";
    },
    get$grammarCopyINTRELintRel() {
      return "Interrogative, Relative";
    },
    get$grammarCopyINTint() {
      return "Interrogative";
    },
    get$grammarCopyVOICEcaus() {
      return "Causative";
    },
    get$grammarCopyUnknown() {
      return "Unknown";
    },
    get$grammarCopyEVIDENTevident() {
      return "Evidentiality";
    },
    get$grammarCopyNUMFORMnumberPsor() {
      return "Possessor's Number";
    },
    get$grammarCopyASPECThab() {
      return "Habitual";
    },
    get$grammarCopyCASEabl() {
      return "Ablative";
    },
    get$grammarCopyCASEall() {
      return "Allative";
    },
    get$grammarCopyCASEess() {
      return "Essive";
    },
    get$grammarCopyCASEtra() {
      return "Translative";
    },
    get$grammarCopyCASEequ() {
      return "Equative";
    },
    get$grammarCopyCASEdis() {
      return "Distributive";
    },
    get$grammarCopyCASEabs() {
      return "Absolutive";
    },
    get$grammarCopyCASEerg() {
      return "Ergative";
    },
    get$grammarCopyCASEcau() {
      return "Causal";
    },
    get$grammarCopyCASEben() {
      return "Benefactive";
    },
    get$grammarCopyCASEtem() {
      return "Temporal";
    },
    get$grammarCopyCONJTYPEcoord() {
      return "Coordinating";
    },
    get$grammarCopyDEFINITEcons() {
      return "Construct State";
    },
    get$grammarCopyDEGREEabs() {
      return "Absolute Degree";
    },
    get$grammarCopyEVIDENTfh() {
      return "Factual Evidentiality";
    },
    get$grammarCopyEVIDENTnfh() {
      return "Non-factual Evidentiality";
    },
    get$grammarCopyMOODopt() {
      return "Optative";
    },
    get$grammarCopyMOODadm() {
      return "Admirative";
    },
    get$grammarCopyMOODdes() {
      return "Desiderative";
    },
    get$grammarCopyMOODnec() {
      return "Necessitative";
    },
    get$grammarCopyMOODpot() {
      return "Potential";
    },
    get$grammarCopyMOODprp() {
      return "Propositive";
    },
    get$grammarCopyMOODqot() {
      return "Quotative";
    },
    get$grammarCopyNUMFORMword() {
      return "Word Form";
    },
    get$grammarCopyNUMFORMroman() {
      return "Roman Numeral";
    },
    get$grammarCopyNUMFORMletter() {
      return "Letter Form";
    },
    get$grammarCopyNUMTYPEmult() {
      return "Multiplicative";
    },
    get$grammarCopyNUMTYPEfrac() {
      return "Fractional";
    },
    get$grammarCopyNUMTYPEsets() {
      return "Set";
    },
    get$grammarCopyNUMTYPErange() {
      return "Range";
    },
    get$grammarCopyNUMTYPEdist() {
      return "Distributive";
    },
    get$grammarCopyNUMBERtri() {
      return "Trial";
    },
    get$grammarCopyNUMBERpauc() {
      return "Paucal";
    },
    get$grammarCopyNUMBERgrpa() {
      return "Greater Paucal";
    },
    get$grammarCopyNUMBERgrpl() {
      return "Greater Plural";
    },
    get$grammarCopyNUMBERinv() {
      return "Inverse";
    },
    get$grammarCopyPERSON0() {
      return "Zero";
    },
    get$grammarCopyPERSON4() {
      return "Fourth";
    },
    get$grammarCopyPOLITEform() {
      return "Formal";
    },
    get$grammarCopyPOLITEelev() {
      return "Elevated";
    },
    get$grammarCopyPOLITEhumb() {
      return "Humble";
    },
    get$grammarCopyPRONTYPEemp() {
      return "Emphatic";
    },
    get$grammarCopyPRONTYPEexc() {
      return "Exclamative";
    },
    get$grammarCopyPRONTYPErcp() {
      return "Reciprocal";
    },
    get$grammarCopyPRONTYPEintRelPronType() {
      return "Interrogative-Relative";
    },
    get$grammarCopyTENSEaor() {
      return "Aorist";
    },
    get$grammarCopyTENSEeps() {
      return "Epistemic";
    },
    get$grammarCopyTENSEprosp() {
      return "Prospective";
    },
    get$grammarCopyVERBFORMpart() {
      return "Participle";
    },
    get$grammarCopyVERBFORMconv() {
      return "Converb";
    },
    get$grammarCopyVERBFORMvnoun() {
      return "Verbal Noun";
    },
    get$grammarCopyVOICEantip() {
      return "Antipassive";
    },
    get$grammarCopyVOICEcauVoice() {
      return "Causative";
    },
    get$grammarCopyVOICedir() {
      return "Direct";
    },
    get$grammarCopyVOICEinvVoice() {
      return "Inverse";
    },
    get$grammarCopyVOICErcpVoice() {
      return "Reciprocal";
    },
    get$grammarCopyPOS() {
      return "Part of Speech";
    },
    get$grammarCopyGENDER() {
      return "Gender";
    },
    get$grammarCopyPERSON() {
      return "Person";
    },
    get$grammarCopyMOOD() {
      return "Mood";
    },
    get$grammarCopyPUNCTTYPE() {
      return "Punctuation Type";
    },
    get$grammarCopyASPECT() {
      return "Aspect";
    },
    get$grammarCopyCASE() {
      return "Case";
    },
    get$grammarCopyVOICE() {
      return "Voice";
    },
    get$grammarCopyNOUNTYPE() {
      return "Noun Type";
    },
    get$grammarCopyVERBTYPE() {
      return "Verb Type";
    },
    get$grammarCopyADVTYPE() {
      return "Adverb Type";
    },
    get$grammarCopyNUMFORM() {
      return "Numeral Form";
    },
    get$grammarCopyNUMTYPE() {
      return "Numeral Type";
    },
    get$grammarCopyNUMBER() {
      return "Number";
    },
    get$grammarCopyDEFINITE() {
      return "Definiteness";
    },
    get$grammarCopyDEGREE() {
      return "Degree";
    },
    get$grammarCopyEVIDENT() {
      return "Evidentiality";
    },
    get$grammarCopyFOREIGN() {
      return "Foreign";
    },
    get$grammarCopyPOLARITY() {
      return "Polarity";
    },
    get$grammarCopyPOLITE() {
      return "Politeness";
    },
    get$grammarCopyPREPCASE() {
      return "Prepositional Case";
    },
    get$grammarCopyPRONTYPE() {
      return "Pronoun Type";
    },
    get$grammarCopyPUNCTSIDE() {
      return "Punctuation Side";
    },
    get$grammarCopyREFLEX() {
      return "Reflexive";
    },
    get$grammarCopyTENSE() {
      return "Tense";
    },
    get$grammarCopyVERBFORM() {
      return "Verb Form";
    },
    get$grammarCopyCONJTYPE() {
      return "Conjunction Type";
    },
    get$grammarCopyUNKNOWN() {
      return "Unknown";
    },
    get$grammarCopyNUMBERPSOR() {
      return "Possessor's Number";
    },
    get$grammarCopyPOSS() {
      return "Possessive";
    },
    get$grammarCopyASPECTimp() {
      return "Imperfective Aspect";
    },
    get$grammarCopyCASEvoc() {
      return "Vocative";
    },
    get$grammarCopyCASEcom() {
      return "Comitative";
    },
    get$grammarCopyCASEpar() {
      return "Partitive";
    },
    get$grammarCopyCASEadv() {
      return "Adverbial";
    },
    get$grammarCopyCASEref() {
      return "Referential";
    },
    get$grammarCopyCASErel() {
      return "Relative";
    },
    get$grammarCopyCASEsub() {
      return "Subessive";
    },
    get$grammarCopyCASEsup() {
      return "Superessive";
    },
    get$grammarCopyCASEaccdat() {
      return "Accusative-Dative";
    },
    get$grammarCopyCASEpre() {
      return "Prepositional";
    },
    get$grammarCopyCONJTYPEsub() {
      return "Subordinating";
    },
    get$grammarCopyCONJTYPEcmp() {
      return "Comparative";
    },
    get$grammarCopyDEFINITEind() {
      return "Indefinite";
    },
    get$grammarCopyMOODint() {
      return "Interrogative Mood";
    },
    get$grammarCopyNOUNTYPEcomm() {
      return "Common Noun";
    },
    get$grammarCopyNUMBERPSORsing() {
      return "Possessor's Singular";
    },
    get$grammarCopyNUMBERPSORplur() {
      return "Possessor's Plural";
    },
    get$grammarCopyNUMBERPSORdual() {
      return "Possessor's Dual";
    },
    get$grammarCopyPOLARITYpos() {
      return "Positive Polarity";
    },
    get$grammarCopyPOSSyes() {
      return "Possessive";
    },
    get$grammarCopyPREPCASEnpr() {
      return "Non-prepositional";
    },
    get$grammarCopyPRONTYPEprs() {
      return "Personal";
    },
    get$grammarCopyPRONTYPEint() {
      return "Interrogative";
    },
    get$grammarCopyPRONTYPEtot() {
      return "Total";
    },
    get$grammarCopyPRONTYPEneg() {
      return "Negative";
    },
    get$grammarCopyPRONTYPEart() {
      return "Article";
    },
    get$grammarCopyPRONTYPEind() {
      return "Indefinite";
    },
    get$grammarCopyPRONTYPEintrel() {
      return "Interrogative-Relative";
    },
    get$grammarCopyPUNCTSIDEfin() {
      return "Final Punctuation";
    },
    get$grammarCopyPUNCTTYPEperi() {
      return "Period";
    },
    get$grammarCopyREFLEXyes() {
      return "Reflexive";
    },
    get$grammarCopyTENSEimp() {
      return "Imperfect";
    },
    get$grammarCopyVERBFORMsup() {
      return "Supine";
    },
    get$grammarCopyVERBFORMadn() {
      return "Adnominal";
    },
    get$grammarCopyVERBFORMlng() {
      return "Long";
    },
    get$grammarCopyVERBFORMshrt() {
      return "Short";
    },
    get$grammarCopyVERBTYPEcaus() {
      return "Causative Verb";
    },
    get$grammarCopyVOICEcau() {
      return "Causative";
    },
    get$grammarCopyVOICEdir() {
      return "Direct";
    },
    get$grammarCopyVOICEinv() {
      return "Inverse";
    },
    get$grammarCopyVOICErcp() {
      return "Reciprocal";
    },
    get$enterLanguageLevel() {
      return "Please enter a language level";
    },
    get$other() {
      return "Other";
    },
    levelShort$1(level) {
      return "LVL " + level;
    },
    get$clickBestOption() {
      return "Choose the best options to translate your message!";
    },
    get$completeActivitiesToUnlock() {
      return "Complete at least one activity to unlock the translation!";
    },
    get$downloadGroupText() {
      return "Download group text";
    },
    get$notificationsOn() {
      return "Notifications on";
    },
    get$notificationsOff() {
      return "Notifications off";
    },
    get$createChatAndInviteUsers() {
      return "Create chat and invite users";
    },
    get$updatedNewSpaceDescription() {
      return "Courses allow you to consolidate your chats and build private or public communities.";
    },
    get$joinWithCode() {
      return "Join with code";
    },
    get$updateNow() {
      return "Update Now";
    },
    get$updateLater() {
      return "Later";
    },
    get$constructUseWaDesc() {
      return "Used without help";
    },
    get$constructUseGaDesc() {
      return "Grammar assistance";
    },
    get$constructUseTaDesc() {
      return "Translation assistance";
    },
    get$constructUseUnkDesc() {
      return "Unknown";
    },
    get$constructUseCorITDesc() {
      return "Correct in translation";
    },
    get$constructUseIgnITDesc() {
      return "Ignored in translation";
    },
    get$constructUseIncITDesc() {
      return "Incorrect in translation";
    },
    get$constructUseIgnIGCDesc() {
      return "Ignored in grammar correction";
    },
    get$constructUseCorIGCDesc() {
      return "Correct in grammar correction";
    },
    get$constructUseIncIGCDesc() {
      return "Incorrect in grammar correction";
    },
    get$constructUseCorPADesc() {
      return "Correct in word meaning activity";
    },
    get$constructUseIgnPADesc() {
      return "Ignored in word meaning activity";
    },
    get$constructUseIncPADesc() {
      return "Incorrect in word meaning activity";
    },
    get$constructUseCorWLDesc() {
      return "Correct in word listening activity";
    },
    get$constructUseIncWLDesc() {
      return "Incorrect in word listening activity";
    },
    get$constructUseIngWLDesc() {
      return "Ignored in word listening activity";
    },
    get$constructUseCorHWLDesc() {
      return "Correct in hidden word activity";
    },
    get$constructUseIncHWLDesc() {
      return "Incorrect in hidden word activity";
    },
    get$constructUseIgnHWLDesc() {
      return "Ignored in hidden word activity";
    },
    get$constructUseCorLDesc() {
      return "Correct in lemma activity";
    },
    get$constructUseIncLDesc() {
      return "Incorrect in lemma activity";
    },
    get$constructUseIgnLDesc() {
      return "Ignored in lemma activity";
    },
    get$constructUseCorMDesc() {
      return "Correct in grammar activity";
    },
    get$constructUseIncMDesc() {
      return "Incorrect in grammar activity";
    },
    get$constructUseIgnMDesc() {
      return "Ignored in grammar activity";
    },
    get$constructUseEmojiDesc() {
      return "Correct in emoji activity";
    },
    get$constructUseCollected() {
      return "Collected in chat";
    },
    get$constructUseNanDesc() {
      return "Not applicable";
    },
    xpIntoLevel$2(currentXP, maxXP) {
      return "" + currentXP + " / " + maxXP + " XP";
    },
    get$enableTTSToolName() {
      return "Enabled text-to-speech";
    },
    get$enableTTSToolDescription() {
      return "Allow the app to generate text-to-speech output for portions of text in your target language.";
    },
    get$yourUsername() {
      return "Your username";
    },
    get$yourEmail() {
      return "Your email";
    },
    get$iWantToLearn() {
      return "I want to learn";
    },
    get$pleaseEnterEmail() {
      return "Please enter a valid email address.";
    },
    get$myBaseLanguage() {
      return "My base language";
    },
    get$clickWordsInstructions() {
      return "\ud83d\udd75\ufe0f Click any word for details. \ud83e\uddd0";
    },
    get$meaningSectionHeader() {
      return "Meaning:";
    },
    get$formSectionHeader() {
      return "Forms used in chats:";
    },
    get$writingExercisesTooltip() {
      return "Writing";
    },
    get$listeningExercisesTooltip() {
      return "Listening";
    },
    get$readingExercisesTooltip() {
      return "Reading";
    },
    get$meaningNotFound() {
      return "Meaning could not be found.";
    },
    get$chooseBaseForm() {
      return "Choose the base form";
    },
    get$notTheCodeError() {
      return "Sorry, that's not the code!";
    },
    get$totalXP() {
      return "Total XP";
    },
    get$numLemmas() {
      return "Total number of lemmas";
    },
    get$numLemmasUsedCorrectly() {
      return "Number of lemmas used correctly at least once";
    },
    get$numLemmasUsedIncorrectly() {
      return "Number of lemmas used correctly 0 times";
    },
    get$numLemmasSmallXP() {
      return "Number of lemmas with 0 - 30 XP";
    },
    get$numLemmasMediumXP() {
      return "Number of lemmas with 31 - 200 XP";
    },
    get$numLemmasLargeXP() {
      return "Number of lemmas with > 200 XP";
    },
    get$numGrammarConcepts() {
      return "Number of grammar concepts";
    },
    get$listGrammarConcepts() {
      return "Grammar concepts";
    },
    get$listGrammarConceptsUsedCorrectly() {
      return "Grammar concepts used correctly in original messages at least 80% of the time";
    },
    get$listGrammarConceptsUsedIncorrectly() {
      return "Grammar concepts used correctly in original messages less than 80% of the time";
    },
    get$listGrammarConceptsUseCorrectlySystemGenerated() {
      return "Grammar concepts chosen correctly from system-generated suggestions at least 80% of the time";
    },
    get$listGrammarConceptsUseIncorrectlySystemGenerated() {
      return "Grammar concepts chosen correctly from system-generated suggestions less than 80% of the time";
    },
    get$listGrammarConceptsSmallXP() {
      return "Grammar concepts with 0-50 xp";
    },
    get$listGrammarConceptsMediumXP() {
      return "Grammar concepts with 51-200 xp";
    },
    get$listGrammarConceptsLargeXP() {
      return "Grammar concepts 201-500 xp";
    },
    get$listGrammarConceptsHugeXP() {
      return "Grammar concepts >500 xp";
    },
    get$numMessagesSent() {
      return "Number of messages sent";
    },
    get$numWordsTyped() {
      return "Number of words typed in original messages";
    },
    get$numCorrectChoices() {
      return "Number of correct words chosen from system-generated suggestions";
    },
    get$numIncorrectChoices() {
      return "Number of incorrect words chosen from system-generated suggestions";
    },
    get$commaSeparatedFile() {
      return "CSV";
    },
    get$excelFile() {
      return "Excel";
    },
    get$fileType() {
      return "File type";
    },
    get$download(_) {
      return "Download";
    },
    get$analyticsNotAvailable() {
      return "User analytics not available";
    },
    get$downloading() {
      return "Downloading...";
    },
    get$failedFetchUserAnalytics() {
      return "Failed to download user analytics";
    },
    get$downloadComplete() {
      return "Download complete!";
    },
    whatIsTheMorphTag$2(morphologicalFeature, wordForm) {
      return "What is the " + morphologicalFeature + " of '" + wordForm + "'?";
    },
    get$dataAvailable() {
      return "Data availability";
    },
    get$available(_) {
      return "Available";
    },
    get$pangeaBotIsFallible() {
      return "Pangea Bot makes mistakes too!";
    },
    whatIsMeaning$2(lemma, partOfSpeech) {
      return "What does '" + lemma + "' mean?";
    },
    get$chooseLemmaMeaningInstructionsBody() {
      return "Match meanings with the words in the message!";
    },
    get$doubleClickToEdit() {
      return "Double-click to edit.";
    },
    get$languageOfInstructionsLabel() {
      return "Language of activity instructions";
    },
    get$targetLanguageLabel() {
      return "Target language";
    },
    get$cefrLevelLabel() {
      return "CEFR level";
    },
    get$image(_) {
      return "Image";
    },
    get$activityPlannerOverviewInstructionsBody() {
      return "Choose a topic, mode, learning objective and generate an activity for the chat!";
    },
    get$constructUsePvmDesc() {
      return "Produced in voice message";
    },
    get$leaveSpaceDescription() {
      return "By leaving the course, you will leave all of the chats within it. Other users will see that you have left the course.";
    },
    get$constructUseCorMmDesc() {
      return "Correct message meaning";
    },
    get$constructUseIncMmDesc() {
      return "Incorrect message meaning";
    },
    get$constructUseIgnMmDesc() {
      return "Ignored message meaning";
    },
    get$meaning() {
      return "Meaning";
    },
    chatWith$1(displayname) {
      return "Group with " + displayname;
    },
    get$clickOnEmailLink() {
      return "Please click on the link in the email and then proceed.\n\nCheck your spam folder if the email hasn't arrived.";
    },
    get$dontForgetPassword() {
      return "Don't forget your password!";
    },
    get$enableAutocorrectToolName() {
      return "Enable device autocorrect";
    },
    get$enableAutocorrectDescription() {
      return "If your device supports the language you're learning, you can enable device autocorrect to fix common errors as you type.";
    },
    get$ttsDisbledTitle() {
      return "Text-to-speech disabled";
    },
    get$ttsDisabledBody() {
      return "You can enable text-to-speech in your learning settings";
    },
    get$noSpaceDescriptionYet() {
      return "No course description created yet.";
    },
    get$tooLargeToSend() {
      return "This message is too large to send";
    },
    get$exitWithoutSaving() {
      return "Are you sure you want to leave without saving?";
    },
    get$enableAutocorrectWarning() {
      return "Warning! Requires adding your target language keyboard";
    },
    get$leaveRoomDescription() {
      return "You're about to leave this chat. Other users will see that you have left the chat.";
    },
    get$confirmUserId() {
      return "Please confirm your Pangea Chat username in order to delete your account.";
    },
    paidSubscriptionStarts$1(startDate) {
      return "Starting " + startDate;
    },
    get$cancelInSubscriptionSettings() {
      return "\u2022 Cancel at any time in subscription settings";
    },
    get$autocorrectNotAvailable() {
      return "Unfortunately your platform is not currently supported for this feature. Stay tuned for further development!";
    },
    get$pleaseUpdateApp() {
      return "Please update the app to continue.";
    },
    get$chooseEmojiInstructionsBody() {
      return "Match emojis with the words they best represent. Don't worry! No points off for disagreeing. \ud83d\ude05";
    },
    get$analyticsVocabListBody() {
      return "This is all your vocabulary! As you earn XP for each word, they'll go from seedling to full bloom. Click on any word to see more details.";
    },
    get$morphAnalyticsListBody() {
      return "These are all the grammar concepts in the language you're learning! You'll unlock them as you encounter them while chatting. Click for details.";
    },
    get$knockSpaceSuccess() {
      return "You have requested to join this course! An admin will respond to your request when they receive it \ud83d\ude00";
    },
    get$chooseWordAudioInstructionsBody() {
      return "Listen to the complete message. Then match the audios with the words.";
    },
    get$chooseMorphsInstructionsBody() {
      return "Click the puzzle pieces for grammar questions!";
    },
    get$home() {
      return "Home";
    },
    get$join(_) {
      return "Join";
    },
    get$readingAssistanceOverviewBody() {
      return "Click the buttons below for mini-games on matching emojis, audios, word meanings, and grammar concepts. Or click on any word for details.";
    },
    get$resetInstructionTooltipsTitle() {
      return "Reset instruction tooltips";
    },
    get$resetInstructionTooltipsDesc() {
      return "Click to show instruction tooltips like for a brand new user.";
    },
    get$selectForGrammar() {
      return "Select a grammar icon for activities and details.";
    },
    get$translationProblem() {
      return "Translation problem";
    },
    get$niceJob() {
      return "Nice job!";
    },
    get$askToJoin() {
      return "Ask to join";
    },
    get$emptyChatWarningTitle() {
      return "Chat is empty";
    },
    get$emptyChatWarningDesc() {
      return "You haven't invited anyone to your chat. Go to Chat settings to invite your contacts or the Bot. You can also do this later.";
    },
    get$areYouLikeMe() {
      return "Are you like me?";
    },
    get$tryAgainLater() {
      return "Too many attempts made. Please try again in 5 minutes.";
    },
    get$enterSpaceCode() {
      return "Enter course code";
    },
    get$shareSpaceLink() {
      return "Share link";
    },
    get$byUsingPangeaChat() {
      return "By using Pangea Chat, I agree to the ";
    },
    get$details(_) {
      return "Details";
    },
    get$languageLevelPreA1Desc() {
      return "I have never learned or used the language.";
    },
    get$languageLevelA1Desc() {
      return "I can understand and use some familiar everyday expressions and very basic phrases.";
    },
    get$languageLevelA2Desc() {
      return "I can understand sentences and frequently used expressions related to areas of immediate relevance.";
    },
    get$languageLevelB1Desc() {
      return "I can deal with most familiar situations and can produce simple connected text on familiar topics.";
    },
    get$languageLevelB2Desc() {
      return "I can understand the mains ideas of complex texts and interact with a degree of fluency and spontaneity.";
    },
    get$languageLevelC1Desc() {
      return "I can express ideas fluently and spontaneously without much struggle and understand a wide range of demanding texts.";
    },
    get$languageLevelC2Desc() {
      return "I can understand virtually everything heard or read and express myself fluently and precisely.";
    },
    get$newVocab() {
      return "New vocab";
    },
    get$newGrammar() {
      return "New grammar concepts";
    },
    get$choosePracticeMode() {
      return "Click on one of the buttons above to start a practice activity";
    },
    get$ban() {
      return "Ban";
    },
    get$kick() {
      return "Kick";
    },
    get$lemma() {
      return "Lemma";
    },
    get$grammarFeature() {
      return "Grammar feature";
    },
    get$grammarTag() {
      return "Grammar tag";
    },
    get$forms() {
      return "Forms";
    },
    get$exampleMessages() {
      return "Example messages";
    },
    get$timesUsedIndependently() {
      return "Times used independently";
    },
    get$timesUsedWithAssistance() {
      return "Times used with assistance";
    },
    shareInviteCode$1(code) {
      return "Share invite code: " + code;
    },
    get$permissions(_) {
      return "Permissions";
    },
    get$spaceChildPermission() {
      return "Who can add new chats to this course";
    },
    get$addEnvironmentOverride() {
      return "Add environment override";
    },
    get$defaultOption() {
      return "Default";
    },
    get$deleteChatDesc() {
      return "Are you sure you want to delete this chat? It will be deleted for all participants and all messages within the chat will no longer be available for practice or learning analytics.";
    },
    get$deleteSpaceDesc() {
      return "The course and any selected chats will be deleted for all participants and all messages within the chat will no longer be available for practice or learning analytics. This action cannot be undone.";
    },
    get$configureSpace() {
      return "Configure course";
    },
    get$pinMessages() {
      return "Pin messages";
    },
    get$setJoinRules() {
      return "Set join rules";
    },
    get$changeGeneralSettings() {
      return "Change general settings";
    },
    get$inviteOtherUsersToRoom() {
      return "Invite other users";
    },
    get$changeTheNameOfTheSpace() {
      return "Change the name of the course";
    },
    get$changeTheDescription() {
      return "Change the description";
    },
    get$changeThePermissions() {
      return "Change the permissions";
    },
    get$introductions() {
      return "Introductions";
    },
    get$announcements() {
      return "Announcements";
    },
    get$activities() {
      return "Activities";
    },
    get$access() {
      return "Access";
    },
    get$botSettings() {
      return "Bot settings";
    },
    get$howSpaceCanBeFound() {
      return "How this course can be found";
    },
    get$$private() {
      return "Private";
    },
    get$cannotBeFoundInSearch() {
      return "Cannot be found in search";
    },
    get$$public(_) {
      return "Public";
    },
    get$visibleToCommunity() {
      return 'Visible to the broader Pangea Chat community via "Find a course"';
    },
    get$howSpaceCanBeJoined() {
      return "How this course can be joined";
    },
    get$canBeFoundVia() {
      return "Can be found via:";
    },
    get$canBeFoundViaInvitation() {
      return "\u2022 invitation";
    },
    get$canBeFoundViaCodeOrLink() {
      return "\u2022 code or link";
    },
    get$canBeFoundViaKnock() {
      return "\u2022 request to join and admin approval";
    },
    get$youHaveLeveledUp() {
      return "You have leveled up!";
    },
    get$sendActivities() {
      return "Send activities";
    },
    get$directMessage() {
      return "Direct Message";
    },
    get$newDirectMessage() {
      return "New direct message";
    },
    get$speakingExercisesTooltip() {
      return "Speaking";
    },
    get$transcriptionFailed() {
      return "Failed to transcribe audio";
    },
    get$aUserIsKnocking() {
      return "1 user is requesting to join your course";
    },
    usersAreKnocking$1(users) {
      return "" + users + " users are requesting to join your course";
    },
    get$failedToFetchTranscription() {
      return "Failed to fetch transcription";
    },
    get$deleteEmptySpaceDesc() {
      return "The course will be deleted for all participants. This action cannot be undone.";
    },
    get$failedToPlayVideo() {
      return "Failed to play video";
    },
    get$done() {
      return "Done";
    },
    get$inThisSpace() {
      return "In this course";
    },
    get$myContacts() {
      return "My contacts";
    },
    get$inviteAllInSpace() {
      return "Invite all in this course";
    },
    get$spaceParticipantsHaveBeenInvitedToTheChat() {
      return "All course participants has been invited to the chat";
    },
    numKnocking$1(count) {
      return "" + count + " knocking";
    },
    numInvited$1(count) {
      return "" + count + " invited";
    },
    get$errorFetchingDefinition() {
      return "Failed to fetch definition";
    },
    get$errorProcessAnalytics() {
      return "Failed to process analytics";
    },
    get$errorDownloading() {
      return "Download failed";
    },
    get$errorFetchingLevelSummary() {
      return "Failed to fetch level summary";
    },
    get$errorLoadingSpaceChildren() {
      return "Failed to load chats within this course";
    },
    get$unexpectedError() {
      return "Unexpected error.";
    },
    get$pleaseReload() {
      return "Please reload and try again.";
    },
    get$translationError() {
      return "Translation error";
    },
    get$errorFetchingTranslation() {
      return "Failed to fetch translation";
    },
    get$errorFetchingActivity() {
      return "Failed to fetch activity";
    },
    get$check(_) {
      return "Check";
    },
    get$unableToFindRoom() {
      return "No chat or course found with that code. Please try again.";
    },
    get$numCompletedActivities() {
      return "Number of completed activities";
    },
    viewingAnalytics$2(visible, users) {
      return "Viewing " + visible + "/" + users + " Analytics";
    },
    get$request(_) {
      return "Request";
    },
    get$requestAll(_) {
      return "Request All";
    },
    get$confirmMessageUnpin() {
      return "Are you sure you want to unpin this message?";
    },
    get$pending(_) {
      return "Pending";
    },
    get$openRoleLabel() {
      return "OPEN";
    },
    joinedTheActivity$2(username, role) {
      return "\ud83d\udc4b " + username + " joined as " + role;
    },
    finishedTheActivity$1(username) {
      return "\ud83c\udfaf " + username + " wrapped up this activity";
    },
    get$endActivityTitle() {
      return "I'm done";
    },
    get$activitySummaryError() {
      return "Activity summaries unavailable";
    },
    get$requestSummaries() {
      return "Request summaries";
    },
    get$requestAccessTitle() {
      return "Request to analytics view access?";
    },
    get$requestAccessDesc() {
      return "Would you like to request access to view participant analytics?\n\nIf participants agree, admins of this course will be able to view their:\n    \u2022 total vocabulary\n    \u2022 total grammar concepts\n    \u2022 total activity sessions completed\n    \u2022 the specific grammar concepts used, correctly and incorrectly\n\nThey will not be able to view their:\n    \u2022 messages in chats outside the course\n    \u2022 vocabulary list";
    },
    get$analyticsInactiveTitle() {
      return "Requests to inactive users couldn\u2019t be sent";
    },
    get$analyticsInactiveDesc() {
      return "Inactive users who haven't logged in since this feature was introduced won't see your request.\n\nThe Request button will appear once they return. You can resend the request later by clicking the Request button under their name when it's available.";
    },
    get$accessRequestedTitle() {
      return "Analytics Access Request";
    },
    accessRequestedDesc$1(space) {
      return "The administrators of \u201c" + space + "\u201d are requesting to view your learning analytics.\n\nIf you agree, admins of this course will be able to view your:\n    \u2022 total vocabulary\n    \u2022 total grammar concepts\n    \u2022 total activity sessions completed\n    \u2022 the specific grammar concepts used, correctly and incorrectly\n\nThey will not be able to view your:\n    \u2022 messages in chats outside the course\n    \u2022 vocabulary list";
    },
    get$allowAccess() {
      return "Allow Access";
    },
    get$denyAccess() {
      return "Deny Access";
    },
    get$adminRequestedAccess() {
      return "Admins asked to view your analytics.";
    },
    lastUpdated$1(time) {
      return "Updated\n" + time;
    },
    get$activityFinishedMessage() {
      return "All Finished!";
    },
    get$endForAll() {
      return "End for all";
    },
    get$newCourse() {
      return "New course";
    },
    get$newCourseSubtitle() {
      return "Which course plan plan would you like to use?";
    },
    get$failedToLoadCourses() {
      return "Failed to load courses";
    },
    numModules$1(num) {
      return "" + num + " modules";
    },
    numActivityPlans$1(num) {
      return "" + num + " activity plans";
    },
    get$coursePlan() {
      return "Course Plan";
    },
    get$editCourseLater() {
      return "You can edit template title, descriptions, and course image later.";
    },
    get$newCourseAccess() {
      return "By default, courses are private and require admin approval to join. You can edit these settings at any time.";
    },
    get$createCourse() {
      return "Create course";
    },
    get$stats() {
      return "Stats";
    },
    get$createGroupChat() {
      return "Create group chat";
    },
    get$editCourse() {
      return "Edit course";
    },
    get$inviteDesc() {
      return "By username, by code or link";
    },
    get$editCourseDesc() {
      return "Here you can edit course title, description, etc.";
    },
    get$permissionsDesc() {
      return "Set permissions such as who can invite users, send messages, create chats, etc.";
    },
    get$accessDesc() {
      return "You can make your course open to the world! Or, make your course private and secure.";
    },
    get$createGroupChatDesc() {
      return "Whereas activity sessions start and end, group chats will stay open for routine communication.";
    },
    get$deleteDesc() {
      return "Only admins can delete a course. This is a destructive action which removes all users and deletes all selected chats within the course. Proceed with caution.";
    },
    get$noCourseFound() {
      return "Oh, this course needs a plan!\n\nCourse plans are a sequence of topics and conversation activities.";
    },
    additionalParticipants$1(num) {
      return "+ " + num + " others";
    },
    get$directMessages() {
      return "Direct Messages";
    },
    get$whatNow() {
      return "What now?";
    },
    get$chooseNextActivity() {
      return "Choose your next activity!";
    },
    get$letsGo() {
      return "Let's go";
    },
    get$chooseRole() {
      return "Choose a role!";
    },
    get$chooseRoleToParticipate() {
      return "Choose a role to participate!";
    },
    waitingToFillRole$1(num) {
      return "Waiting to fill " + num + " roles...";
    },
    get$pingParticipants() {
      return "Ping course participants";
    },
    get$playWithBot() {
      return "Play with Pangea Bot";
    },
    get$inviteFriends() {
      return "Invite friends";
    },
    get$waitNotDone() {
      return "Wait I\u2019m not done!";
    },
    get$waitingForOthersToFinish() {
      return "Waiting for the rest to finish up...";
    },
    get$saveToCompletedActivities() {
      return "Save to completed activities";
    },
    get$generatingSummary() {
      return "Analyzing chat and generating results";
    },
    get$findCourse() {
      return "Find a course";
    },
    get$activityCompletedDesc() {
      return "Your completed activity was added to analytics where you can review and practice the language you used.";
    },
    pingParticipantsNotification$2(user, room) {
      return user + " is looking for users to join the activity session in " + room;
    },
    get$courseName() {
      return "Course name";
    },
    get$createNewCourse() {
      return "New course";
    },
    get$publicCourses() {
      return "Public courses";
    },
    goToCourse$1(course) {
      return "Go to course: " + course;
    },
    get$activityComplete() {
      return "This activity has been completed. The activity summary should be available below.";
    },
    get$haventChattedMuch() {
      return "It looks like you haven't chatted much, try using some more vocab words! If you feel like you've completed your objective, you can end the activity below.";
    },
    get$haveChatted() {
      return "It looks like you've been chatting for a while! If you feel like you've completed your objective, wrap up to finish the activity and we'll generate you a summary in the chat!";
    },
    userDoneAndWaiting$2(num1, num2) {
      return "" + num1 + "/" + num2 + " participants have wrapped up. Wait for everyone to finish, and we'll generate you a summary in the chat! \n\nIf you'd like to rejoin the conversation, click the continue button in the chat.";
    },
    othersDoneAndWaiting$2(num1, num2) {
      return "" + num1 + "/" + num2 + " are done. Have you completed your objective?";
    },
    get$startNewSession() {
      return "Start new session";
    },
    get$joinOpenSession() {
      return "Join open session";
    },
    get$activityNotFound() {
      return "Activity not found";
    },
    get$levelUp() {
      return "Level up";
    },
    get$myActivities() {
      return "My activities";
    },
    get$openToJoin() {
      return "Open to join";
    },
    get$activityDone() {
      return "Activity Done!";
    },
    get$promoCodeInfo() {
      return "Promo codes can be entered on the next page";
    },
    get$editsComingSoon() {
      return "The ability to edit cities and activities is coming soon.";
    },
    get$editing() {
      return "Editing";
    },
    get$activityNeedsOneMember() {
      return "Uh oh! This activity needs 1 more person.";
    },
    activityNeedsMembers$1(num) {
      return "Uh oh! This activity needs " + num + " more people.";
    },
    get$inviteFriendsToCourse() {
      return "Invite friends to my course";
    },
    get$subscribeToUnlockActivitySummaries() {
      return "Subscribe to unlock activity summaries";
    },
    get$subscribeToUnlockDefinitions() {
      return "Subscribe to unlock definitions";
    },
    get$subscribeToUnlockTranscriptions() {
      return "Subscribe to unlock transcriptions";
    },
    get$pingSent() {
      return "\ud83d\udd14 Course ping sent! \ud83d\udd14";
    },
    get$courseTitle() {
      return "Course title";
    },
    get$courseDesc() {
      return "Course description";
    },
    get$courseSavedSuccessfully() {
      return "Course saved successfully";
    },
    get$addCoursePlan() {
      return "Add a course plan";
    },
    get$activityStatsButtonInstruction() {
      return "Click here to view your activity stats and to close the activity when finished";
    },
    get$readingAnalyticsDesc() {
      return "Click practice on each message for reading activities.";
    },
    get$speakingAnalyticsDesc() {
      return "Record voice messages for speaking practice.";
    },
    get$audioAnalyticsDesc() {
      return "Click practice on each message for listening activities.";
    },
    get$loginToAccount() {
      return "Login to my account";
    },
    get$appDescription() {
      return "Learn a language\nwhile texting your friends.";
    },
    get$languages(_) {
      return "Languages";
    },
    get$chooseLanguage() {
      return "Choose a language.";
    },
    get$planTrip() {
      return "Plan your trip";
    },
    get$howAreYouTraveling() {
      return "How are you traveling?";
    },
    get$unlockPrivateTrip() {
      return "Unlock a private trip";
    },
    get$joinPublicTrip() {
      return "Join a public trip";
    },
    get$startOwnTrip() {
      return "Start my own";
    },
    get$tripPlanDesc() {
      return "Trips are courses. Each has 8-10 sequenced topics with a range of task-based language learning activities.";
    },
    get$unlockPrivateTripTitle() {
      return "Unlock private trip";
    },
    get$browsePublicTrips() {
      return "Browse public trips";
    },
    get$startOwnTripTitle() {
      return "Start my own trip";
    },
    get$courseCode() {
      return "What\u2019s the secret password?";
    },
    get$courseCodeHint() {
      return "Trip code or link";
    },
    get$unlockMyTrip() {
      return "Unlock my trip";
    },
    get$signupOption() {
      return "How do you want to sign up?";
    },
    get$withApple() {
      return "With Apple";
    },
    get$withGoogle() {
      return "With Google";
    },
    get$withEmail() {
      return "With Email";
    },
    get$createAccount() {
      return "Create account";
    },
    get$noCoursesFound() {
      return "No courses found";
    },
    get$loginWithEmail() {
      return "Login with email";
    },
    get$usernameOrEmail() {
      return "Username or email";
    },
    get$email() {
      return "Email";
    },
    get$forgotPassword() {
      return "Forgot password?";
    },
    get$writingAnalyticsDesc() {
      return "Send messages to practice writing.";
    },
    get$endActivity() {
      return "End activity";
    },
    get$allLanguages() {
      return "All languages";
    },
    get$allCefrLevels() {
      return "All CEFR levels";
    },
    get$chatListTooltip() {
      return "Here you\u2019ll find your direct messages! Click on any user\u2019s avatar and \u201cstart conversation\u201d to send a DM.";
    },
    get$directMessageBotTitle() {
      return "Direct message Pangea Bot";
    },
    get$feedbackTitle() {
      return "Activity Feedback";
    },
    get$feedbackDesc() {
      return "How should the activity be improved? If you can provide some details, we\u2019ll make the change!";
    },
    get$feedbackHint() {
      return "Your feedback";
    },
    get$feedbackButton() {
      return "Submit feedback";
    },
    get$directMessageBotDesc() {
      return "Talking to humans is more fun but... AI is always ready!";
    },
    remove$1($receiver, arg0) {
      return this.get$remove(this).call$1(arg0);
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(A.L10nFr, C.L10n);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"L10nFr":{"L10n":[]}}'));
};
;
(d => {
  d["ajJHaSf3rUoLzHBm9/uZsqBLaDo="] = d.current;
})($__dart_deferred_initializers__);
;
//# sourceMappingURL=main.dart.js_213.part.js.map
